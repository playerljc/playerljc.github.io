"use strict";(self.webpackChunk_ctsj_build=self.webpackChunk_ctsj_build||[]).push([[1687],{92715:(e,t,n)=>{n.d(t,{A:()=>I});var a=n(87318),r=n(59223),l=n(31934),o=n.n(l),i=n(66783),u=n.n(i),c=n(26322),s=n(61157),d=n(88724),p=n(2438),f=n(70929),m=n(68202).A.memoized,v="adhere-ui-auto-complete";const A=function(e){var t=e.renderLoading,n=e.emptyContent,a=e.loadData,r=(e=(0,c.useState)(!1))[0],l=e[1],o=(e=(0,c.useState)(!1))[0],i=(e=e[1],(0,c.useMemo)((function(){var e;return null!=(e=null==t?void 0:t())?e:c.createElement("div",{className:"".concat(v,"-loading")},c.createElement(f.A,{size:"large"}))}),[t])),u=(0,c.useMemo)((function(){return null!=n?n:c.createElement(p.A,{image:p.A.PRESENTED_IMAGE_SIMPLE})}),[n]),s=(0,c.useCallback)(m.createMemoFun((function(e){l(!0),null!=a&&a(e).then((function(){l(!1)}))})),[a]);return{defaultDebounceTimeout:300,fetchLoading:i,empty:u,selectorPrefix:v,fetching:r,open:o,setOpen:e,onClear:function(){null!=a&&a("").then((function(){l(!1)}))},onInputMemo:s}};var y=function(){return(y=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},g=function(e,t){var n={};for(r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var a=0,r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]]);return n},h=function(e,t,n){if(n||2===arguments.length)for(var a,r=0,l=t.length;r<l;r++)!a&&r in t||((a=a||Array.prototype.slice.call(t,0,r))[r]=t[r]);return e.concat(a||Array.prototype.slice.call(t))},T={keyAttr:"value",titleAttr:"title",parentIdAttr:"pId",rootParentId:0},C=(0,c.memo)((function(e){var t=e.classNameWrap,n=e.styleWrap,a=e.renderLoading,l=e.debounceTimeout,i=e.loadData,p=e.treeData,f=e.emptyContent,m=e.children,v=e.treeDataSimpleMode,C=g(e,["classNameWrap","styleWrap","renderLoading","debounceTimeout","loadData","treeData","emptyContent","children","treeDataSimpleMode"]),S=(e=(0,c.useState)({}))[0],w=e[1],b=(0,c.useRef)(0),D=(a=(e=A({renderLoading:a,emptyContent:f,loadData:i})).defaultDebounceTimeout,f=e.selectorPrefix,e.fetchLoading),k=e.empty,I=e.fetching,_=(i=e.open,e.setOpen),P=e.onClear,R=e.onInputMemo;function x(e){return(Array.isArray(e)?e:[e]).reduce((function(e,t){var n=W.find((function(e){return e.value===t}));return e[t]=h(h([],d.A.getAncestor(W,n,T),!0),[n],!1),e}),{})}function E(e,t,n){var a;n.triggerNode?(w(x(e)),null!=(a=C.onChange)&&a.call(C,e),N?b.current=Date.now():_(!1)):(w({}),null!=(a=C.onChange)&&a.call(C,e,t,n))}e=(0,c.useCallback)(u()((function(e){var t=Date.now();["ant-checkbox-input"].some((function(t){return-1!==e.target.className.indexOf(t)}))||(N&&0!==b.current&&t-b.current<=400?b.current=0:(b.current=0,t=e.target.value.trim(),R(t)))}),null!=l?l:a),[l]);var O=(0,c.useMemo)((function(){return"treeCheckable"in C&&!!C.treeCheckable}),[C.treeCheckable]),N=(0,c.useMemo)((function(){return O||"multiple"in C&&!!C.multiple}),[O,C.multiple]),j=(0,c.useMemo)((function(){return v?p:d.A.treeToArray(p,{parentIdAttr:T.parentIdAttr,rootParentId:T.rootParentId},T.keyAttr)}),[p]),V=(0,c.useMemo)((function(){return Object.keys(S).map((function(e){return S[e]})).flat()}),[S]),K=(0,c.useMemo)((function(){var e,t,n,a;return v?(t=(e=h(h([],null!=p?p:[],!0),null!=V?V:[],!0)).map((function(e){return e.value})),n=Array.from(new Set(t)),d.A.treeToArray(d.A.completionIncompleteFlatArr(h(h([],null!=p?p:[],!0),null!=V?V:[],!0),n.map((function(t){return e.find((function(e){return e.value===t}))})),T),{parentIdAttr:T.parentIdAttr,rootParentId:T.rootParentId},T.keyAttr)):(t=(a=h(h([],null!=j?j:[],!0),null!=V?V:[],!0)).map((function(e){return e.value})),a=(n=Array.from(new Set(t))).map((function(e){return a.find((function(t){return t.value===e}))})),d.A.completionIncompleteFlatArr(h(h([],null!=j?j:[],!0),null!=V?V:[],!0),a,T))}),[p,j,S,C.value]),W=(0,c.useMemo)((function(){return v?K:d.A.treeToArray(K,{parentIdAttr:T.parentIdAttr,rootParentId:T.rootParentId},T.keyAttr)}),[v,K]);return(0,r.A)((function(){var e=Object.keys(S),t=null!=(t=C.value)?t:C.defaultValue;(t=(Array.isArray(t)?t:[t]).filter((function(t){return!e.includes(t)}))).length&&w(y(y({},S),x(t)))}),[C.defaultValue,C.value,S,W]),c.createElement("div",{className:o()(f,null!=t?t:""),style:null!=n?n:{}},c.createElement(s.A,y({showSearch:!0,allowClear:!0,filterTreeNode:!1,open:i,treeData:K,onInput:e,onClear:P,dropdownRender:function(e){var t;return I?D:null!=K&&K.length?null!=(t=null==m?void 0:m({originNode:e,treeDataSimpleMode:v,value:C.value,onChange:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return E.apply(void 0,e)},treeData:null!=K?K:[],loading:I}))?t:e:k},onDropdownVisibleChange:_},C,{treeCheckable:!1,treeDataSimpleMode:!!v,onChange:function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return E.apply(void 0,e)}})))}));C.displayName="TreeAutoComplete";const S=C;var w=function(){return(w=Object.assign||function(e){for(var t,n=1,a=arguments.length;n<a;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},b=function(e,t){var n={};for(r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var a=0,r=Object.getOwnPropertySymbols(e);a<r.length;a++)t.indexOf(r[a])<0&&Object.prototype.propertyIsEnumerable.call(e,r[a])&&(n[r[a]]=e[r[a]]);return n},D=function(e,t,n){if(n||2===arguments.length)for(var a,r=0,l=t.length;r<l;r++)!a&&r in t||((a=a||Array.prototype.slice.call(t,0,r))[r]=t[r]);return e.concat(a||Array.prototype.slice.call(t))},k=(0,c.memo)((function(e){var t=e.classNameWrap,n=e.styleWrap,l=e.renderLoading,i=e.debounceTimeout,s=e.options,d=e.loadData,p=e.defaultOptions,f=e.emptyContent,m=e.children,v=b(e,["classNameWrap","styleWrap","renderLoading","debounceTimeout","options","loadData","defaultOptions","emptyContent","children"]),y=(e=(0,c.useState)(null!=p?p:[]))[0],g=e[1],h=(0,c.useRef)(0),T="mode"in v&&"multiple"===v.mode,C=(l=(e=A({renderLoading:l,emptyContent:f,loadData:d})).defaultDebounceTimeout,f=e.selectorPrefix,e.fetchLoading),S=e.empty,k=e.fetching,I=(d=e.open,e.setOpen),_=e.onClear,P=e.onInputMemo;function R(e){var t;Array.isArray(e)?g(e.map((function(e){return null==x?void 0:x.find((function(t){return t.value===e}))})).filter((function(e){return!!e}))):g([(null!=x?x:[]).find((function(t){return t.value===e}))].filter((function(e){return!!e}))),null!=(t=v.onChange)&&t.call(v,e),T?h.current=Date.now():I(!1)}e=(0,c.useCallback)(u()((function(e){var t=Date.now();["ant-checkbox-input"].some((function(t){return-1!==e.target.className.indexOf(t)}))||(T&&0!==h.current&&t-h.current<=400?h.current=0:(h.current=0,t=e.target.value.trim(),P(t)))}),null!=i?i:l),[i]);var x=(0,c.useMemo)((function(){return D(D(D([],null!=s?s:[],!0),(null!=p?p:[]).filter((function(e){return v.value.includes(e.value)})),!0),y,!0)}),[s,p,y,v.value]),E=(0,c.useMemo)((function(){var e=x.map((function(e){return e.value}));return Array.from(new Set(e)).map((function(e){return x.find((function(t){return t.value===e}))}))}),[x]);return(0,r.A)((function(){g(null!=p?p:[])}),[p]),c.createElement("div",{className:o()(f,null!=t?t:""),style:null!=n?n:{}},c.createElement(a.A,w({showSearch:!0,allowClear:!0,filterOption:!1,open:d,options:E,onInput:e,onClear:_,dropdownRender:function(e){var t;return k?C:null!=E&&E.length?null!=(t=null==m?void 0:m({originNode:e,value:v.value,onChange:R,options:null!=E?E:[],loading:k}))?t:e:S},onDropdownVisibleChange:I},v,{onChange:R})))}));k.TreeAutoComplete=S,k.displayName="AutoComplete";const I=k},68202:(e,t,n)=>{n.d(t,{A:()=>A});var a=n(79073),r=n.n(a),l=n(88724),o=n(54043),i=function(e,t,n){if(n||2===arguments.length)for(var a,r=0,l=t.length;r<l;r++)!a&&r in t||((a=a||Array.prototype.slice.call(t,0,r))[r]=t[r]);return e.concat(a||Array.prototype.slice.call(t))},u=o.A.Events,c={},s="__",d=["".concat(s,"parentName").concat(s),"".concat(s,"parent").concat(s)],p=["$",s],f=[s];function m(e){return!(p.some((function(t){return e.startsWith(t)}))||f.some((function(t){return e.endsWith(t)})))}function v(e,t,n){var a,o=new Proxy(e,{set:function(e,a,o,i){if(m(a)){var u,c,s,p;if(l.A.isArray(e))return p=e.length,u=Reflect.set(e,a,o,i),c=l.A.getPropertyVisitPathStr(e,a),t[c]=r()(e),s=e.length,n.trigger(c,a,o),s<p||!l.A.isObject(o)&&!l.A.isArray(o)||d[0]in o||((o=v(o,t,n))[d[0]]="[".concat(a,"]"),o[d[1]]=e,u=Reflect.set(e,a,o,i)),u;l.A.isObject(e)&&(c=l.A.getPropertyVisitPathStr(e,a),s=void 0,p=r()(o),n.trigger(c,o,p),s=s||r()(o),t[c]=s,!l.A.isObject(o)&&!l.A.isArray(o)||d[0]in o||((o=v(o,t,n))[d[0]]=a,o[d[1]]=e))}return Reflect.set(e,a,o,i)},deleteProperty:function(e,a){var r;return m(a)&&!l.A.isArray(e)&&(r=l.A.getPropertyVisitPathStr(e,a),n.trigger(r,a),delete t[r]),Reflect.deleteProperty(e,a)}});for(a in e){var i=e[a];m(a)&&(l.A.isObject(i)||l.A.isArray(i))&&(e[a]=v(i,t,n),i[d[0]]=l.A.isArray(e)?"[".concat(a,"]"):a,i[d[1]]=e)}return o}const A={createRef:function(e){var t=Symbol.for(l.A.uuid()),n=e;return Object.defineProperty(c,t,{enumerable:!0,configurable:!0,set:function(e){var a=n;n=e,o.A.trigger(Symbol.keyFor(t),{oldValue:a,newValue:e})},get:function(){return n}}),[function(){return c[t]},function(e){c[t]=e},t]},memoized:{watch:{all:function(e,t){t=Array.from(new Set(i([],t,!0)));var n=[],a=[];function r(t){var n=a.find((function(e){return e.type===t}));n&&(n.isChange=!0),a.every((function(e){return e.isChange}))&&(a.forEach((function(e){return e.isChange=!1})),e())}return t.forEach((function(e){var t;function i(n){var a,o=n.oldValue;n=n.newValue;l.A.isSymbol(e)?o!==n&&r(t):"light"===(a=e).mode?Object.is(o,n)||r(t):"deep"===a.mode?l.A.isRef(o)&&l.A.isRef(n)?JSON.stringify(o)!==JSON.stringify(n)&&r(t):Object.is(o,n)||r(t):l.A.isFunction(a.mode)&&!a.mode(o,n)&&r(t)}t=l.A.isSymbol(e)?Symbol.keyFor(e):Symbol.keyFor(e.property),a.push({type:t,isChange:!1}),n.push({type:t,handler:i}),o.A.on(t,i)})),function(){n.forEach((function(e){var t=e.type;e=e.handler;o.A.remove(t,e)}))}},race:function(e,t){t=Array.from(new Set(i([],t,!0)));var n=[];return t.forEach((function(t){var a;function r(n){var a,r=n.oldValue;n=n.newValue;l.A.isSymbol(t)?r!==n&&e():"light"===(a=t).mode?Object.is(r,n)||e():"deep"===a.mode?l.A.isRef(r)&&l.A.isRef(n)?JSON.stringify(r)!==JSON.stringify(n)&&e():Object.is(r,n)||e():l.A.isFunction(a.mode)&&!a.mode(r,n)&&e()}a=l.A.isSymbol(t)?Symbol.keyFor(t):Symbol.keyFor(t.property),n.push({type:a,handler:r}),o.A.on(a,r)})),function(){n.forEach((function(e){var t=e.type;e=e.handler;o.A.remove(t,e)}))}}},createMemoFun:function(e,t){void 0===t&&(t=10);var n=[],a=[function(e,t){return e.length===t.length},function(e,t){for(var n=!0,a=0;a<e.length;a++){var o=e[a],i=t[a];if(!(n=l.A.isRef(o)&&l.A.isRef(i)?JSON.stringify(r()(o))===JSON.stringify(r()(i)):o===i))break}return n}];return function(){for(var r=[],l=0;l<arguments.length;l++)r[l]=arguments[l];return function(r){if(!(o=function(e){void 0===e&&(e=[]);for(var t=null,r=0;r<n.length;r++){var l=n[r],o=l.resultVal;if(function(e,t){for(var n=!0,r=0;r<a.length&&(n=(0,a[r])(e,t));r++);return n}(l.depends,e)){t=o;break}}return t}(r=void 0===r?[]:r))){var l,o=e.apply(this,r);if(n.length>=t&&n.shift(),o instanceof Promise)return l=o.then((function(e){return e})),n.push({depends:r,resultVal:l}),l;n.push({depends:r,resultVal:o})}return o}.call(this,r||[])}}},watch:{create:function(e,t){var n=new u;if(!l.A.isEmpty(t))for(var a in t)n.on(a,t[a]);return{value:v(e,r()(e),n),on:function(e,t){n.on(e,t)},remove:function(e,t){n.remove(e,t)}}}}}},58364:(e,t,n)=>{n.r(t),n.d(t,{default:()=>j});const a="import Mockjs from 'mockjs';\r\n\r\nimport Mock from '@baifendian/adhere-mock';\r\n\r\nconst { Book } = Mock;\r\n\r\nexport default Book.map((t) => {\r\n  const id = Mockjs.mock('@guid');\r\n\r\n  return {\r\n    ...t,\r\n    t: `${t.t}1`,\r\n    value: id,\r\n    label: t.t,\r\n    id,\r\n  };\r\n});\r\n";var r=n(26322),l=n(19994);const o=n(92715).A;var i=n(62076),u=n(10232),c=n(65086);const s=[{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf1",title:"leaf1",id:"leaf1"},{value:"leaf2",title:"leaf2",id:"leaf2"}]},{value:"parent 1-1",title:"parent 1-1",id:"parent 1-1",children:[{value:"leaf3",title:"leaf3",id:"leaf3"}]}]}],d=()=>{const[e,t]=(0,r.useState)([]),[n,a]=(0,r.useState)([]);return r.createElement(o.TreeAutoComplete,{value:n,className:c.A.Wrapper3,treeCheckable:!0,loadData:e=>new Promise((n=>{if(!e)return t([]),void n();setTimeout((()=>{const a=i.A.treeToArray(s,{parentIdAttr:"pId",rootParentId:0},"value"),r=a.filter((t=>-1!==t.title.indexOf(e))),l=i.A.completionIncompleteFlatArr(a,r,{keyAttr:"value",titleAttr:"title",parentIdAttr:"pId",rootParentId:0});t(l),n()}),100)})),treeData:e,onChange:e=>{a(e)}},(e=>{let{value:t,onChange:n,treeData:a,loading:l}=e;return r.createElement(u.A,{loading:l,columns:[{title:"名称",key:"title",dataIndex:"title"}],scroll:{y:300},rowKey:"id",dataSource:a,pagination:!1,rowSelection:{type:"checkbox",selectedRowKeys:t,onSelect:function(e,t,a){n(a.map((e=>e.value)),a.map((e=>e.title)),{selected:t,triggerNode:{props:e}})},onSelectAll:(e,t,a)=>{n(t.map((e=>e.value)),t.map((e=>e.title)),{selected:e,triggerNode:e?{props:a}:null})}}})}))},p=[{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf1",title:"leaf1",id:"leaf1"},{value:"leaf2",title:"leaf2",id:"leaf2"}]},{value:"parent 1-1",title:"parent 1-1",id:"parent 1-1",children:[{value:"leaf3",title:"leaf3",id:"leaf3"}]}]}],f={key:"leaf2",value:[{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf2",title:"leaf2",id:"leaf2"}]}]}]},m=()=>{const[e,t]=(0,r.useState)([]),[n,a]=(0,r.useState)(["leaf2"]);return r.createElement(o.TreeAutoComplete,{value:n,className:c.A.Wrapper,treeCheckable:!0,defaultTreeData:f,loadData:e=>new Promise((n=>{if(!e)return t([]),void n();setTimeout((()=>{const a=i.A.treeToArray(p,{parentIdAttr:"pId",rootParentId:0},"value"),r=a.filter((t=>-1!==t.title.indexOf(e))),l=i.A.completionIncompleteFlatArr(a,r,{keyAttr:"value",titleAttr:"title",parentIdAttr:"pId",rootParentId:0});t(l),n()}),100)})),treeData:e,onChange:e=>{a(e)}})},v=i.A.treeToArray([{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf1",title:"leaf1",id:"leaf1"},{value:"leaf2",title:"leaf2",id:"leaf2"}]},{value:"parent 1-1",title:"parent 1-1",id:"parent 1-1",children:[{value:"leaf3",title:"leaf3",id:"leaf3"}]}]}],{parentIdAttr:"pId",rootParentId:0},"id"),A={key:"leaf2",value:i.A.treeToArray([{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf2",title:"leaf2",id:"leaf2"}]}]}],{parentIdAttr:"pId",rootParentId:0},"id")},y=()=>{const[e,t]=(0,r.useState)([]),[n,a]=(0,r.useState)("leaf2");return r.createElement(o.TreeAutoComplete,{value:n,className:c.A.Wrapper,defaultTreeData:A,treeDataSimpleMode:!0,loadData:e=>new Promise((n=>{if(!e)return t([]),void n();setTimeout((()=>{const a=v.filter((t=>-1!==t.title.indexOf(e))),r=i.A.treeToArray(i.A.completionIncompleteFlatArr(v,a,{keyAttr:"id",titleAttr:"title",parentIdAttr:"pId",rootParentId:0}),{keyAttr:"id",titleAttr:"title",parentIdAttr:"pId",rootParentId:0});t(r),n()}),100)})),treeData:e,onChange:e=>{a(e)}})},g=[{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf1",title:"leaf1",id:"leaf1"},{value:"leaf2",title:"leaf2",id:"leaf2"}]},{value:"parent 1-1",title:"parent 1-1",id:"parent 1-1",children:[{value:"leaf3",title:"leaf3",id:"leaf3"}]}]}],h={key:"leaf2",value:[{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf2",title:"leaf2",id:"leaf2"}]}]}]},T=()=>{const[e,t]=(0,r.useState)([]),[n,a]=(0,r.useState)(["leaf2"]);return r.createElement(o.TreeAutoComplete,{value:n,className:c.A.Wrapper,multiple:!0,defaultTreeData:h,loadData:e=>new Promise((n=>{if(!e)return t([]),void n();setTimeout((()=>{const a=i.A.treeToArray(g,{parentIdAttr:"pId",rootParentId:0},"value"),r=a.filter((t=>-1!==t.title.indexOf(e))),l=i.A.completionIncompleteFlatArr(a,r,{keyAttr:"value",titleAttr:"title",parentIdAttr:"pId",rootParentId:0});t(l),n()}),100)})),treeData:e,onChange:e=>{a(e)}})};var C=n(28361),S=n.n(C),w=n(18640);const{Book:b}=w.A,D=b.map((e=>{const t=S().mock("@guid");return{...e,t:"".concat(e.t,"1"),value:t,label:e.t,id:t}})),k=()=>{const[e,t]=(0,r.useState)([]),[n,a]=(0,r.useState)([]);return r.createElement(o,{placeholder:"自动补全",value:n,mode:"multiple",className:c.A.Wrapper3,loadData:e=>new Promise((n=>{if(!e)return t([]),void n();setTimeout((()=>{const a=[...D].filter((t=>-1!==t.t.indexOf(e))).map((e=>({label:e.t,value:e.id})));t(a),n()}),500)})),options:e,onChange:e=>{a(e)}})},I=()=>{const[e,t]=(0,r.useState)([]),[n,a]=(0,r.useState)([]);return r.createElement(o,{placeholder:"自动补全",value:n,mode:"multiple",className:c.A.Wrapper3,loadData:e=>new Promise((n=>{if(!e)return t([]),void n();setTimeout((()=>{const a=D.filter((t=>-1!==t.t.indexOf(e))).map((e=>({label:e.t,value:e.id,...e})));t(a),n()}),500)})),options:e,onChange:e=>{a(e)}},(e=>{let{value:t,onChange:n,options:a}=e;return r.createElement(u.A,{columns:[{title:"名称",key:"label",dataIndex:"label"},{title:"出版社",key:"label",dataIndex:"label"}],scroll:{y:200},rowKey:"id",dataSource:a,pagination:!1,rowSelection:{type:"checkbox",selectedRowKeys:t,onSelect:function(e,a,r){if(a){const e=r.filter((e=>!!e)).map((e=>e.value));n(Array.from(new Set([...t,...e])))}else n(t.filter((t=>t!==e.id)))},onSelectAll:(e,a,r)=>{if(e){const e=a.filter((e=>!!e)).map((e=>e.value));n(Array.from(new Set([...t,...e])))}else{const e=r.filter((e=>!!e)).map((e=>e.value));n(t.filter((t=>!e.includes(t))))}}}})}))},_=()=>{const[e,t]=(0,r.useState)([]),n=(0,r.useRef)(),[a,l]=(0,r.useState)(0),[i,s]=(0,r.useState)([]),d=(0,r.useRef)({page:1,limit:10});function p(){return new Promise((e=>{setTimeout((()=>{const a=[...D].filter((e=>-1!==e.t.indexOf(n.current))).map((e=>({label:e.t,value:e.id,...e}))),r=a.slice((d.current.page-1)*d.current.limit,d.current.page*d.current.limit);l(a.length),t(r),e()}),500)}))}return r.createElement(o,{placeholder:"自动补全",value:i,mode:"multiple",className:c.A.Wrapper3,loadData:e=>new Promise((a=>{if(n.current=e,d.current={page:1,limit:10},!e)return t([]),void a();p()})),options:e,onChange:e=>{s(e)}},(e=>{let{value:t,onChange:n,options:l}=e;return r.createElement(u.A,{columns:[{title:"名称",key:"label",dataIndex:"label"},{title:"出版社",key:"label",dataIndex:"label"}],rowKey:"id",dataSource:l,pagination:{current:d.page,pageSize:d.limit,total:a,onChange:(e,t)=>{d.current={page:e,limit:t},p()},onShowSizeChange:(e,t)=>{d.current={page:e,limit:t},p()}},scroll:{y:200},rowSelection:{type:"checkbox",selectedRowKeys:t,onSelect:function(e,a,r){if(a){const e=r.filter((e=>!!e)).map((e=>e.value));n(Array.from(new Set([...t,...e])))}else n(t.filter((t=>t!==e.id)))},onSelectAll:(e,a,r)=>{if(e){const e=a.filter((e=>!!e)).map((e=>e.value));n(Array.from(new Set([...t,...e])))}else{const e=r.filter((e=>!!e)).map((e=>e.value));n(t.filter((t=>!e.includes(t))))}}}})}))},P=()=>{const[e,t]=(0,r.useState)([]),n=(0,r.useRef)(),[a,l]=(0,r.useState)(0),[i,s]=(0,r.useState)([]),d=(0,r.useRef)({page:1,limit:10});function p(){return new Promise((e=>{setTimeout((()=>{const a=[...D].filter((e=>-1!==e.t.indexOf(n.current))).map((e=>({label:e.t,value:e.id,...e}))),r=a.slice((d.current.page-1)*d.current.limit,d.current.page*d.current.limit);l(a.length),t(r),e()}),500)}))}return r.createElement(o,{placeholder:"自动补全",value:i,className:c.A.Wrapper3,loadData:e=>new Promise((a=>{if(n.current=e,d.current={page:1,limit:10},!e)return t([]),void a();p()})),options:e,onChange:e=>{s(e)}},(e=>{let{value:t,onChange:n,options:l}=e;return r.createElement(u.A,{columns:[{title:"名称",key:"label",dataIndex:"label"},{title:"出版社",key:"label",dataIndex:"label"}],rowKey:"id",dataSource:l,pagination:{current:d.page,pageSize:d.limit,total:a,onChange:(e,t)=>{d.current={page:e,limit:t},p()},onShowSizeChange:(e,t)=>{d.current={page:e,limit:t},p()}},scroll:{y:200},rowSelection:{type:"radio",selectedRowKeys:t,onSelect:function(e,t,a){if(t){const e=a.filter((e=>!!e)).map((e=>e.value));n(e)}}}})}))},R=[{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf1",title:"leaf1",id:"leaf1"},{value:"leaf2",title:"leaf2",id:"leaf2"}]},{value:"parent 1-1",title:"parent 1-1",id:"parent 1-1",children:[{value:"leaf3",title:"leaf3",id:"leaf3"}]}]}],x=()=>{const[e,t]=(0,r.useState)([]),[n,a]=(0,r.useState)([]);return r.createElement(o.TreeAutoComplete,{value:n,className:c.A.Wrapper3,multiple:!0,loadData:e=>new Promise((n=>{if(!e)return t([]),void n();setTimeout((()=>{const a=i.A.treeToArray(R,{parentIdAttr:"pId",rootParentId:0},"value"),r=a.filter((t=>-1!==t.title.indexOf(e))),l=i.A.completionIncompleteFlatArr(a,r,{keyAttr:"value",titleAttr:"title",parentIdAttr:"pId",rootParentId:0});t(l),n()}),100)})),treeData:e,onChange:e=>{a(e)}},(e=>{let{value:t,onChange:n,treeData:a,loading:l}=e;return r.createElement(u.A,{loading:l,columns:[{title:"名称",key:"title",dataIndex:"title"}],scroll:{y:300},rowKey:"id",dataSource:a,pagination:!1,rowSelection:{type:"checkbox",selectedRowKeys:t,onSelect:function(e,t,a){n(a.map((e=>e.value)),a.map((e=>e.title)),{selected:t,triggerNode:{props:e}})},onSelectAll:(e,t,a)=>{n(t.map((e=>e.value)),t.map((e=>e.title)),{selected:e,triggerNode:e?{props:a}:null})}}})}))},E=[{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf1",title:"leaf1",id:"leaf1"},{value:"leaf2",title:"leaf2",id:"leaf2"}]},{value:"parent 1-1",title:"parent 1-1",id:"parent 1-1",children:[{value:"leaf3",title:"leaf3",id:"leaf3"}]}]}],O={key:"leaf2",value:[{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf2",title:"leaf2",id:"leaf2"}]}]}]},N=()=>{const[e,t]=(0,r.useState)([]),[n,a]=(0,r.useState)("leaf2");return r.createElement(o.TreeAutoComplete,{value:n,className:c.A.Wrapper,defaultTreeData:O,loadData:e=>new Promise((n=>{if(!e)return t([]),void n();setTimeout((()=>{const a=i.A.treeToArray(E,{parentIdAttr:"pId",rootParentId:0},"value"),r=a.filter((t=>-1!==t.title.indexOf(e))),l=i.A.completionIncompleteFlatArr(a,r,{keyAttr:"value",titleAttr:"title",parentIdAttr:"pId",rootParentId:0});t(l),n()}),100)})),treeData:e,onChange:e=>{a(e)}})},j=()=>r.createElement(l.Ay,null,r.createElement(l.wn,{title:"AutoComplete"},r.createElement("p",null,"自动补全")),r.createElement(l.Wc,{title:"代码演示",config:[{id:"p1",name:"Select的自动补全",cardProps:{description:{title:"Select的自动补全",info:"Select的自动补全"}},active:"SelectAutoComplete.jsx",config:[{key:"SelectAutoComplete.jsx",title:"SelectAutoComplete.jsx",codeText:"import React, { useState } from 'react';\n\nimport { AutoComplete } from '@baifendian/adhere';\n\nimport Book from '../data';\n\nimport styles from '../../anthoc/examples/Cascader/index.less';\n\nexport default () => {\n  const [options, setOptions] = useState([]);\n\n  const [value, setValue] = useState([]);\n\n  return (\n    <AutoComplete\n      placeholder=\"自动补全\"\n      value={value}\n      mode=\"multiple\"\n      className={styles.Wrapper3}\n      loadData={(_kw) => {\n        return new Promise((resolve) => {\n          if (!_kw) {\n            setOptions([]);\n            resolve();\n            return;\n          }\n\n          setTimeout(() => {\n            const result = [...Book]\n              .filter((_book) => _book.t.indexOf(_kw) !== -1)\n              .map((t) => ({\n                label: t.t,\n                value: t.id,\n              }));\n\n            setOptions(result);\n\n            resolve();\n          }, 500);\n        });\n      }}\n      options={options}\n      onChange={(_value) => {\n        setValue(_value);\n      }}\n    />\n  );\n};\n"},{key:"data.js",title:"data.js",codeText:a}],type:"PlayGroundTab",renderChildren:()=>r.createElement(k,null)},{id:"p2",name:"Table的自动补全",cardProps:{description:{title:"Table的自动补全",info:"Table的自动补全"}},active:"TableAutoComplete.jsx",config:[{key:"TableAutoComplete.jsx",title:"TableAutoComplete.jsx",codeText:"import { Table } from 'antd';\nimport React, { useState } from 'react';\n\nimport { AutoComplete } from '@baifendian/adhere';\n\nimport Book from '../data';\n\nimport styles from '../../anthoc/examples/Cascader/index.less';\n\nexport default () => {\n  const [options, setOptions] = useState([]);\n\n  const [value, setValue] = useState([]);\n\n  return (\n    <AutoComplete\n      placeholder=\"自动补全\"\n      value={value}\n      mode=\"multiple\"\n      className={styles.Wrapper3}\n      loadData={(_kw) => {\n        return new Promise((resolve) => {\n          if (!_kw) {\n            setOptions([]);\n            resolve();\n            return;\n          }\n\n          setTimeout(() => {\n            const result = Book.filter((_book) => _book.t.indexOf(_kw) !== -1).map((t) => ({\n              label: t.t,\n              value: t.id,\n              ...t,\n            }));\n\n            setOptions(result);\n\n            resolve();\n          }, 500);\n        });\n      }}\n      options={options}\n      onChange={(_value) => {\n        setValue(_value);\n      }}\n    >\n      {({ value: _value, onChange: _onChange, options }) => {\n        return (\n          <Table\n            columns={[\n              {\n                title: '名称',\n                key: 'label',\n                dataIndex: 'label',\n              },\n              {\n                title: '出版社',\n                key: 'label',\n                dataIndex: 'label',\n              },\n            ]}\n            scroll={{\n              y: 200,\n            }}\n            rowKey=\"id\"\n            dataSource={options}\n            pagination={false}\n            rowSelection={{\n              type: 'checkbox',\n              selectedRowKeys: _value,\n              onSelect: function (record, selected, selectedRows) {\n                if (selected) {\n                  const selectedRowKeys = selectedRows.filter((t) => !!t).map((t) => t.value);\n                  _onChange(Array.from(new Set([..._value, ...selectedRowKeys])));\n                } else {\n                  _onChange(_value.filter((t) => t !== record.id));\n                }\n              },\n              onSelectAll: (selected, selectedRows, changeRows) => {\n                if (selected) {\n                  const selectedRowKeys = selectedRows.filter((t) => !!t).map((t) => t.value);\n                  _onChange(Array.from(new Set([..._value, ...selectedRowKeys])));\n                } else {\n                  const changeSelectedRowKeys = changeRows.filter((t) => !!t).map((t) => t.value);\n                  _onChange(_value.filter((t) => !changeSelectedRowKeys.includes(t)));\n                }\n              },\n            }}\n          />\n        );\n      }}\n    </AutoComplete>\n  );\n};\n"},{key:"data.js",title:"data.js",codeText:a}],type:"PlayGroundTab",renderChildren:()=>r.createElement(I,null)},{id:"p3",name:"Table的单选分页自动补全",cardProps:{description:{title:"Table的单选分页自动补全",info:"Table的单选分页自动补全"}},active:"TablePaginRadioAutoComplete.jsx",config:[{key:"TablePaginRadioAutoComplete.jsx",title:"TablePaginRadioAutoComplete.jsx",codeText:"import { Table } from 'antd';\nimport React, { useRef, useState } from 'react';\n\nimport { AutoComplete } from '@baifendian/adhere';\n\nimport Book from '../data';\n\nimport styles from '../../anthoc/examples/Cascader/index.less';\n\nexport default () => {\n  const [options, setOptions] = useState([]);\n\n  const kw = useRef();\n\n  const [totalCount, setTotalCount] = useState(0);\n\n  const [value, setValue] = useState([]);\n\n  const pagin = useRef({\n    page: 1,\n    limit: 10,\n  });\n\n  function loadData() {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const all = [...Book]\n          .filter((_book) => {\n            return _book.t.indexOf(kw.current) !== -1;\n          })\n          .map((t) => ({\n            label: t.t,\n            value: t.id,\n            ...t,\n          }));\n\n        const result = all.slice(\n          (pagin.current.page - 1) * pagin.current.limit,\n          pagin.current.page * pagin.current.limit,\n        );\n\n        setTotalCount(all.length);\n        setOptions(result);\n\n        resolve();\n      }, 500);\n    });\n  }\n\n  return (\n    <AutoComplete\n      placeholder=\"自动补全\"\n      value={value}\n      className={styles.Wrapper3}\n      loadData={(_kw) => {\n        return new Promise((resolve) => {\n          kw.current = _kw;\n\n          pagin.current = {\n            page: 1,\n            limit: 10,\n          };\n\n          if (!_kw) {\n            setOptions([]);\n            resolve();\n            return;\n          }\n\n          loadData();\n        });\n      }}\n      options={options}\n      onChange={(_value) => {\n        setValue(_value);\n      }}\n    >\n      {({ value: _value, onChange: _onChange, options }) => {\n        return (\n          <Table\n            columns={[\n              {\n                title: '名称',\n                key: 'label',\n                dataIndex: 'label',\n              },\n              {\n                title: '出版社',\n                key: 'label',\n                dataIndex: 'label',\n              },\n            ]}\n            rowKey=\"id\"\n            dataSource={options}\n            pagination={{\n              current: pagin.page,\n              pageSize: pagin.limit,\n              total: totalCount,\n              onChange: (page, pageSize) => {\n                pagin.current = {\n                  page,\n                  limit: pageSize,\n                };\n\n                loadData();\n              },\n              onShowSizeChange: (current, size) => {\n                pagin.current = {\n                  page: current,\n                  limit: size,\n                };\n\n                loadData();\n              },\n            }}\n            scroll={{\n              y: 200,\n            }}\n            rowSelection={{\n              type: 'radio',\n              selectedRowKeys: _value,\n              onSelect: function (record, selected, selectedRows) {\n                if (selected) {\n                  const selectedRowKeys = selectedRows.filter((t) => !!t).map((t) => t.value);\n                  _onChange(selectedRowKeys);\n                }\n              },\n            }}\n          />\n        );\n      }}\n    </AutoComplete>\n  );\n};\n"},{key:"data.js",title:"data.js",codeText:a}],type:"PlayGroundTab",renderChildren:()=>r.createElement(P,null)},{id:"p4",name:"Table的多选分页自动补全",cardProps:{description:{title:"Table的多选分页自动补全",info:"Table的多选分页自动补全"}},active:"TablePaginMultipleAutoComplete.jsx",config:[{key:"TablePaginMultipleAutoComplete.jsx",title:"TablePaginMultipleAutoComplete.jsx",codeText:"import { Table } from 'antd';\nimport React, { useRef, useState } from 'react';\n\nimport { AutoComplete } from '@baifendian/adhere';\n\nimport Book from '../data';\n\nimport styles from '../../anthoc/examples/Cascader/index.less';\n\nexport default () => {\n  const [options, setOptions] = useState([]);\n\n  const kw = useRef();\n\n  const [totalCount, setTotalCount] = useState(0);\n\n  const [value, setValue] = useState([]);\n\n  const pagin = useRef({\n    page: 1,\n    limit: 10,\n  });\n\n  function loadData() {\n    return new Promise((resolve) => {\n      setTimeout(() => {\n        const all = [...Book]\n          .filter((_book) => {\n            return _book.t.indexOf(kw.current) !== -1;\n          })\n          .map((t) => ({\n            label: t.t,\n            value: t.id,\n            ...t,\n          }));\n\n        const result = all.slice(\n          (pagin.current.page - 1) * pagin.current.limit,\n          pagin.current.page * pagin.current.limit,\n        );\n\n        setTotalCount(all.length);\n        setOptions(result);\n\n        resolve();\n      }, 500);\n    });\n  }\n\n  return (\n    <AutoComplete\n      placeholder=\"自动补全\"\n      value={value}\n      mode=\"multiple\"\n      className={styles.Wrapper3}\n      loadData={(_kw) => {\n        return new Promise((resolve) => {\n          kw.current = _kw;\n\n          pagin.current = {\n            page: 1,\n            limit: 10,\n          };\n\n          if (!_kw) {\n            setOptions([]);\n            resolve();\n            return;\n          }\n\n          loadData();\n        });\n      }}\n      options={options}\n      onChange={(_value) => {\n        setValue(_value);\n      }}\n    >\n      {({ value: _value, onChange: _onChange, options }) => {\n        return (\n          <Table\n            columns={[\n              {\n                title: '名称',\n                key: 'label',\n                dataIndex: 'label',\n              },\n              {\n                title: '出版社',\n                key: 'label',\n                dataIndex: 'label',\n              },\n            ]}\n            rowKey=\"id\"\n            dataSource={options}\n            pagination={{\n              current: pagin.page,\n              pageSize: pagin.limit,\n              total: totalCount,\n              onChange: (page, pageSize) => {\n                pagin.current = {\n                  page,\n                  limit: pageSize,\n                };\n\n                loadData();\n              },\n              onShowSizeChange: (current, size) => {\n                pagin.current = {\n                  page: current,\n                  limit: size,\n                };\n\n                loadData();\n              },\n            }}\n            scroll={{\n              y: 200,\n            }}\n            rowSelection={{\n              type: 'checkbox',\n              selectedRowKeys: _value,\n              onSelect: function (record, selected, selectedRows) {\n                if (selected) {\n                  const selectedRowKeys = selectedRows.filter((t) => !!t).map((t) => t.value);\n                  _onChange(Array.from(new Set([..._value, ...selectedRowKeys])));\n                } else {\n                  _onChange(_value.filter((t) => t !== record.id));\n                }\n              },\n              onSelectAll: (selected, selectedRows, changeRows) => {\n                if (selected) {\n                  const selectedRowKeys = selectedRows.filter((t) => !!t).map((t) => t.value);\n                  _onChange(Array.from(new Set([..._value, ...selectedRowKeys])));\n                } else {\n                  const changeSelectedRowKeys = changeRows.filter((t) => !!t).map((t) => t.value);\n                  _onChange(_value.filter((t) => !changeSelectedRowKeys.includes(t)));\n                }\n              },\n            }}\n          />\n        );\n      }}\n    </AutoComplete>\n  );\n};\n"},{key:"data.js",title:"data.js",codeText:a}],type:"PlayGroundTab",renderChildren:()=>r.createElement(_,null)},{id:"p5",name:"TreeSelect的AutoComplete",cardProps:{description:{title:"TreeSelect的AutoComplete",info:"TreeSelect的AutoComplete"}},codeText:"import React, { useState } from 'react';\n\nimport { AutoComplete, Util } from '@baifendian/adhere';\n\nimport styles from '../../anthoc/examples/Cascader/index.less';\n\nconst TREE_DATA = [\n  {\n    value: 'parent 1',\n    title: 'parent 1',\n    id: 'parent 1',\n    children: [\n      {\n        value: 'parent 1-0',\n        title: 'parent 1-0',\n        id: 'parent 1-0',\n        children: [\n          {\n            value: 'leaf1',\n            title: 'leaf1',\n            id: 'leaf1',\n          },\n          {\n            value: 'leaf2',\n            title: 'leaf2',\n            id: 'leaf2',\n          },\n        ],\n      },\n      {\n        value: 'parent 1-1',\n        title: 'parent 1-1',\n        id: 'parent 1-1',\n        children: [\n          {\n            value: 'leaf3',\n            title: 'leaf3',\n            id: 'leaf3',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst defaultTreeData = {\n  key: 'leaf2',\n  value: [\n    {\n      value: 'parent 1',\n      title: 'parent 1',\n      id: 'parent 1',\n      children: [\n        {\n          value: 'parent 1-0',\n          title: 'parent 1-0',\n          id: 'parent 1-0',\n          children: [\n            {\n              value: 'leaf2',\n              title: 'leaf2',\n              id: 'leaf2',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nexport default () => {\n  const [treeData, setTreeData] = useState([]);\n\n  const [value, setValue] = useState('leaf2');\n\n  return (\n    <AutoComplete.TreeAutoComplete\n      value={value}\n      className={styles.Wrapper}\n      defaultTreeData={defaultTreeData}\n      loadData={(_kw) => {\n        return new Promise((resolve) => {\n          if (!_kw) {\n            setTreeData([]);\n            resolve();\n            return;\n          }\n\n          setTimeout(() => {\n            // 正常\n            const flatTreeData = Util.treeToArray(\n              TREE_DATA,\n              { parentIdAttr: 'pId', rootParentId: 0 },\n              'value',\n            );\n\n            const result = flatTreeData.filter((_node) => _node.title.indexOf(_kw) !== -1);\n\n            const targetTreeData = Util.completionIncompleteFlatArr(flatTreeData, result, {\n              keyAttr: 'value',\n              titleAttr: 'title',\n              parentIdAttr: 'pId',\n              rootParentId: 0,\n            });\n\n            setTreeData(targetTreeData);\n\n            resolve();\n          }, 100);\n        });\n      }}\n      treeData={treeData}\n      onChange={(_value) => {\n        setValue(_value);\n      }}\n    />\n  );\n};\n",type:"PlayGround",renderChildren:()=>r.createElement(N,null)},{id:"p6",name:"TreeSelect的AutoComplete拉平的数据",cardProps:{description:{title:"TreeSelect的AutoComplete拉平的数据",info:"TreeSelect的AutoComplete拉平的数据"}},codeText:"import React, { useState } from 'react';\n\nimport { AutoComplete, Util } from '@baifendian/adhere';\n\nimport styles from '../../anthoc/examples/Cascader/index.less';\n\nconst TREE_DATA = [\n  {\n    value: 'parent 1',\n    title: 'parent 1',\n    id: 'parent 1',\n    children: [\n      {\n        value: 'parent 1-0',\n        title: 'parent 1-0',\n        id: 'parent 1-0',\n        children: [\n          {\n            value: 'leaf1',\n            title: 'leaf1',\n            id: 'leaf1',\n          },\n          {\n            value: 'leaf2',\n            title: 'leaf2',\n            id: 'leaf2',\n          },\n        ],\n      },\n      {\n        value: 'parent 1-1',\n        title: 'parent 1-1',\n        id: 'parent 1-1',\n        children: [\n          {\n            value: 'leaf3',\n            title: 'leaf3',\n            id: 'leaf3',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst FLAT_TREE_DATA = Util.treeToArray(\n  TREE_DATA,\n  {\n    parentIdAttr: 'pId',\n    rootParentId: 0,\n  },\n  'id',\n);\n\nconst defaultTreeData = {\n  key: 'leaf2',\n  value: [\n    {\n      value: 'parent 1',\n      title: 'parent 1',\n      id: 'parent 1',\n      children: [\n        {\n          value: 'parent 1-0',\n          title: 'parent 1-0',\n          id: 'parent 1-0',\n          children: [\n            {\n              value: 'leaf2',\n              title: 'leaf2',\n              id: 'leaf2',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nconst flatDefaultTreeData = {\n  key: 'leaf2',\n  value: Util.treeToArray(\n    defaultTreeData.value,\n    {\n      parentIdAttr: 'pId',\n      rootParentId: 0,\n    },\n    'id',\n  ),\n};\n\nexport default () => {\n  const [treeData, setTreeData] = useState([]);\n\n  const [value, setValue] = useState('leaf2');\n\n  return (\n    <AutoComplete.TreeAutoComplete\n      value={value}\n      className={styles.Wrapper}\n      defaultTreeData={flatDefaultTreeData}\n      treeDataSimpleMode\n      loadData={(_kw) => {\n        return new Promise((resolve) => {\n          if (!_kw) {\n            setTreeData([]);\n            resolve();\n            return;\n          }\n\n          setTimeout(() => {\n            // flat\n            const result = FLAT_TREE_DATA.filter((_node) => _node.title.indexOf(_kw) !== -1);\n\n            const targetTreeData = Util.treeToArray(\n              Util.completionIncompleteFlatArr(FLAT_TREE_DATA, result, {\n                keyAttr: 'id',\n                titleAttr: 'title',\n                parentIdAttr: 'pId',\n                rootParentId: 0,\n              }),\n              {\n                keyAttr: 'id',\n                titleAttr: 'title',\n                parentIdAttr: 'pId',\n                rootParentId: 0,\n              },\n            );\n\n            setTreeData(targetTreeData);\n\n            resolve();\n          }, 100);\n        });\n      }}\n      treeData={treeData}\n      onChange={(_value) => {\n        setValue(_value);\n      }}\n    />\n  );\n};\n",type:"PlayGround",renderChildren:()=>r.createElement(y,null)},{id:"p7",name:"TreeSelect的AutoComplete多选",cardProps:{description:{title:"TreeSelect的AutoComplete多选",info:"TreeSelect的AutoComplete多选"}},codeText:"import React, { useState } from 'react';\n\nimport { AutoComplete, Util } from '@baifendian/adhere';\n\nimport styles from '../../anthoc/examples/Cascader/index.less';\n\nconst TREE_DATA = [\n  {\n    value: 'parent 1',\n    title: 'parent 1',\n    id: 'parent 1',\n    children: [\n      {\n        value: 'parent 1-0',\n        title: 'parent 1-0',\n        id: 'parent 1-0',\n        children: [\n          {\n            value: 'leaf1',\n            title: 'leaf1',\n            id: 'leaf1',\n          },\n          {\n            value: 'leaf2',\n            title: 'leaf2',\n            id: 'leaf2',\n          },\n        ],\n      },\n      {\n        value: 'parent 1-1',\n        title: 'parent 1-1',\n        id: 'parent 1-1',\n        children: [\n          {\n            value: 'leaf3',\n            title: 'leaf3',\n            id: 'leaf3',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst defaultTreeData = {\n  key: 'leaf2',\n  value: [\n    {\n      value: 'parent 1',\n      title: 'parent 1',\n      id: 'parent 1',\n      children: [\n        {\n          value: 'parent 1-0',\n          title: 'parent 1-0',\n          id: 'parent 1-0',\n          children: [\n            {\n              value: 'leaf2',\n              title: 'leaf2',\n              id: 'leaf2',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nexport default () => {\n  const [treeData, setTreeData] = useState([]);\n\n  const [value, setValue] = useState(['leaf2']);\n\n  return (\n    <AutoComplete.TreeAutoComplete\n      value={value}\n      className={styles.Wrapper}\n      multiple\n      defaultTreeData={defaultTreeData}\n      loadData={(_kw) => {\n        return new Promise((resolve) => {\n          if (!_kw) {\n            setTreeData([]);\n            resolve();\n            return;\n          }\n\n          setTimeout(() => {\n            // 正常\n            const flatTreeData = Util.treeToArray(\n              TREE_DATA,\n              { parentIdAttr: 'pId', rootParentId: 0 },\n              'value',\n            );\n\n            const result = flatTreeData.filter((_node) => _node.title.indexOf(_kw) !== -1);\n\n            const targetTreeData = Util.completionIncompleteFlatArr(flatTreeData, result, {\n              keyAttr: 'value',\n              titleAttr: 'title',\n              parentIdAttr: 'pId',\n              rootParentId: 0,\n            });\n\n            setTreeData(targetTreeData);\n\n            resolve();\n          }, 100);\n        });\n      }}\n      treeData={treeData}\n      onChange={(_value) => {\n        setValue(_value);\n      }}\n    />\n  );\n};\n",type:"PlayGround",renderChildren:()=>r.createElement(T,null)},{id:"p8",name:"TreeSelect的AutoComplete支持checkable",cardProps:{description:{title:"TreeSelect的AutoComplete支持checkable",info:"TreeSelect的AutoComplete支持checkable"}},codeText:"import React, { useState } from 'react';\n\nimport { AutoComplete, Util } from '@baifendian/adhere';\n\nimport styles from '../../anthoc/examples/Cascader/index.less';\n\nconst TREE_DATA = [\n  {\n    value: 'parent 1',\n    title: 'parent 1',\n    id: 'parent 1',\n    children: [\n      {\n        value: 'parent 1-0',\n        title: 'parent 1-0',\n        id: 'parent 1-0',\n        children: [\n          {\n            value: 'leaf1',\n            title: 'leaf1',\n            id: 'leaf1',\n          },\n          {\n            value: 'leaf2',\n            title: 'leaf2',\n            id: 'leaf2',\n          },\n        ],\n      },\n      {\n        value: 'parent 1-1',\n        title: 'parent 1-1',\n        id: 'parent 1-1',\n        children: [\n          {\n            value: 'leaf3',\n            title: 'leaf3',\n            id: 'leaf3',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nconst defaultTreeData = {\n  key: 'leaf2',\n  value: [\n    {\n      value: 'parent 1',\n      title: 'parent 1',\n      id: 'parent 1',\n      children: [\n        {\n          value: 'parent 1-0',\n          title: 'parent 1-0',\n          id: 'parent 1-0',\n          children: [\n            {\n              value: 'leaf2',\n              title: 'leaf2',\n              id: 'leaf2',\n            },\n          ],\n        },\n      ],\n    },\n  ],\n};\n\nexport default () => {\n  const [treeData, setTreeData] = useState([]);\n\n  const [value, setValue] = useState(['leaf2']);\n\n  return (\n    <AutoComplete.TreeAutoComplete\n      value={value}\n      className={styles.Wrapper}\n      treeCheckable\n      defaultTreeData={defaultTreeData}\n      loadData={(_kw) => {\n        return new Promise((resolve) => {\n          if (!_kw) {\n            setTreeData([]);\n            resolve();\n            return;\n          }\n\n          setTimeout(() => {\n            // 正常\n            const flatTreeData = Util.treeToArray(\n              TREE_DATA,\n              { parentIdAttr: 'pId', rootParentId: 0 },\n              'value',\n            );\n\n            const result = flatTreeData.filter((_node) => _node.title.indexOf(_kw) !== -1);\n\n            const targetTreeData = Util.completionIncompleteFlatArr(flatTreeData, result, {\n              keyAttr: 'value',\n              titleAttr: 'title',\n              parentIdAttr: 'pId',\n              rootParentId: 0,\n            });\n\n            setTreeData(targetTreeData);\n\n            resolve();\n          }, 100);\n        });\n      }}\n      treeData={treeData}\n      onChange={(_value) => {\n        setValue(_value);\n      }}\n    />\n  );\n};\n",type:"PlayGround",renderChildren:()=>r.createElement(m,null)},{id:"p9",name:"TreeSelect的AutoComplete自定义TableTree渲染",cardProps:{description:{title:"TreeSelect的AutoComplete自定义TableTree渲染",info:"TreeSelect的AutoComplete自定义TableTree渲染"}},codeText:"import { Table } from 'antd';\nimport React, { useState } from 'react';\n\nimport { AutoComplete, Util } from '@baifendian/adhere';\n\nimport styles from '../../anthoc/examples/Cascader/index.less';\n\nconst TREE_DATA = [\n  {\n    value: 'parent 1',\n    title: 'parent 1',\n    id: 'parent 1',\n    children: [\n      {\n        value: 'parent 1-0',\n        title: 'parent 1-0',\n        id: 'parent 1-0',\n        children: [\n          {\n            value: 'leaf1',\n            title: 'leaf1',\n            id: 'leaf1',\n          },\n          {\n            value: 'leaf2',\n            title: 'leaf2',\n            id: 'leaf2',\n          },\n        ],\n      },\n      {\n        value: 'parent 1-1',\n        title: 'parent 1-1',\n        id: 'parent 1-1',\n        children: [\n          {\n            value: 'leaf3',\n            title: 'leaf3',\n            id: 'leaf3',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const [treeData, setTreeData] = useState([]);\n\n  const [value, setValue] = useState([]);\n\n  return (\n    <AutoComplete.TreeAutoComplete\n      value={value}\n      className={styles.Wrapper3}\n      multiple\n      loadData={(_kw) => {\n        return new Promise((resolve) => {\n          if (!_kw) {\n            setTreeData([]);\n            resolve();\n            return;\n          }\n\n          setTimeout(() => {\n            // 正常\n\n            const flatTreeData = Util.treeToArray(\n              TREE_DATA,\n              { parentIdAttr: 'pId', rootParentId: 0 },\n              'value',\n            );\n\n            const result = flatTreeData.filter((_node) => _node.title.indexOf(_kw) !== -1);\n\n            const targetTreeData = Util.completionIncompleteFlatArr(flatTreeData, result, {\n              keyAttr: 'value',\n              titleAttr: 'title',\n              parentIdAttr: 'pId',\n              rootParentId: 0,\n            });\n\n            setTreeData(targetTreeData);\n\n            resolve();\n          }, 100);\n        });\n      }}\n      treeData={treeData}\n      onChange={(_value) => {\n        setValue(_value);\n      }}\n    >\n      {({ value: _value, onChange: _onChange, treeData: _treeData, loading }) => (\n        <Table\n          loading={loading}\n          columns={[\n            {\n              title: '名称',\n              key: 'title',\n              dataIndex: 'title',\n            },\n          ]}\n          scroll={{\n            y: 300,\n          }}\n          rowKey=\"id\"\n          dataSource={_treeData}\n          pagination={false}\n          rowSelection={{\n            type: 'checkbox',\n            selectedRowKeys: _value,\n            onSelect: function (record, selected, selectedRows) {\n              _onChange(\n                selectedRows.map((t) => t.value),\n                selectedRows.map((t) => t.title),\n                {\n                  selected,\n                  triggerNode: {\n                    props: record,\n                  },\n                },\n              );\n            },\n            onSelectAll: (selected, selectedRows, changeRows) => {\n              _onChange(\n                selectedRows.map((t) => t.value),\n                selectedRows.map((t) => t.title),\n                {\n                  selected,\n                  triggerNode: selected\n                    ? {\n                        props: changeRows,\n                      }\n                    : null,\n                },\n              );\n            },\n          }}\n        />\n      )}\n    </AutoComplete.TreeAutoComplete>\n  );\n};\n",type:"PlayGround",renderChildren:()=>r.createElement(x,null)},{id:"p10",name:"TreeSelect的AutoComplete自定义TableTree渲染支持checkable",cardProps:{description:{title:"TreeSelect的AutoComplete自定义TableTree渲染支持checkable",info:"TreeSelect的AutoComplete自定义TableTree渲染支持checkable"}},codeText:"import { Table } from 'antd';\nimport React, { useState } from 'react';\n\nimport { AutoComplete, Util } from '@baifendian/adhere';\n\nimport styles from '../../anthoc/examples/Cascader/index.less';\n\nconst TREE_DATA = [\n  {\n    value: 'parent 1',\n    title: 'parent 1',\n    id: 'parent 1',\n    children: [\n      {\n        value: 'parent 1-0',\n        title: 'parent 1-0',\n        id: 'parent 1-0',\n        children: [\n          {\n            value: 'leaf1',\n            title: 'leaf1',\n            id: 'leaf1',\n          },\n          {\n            value: 'leaf2',\n            title: 'leaf2',\n            id: 'leaf2',\n          },\n        ],\n      },\n      {\n        value: 'parent 1-1',\n        title: 'parent 1-1',\n        id: 'parent 1-1',\n        children: [\n          {\n            value: 'leaf3',\n            title: 'leaf3',\n            id: 'leaf3',\n          },\n        ],\n      },\n    ],\n  },\n];\n\nexport default () => {\n  const [treeData, setTreeData] = useState([]);\n\n  const [value, setValue] = useState([]);\n\n  return (\n    <AutoComplete.TreeAutoComplete\n      value={value}\n      className={styles.Wrapper3}\n      treeCheckable\n      loadData={(_kw) => {\n        return new Promise((resolve) => {\n          if (!_kw) {\n            setTreeData([]);\n            resolve();\n            return;\n          }\n\n          setTimeout(() => {\n            // 正常\n\n            const flatTreeData = Util.treeToArray(\n              TREE_DATA,\n              { parentIdAttr: 'pId', rootParentId: 0 },\n              'value',\n            );\n\n            const result = flatTreeData.filter((_node) => _node.title.indexOf(_kw) !== -1);\n\n            const targetTreeData = Util.completionIncompleteFlatArr(flatTreeData, result, {\n              keyAttr: 'value',\n              titleAttr: 'title',\n              parentIdAttr: 'pId',\n              rootParentId: 0,\n            });\n\n            setTreeData(targetTreeData);\n\n            resolve();\n          }, 100);\n        });\n      }}\n      treeData={treeData}\n      onChange={(_value) => {\n        setValue(_value);\n      }}\n    >\n      {({ value: _value, onChange: _onChange, treeData: _treeData, loading }) => (\n        <Table\n          loading={loading}\n          columns={[\n            {\n              title: '名称',\n              key: 'title',\n              dataIndex: 'title',\n            },\n          ]}\n          scroll={{\n            y: 300,\n          }}\n          rowKey=\"id\"\n          dataSource={_treeData}\n          pagination={false}\n          rowSelection={{\n            type: 'checkbox',\n            selectedRowKeys: _value,\n            onSelect: function (record, selected, selectedRows) {\n              _onChange(\n                selectedRows.map((t) => t.value),\n                selectedRows.map((t) => t.title),\n                {\n                  selected,\n                  triggerNode: {\n                    props: record,\n                  },\n                },\n              );\n            },\n            onSelectAll: (selected, selectedRows, changeRows) => {\n              _onChange(\n                selectedRows.map((t) => t.value),\n                selectedRows.map((t) => t.title),\n                {\n                  selected,\n                  triggerNode: selected\n                    ? {\n                        props: changeRows,\n                      }\n                    : null,\n                },\n              );\n            },\n          }}\n        />\n      )}\n    </AutoComplete.TreeAutoComplete>\n  );\n};\n",type:"PlayGround",renderChildren:()=>r.createElement(d,null)}]}),r.createElement(l.e6,{title:"Props",config:[{border:!0,title:"属性",data:[{params:"classNameWrap",desc:"附加的样式表",type:"string",defaultVal:""},{params:"styleWrap",desc:"附加的样式",type:"React.CSSProperties",defaultVal:""},{params:"renderLoading",desc:"自定义loading",type:"() => React.ReactNode",defaultVal:""},{params:"debounceTimeout",desc:"防抖的时间",type:"number",defaultVal:"300"},{params:"loadData",desc:"异步加载数据",type:"(kw?: string) => Promise<void>",defaultVal:""},{params:"children",desc:"自动补全的UI",type:"\n                  (arg: {\n                    originNode?: React.ReactElement;\n                    value?: SelectProps['value'];\n                    onChange?: SelectProps['onChange'];\n                    options?: SelectProps['options'];\n                  }) => React.ReactElement\n                ",defaultVal:""}]}]}))},19994:(e,t,n)=>{n.d(t,{Ay:()=>p,I7:()=>d,Wc:()=>c,e6:()=>s,wn:()=>u});var a=n(71860),r=n(24370),l=n(26322);const{PlayGroundPageContext:o,PlayGroundPage:i}=r.A,{Section:u,CodeBoxSection:c,PropsSection:s,FunctionPropsSection:d}=i;const p=function(e){let{children:t,onScrollBottom:n,distance:r=50,...u}=e;const[c,s]=(0,l.useState)(),d=(0,l.useRef)(),p=(0,l.useRef)(!1);return(0,l.useEffect)((()=>{function e(){const e=t.scrollHeight-t.offsetHeight,a=t.scrollTop;if(n&&Math.abs(a-e)<=r){if(p.current)return;p.current=!0,null==n||n().then((()=>{p.current=!1}))}}const t=d.current.parentElement.parentElement;return t.addEventListener("scroll",e),s(t),()=>{t.removeEventListener("scroll",e)}}),[]),l.createElement(o.Provider,{value:{scrollEl:c}},l.createElement(i,(0,a.A)({ref:d},u),t))}}}]);