"use strict";(self.webpackChunk_ctsj_build=self.webpackChunk_ctsj_build||[]).push([[1490],{83088:function(e,t,n){var r=n(28842),a=n(43501);t.Z=(0,a.s)(r.Z,{allowClear:!0,filterOption:function(e,t){return 0<=t.value.toUpperCase().indexOf(e.toUpperCase())}})},34353:function(e,t,n){var r=n(73793),a=n(43501);t.Z=(0,a.s)(r.Z,{showSearch:{filter:function(e,t){return t.some((function(t){return-1<t.label.toLowerCase().indexOf(e.toLowerCase())}))}},allowClear:!0,placement:"bottomLeft"})},54281:function(e,t,n){var r=n(22613),a=n(43501);t.Z=(0,a.s)(r.default,{showSearch:!0,allowClear:!0,mode:"multiple",placement:"bottomLeft",filterOption:function(e,t){return 0<=t.children.toLowerCase().indexOf(e.toLowerCase())}})},28490:function(e,t,n){var r=n(22613),a=n(43501);t.default=(0,a.s)(r.default,{showSearch:!0,allowClear:!0,placement:"bottomLeft",filterOption:function(e,t){return 0<=t.children.toLowerCase().indexOf(e.toLowerCase())}})},20503:function(e,t,n){var r=n(9203),a=n(43501);t.Z=(0,a.s)(r.Z,{showSearch:!0,allowClear:!0,treeNodeFilterProp:"title",placement:"bottomLeft"})},43501:function(e,t,n){n.d(t,{s:function(){return c}});var r=n(90171),a=n(8860),o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e}).apply(this,arguments)},i=function(e,t){var n={};for(a in e)Object.prototype.hasOwnProperty.call(e,a)&&t.indexOf(a)<0&&(n[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var r=0,a=Object.getOwnPropertySymbols(e);r<a.length;r++)t.indexOf(a[r])<0&&Object.prototype.propertyIsEnumerable.call(e,a[r])&&(n[a[r]]=e[a[r]]);return n},l=a.Z.useScrollLayout;function c(e,t){function n(n){var a=l().getEl,c=("getPopupContainer"in(n=o(o({},t),n))||(n.getPopupContainer=function(e){return(null==a?void 0:a())||(null==e?void 0:e.parentElement)||document.body}),n.children);n=i(n,["children"]);return r.createElement(e,o({},n),c)}return Object.assign(n,e),n.defaultProps=t,n}},4650:function(e,t,n){n.r(t),n.d(t,{default:function(){return u}});var r=n(91098),a=n(70951),o=n(99565).Z,i=n(78862),l=n(10566),c=n(28850),m=n(45264),d=n(90171),s=n(4583),p=n(96032),u=()=>{const[e,t]=(0,d.useState)(),[n,u]=(0,d.useState)([]),[f,y]=(0,d.useState)(["210102000000"]),[h,T]=(0,d.useState)(["230102000000","210102000000"]),[F,v]=(0,d.useState)(["210000000000","210100000000","210102000000"]),[S,I]=(0,d.useState)([["210000000000","210100000000","210102000000"],["230000000000","230100000000","230102000000"]]),[D,C]=(0,d.useState)([]),[G,g]=(0,d.useState)({inputValue:"",selectValue:""}),[x,P]=(0,d.useState)("mail"),[b,k]=(0,d.useState)(),[R,E]=(0,d.useState)(),[L,V]=(0,d.useState)(),w=e=>{console.log("click ",e),P(e.key)},A=e=>d.createElement(i.Z.Item,null,d.createElement(i.Z.Item.Meta,{avatar:d.createElement(l.C,{src:"https://joeschmoe.io/api/v1/random"}),title:d.createElement("a",{href:"https://ant.design"},e.name),description:"Ant Design, a design language for background applications, is refined by Ant UED Team"}));return d.createElement(p.ZP,null,d.createElement(p.$0,{title:"FieldGeneratorToDict"},d.createElement("p",null,"字典生成器"),d.createElement("ul",null,d.createElement("li",null,"从Dict(adhere-util-dict)自动生成FormItem"))),d.createElement(p.e0,{title:"FormItemGeneratorToDict - Select",config:[{id:"p1",name:"Select单选",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Select单选",info:"Select单选`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [val, setVal] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogSelectFormItem\n      selectProps={{\n        style: {\n          width: 200,\n        },\n      }}\n      value={val}\n      onChange={(v) => setVal(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogSelectFormItem,{style:{width:200},value:e,onChange:e=>t(e)})},{id:"p2",name:"Select多选",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Select多选",info:"Select多选`"}},codeText:"\n          import React, { useState } from 'react';\n          import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n          export default () => {\n            const [vals, setVals] = useState([]);\n\n            return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogSelectMultiFormItem\n              selectProps={{\n                style: {\n                  width: 200,\n                },\n              }}\n              value={vals}\n              onChange={(v) => setVals(v)}\n            />\n          }\n                    ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogSelectMultiFormItem,{style:{width:300},value:n,onChange:e=>u(e)})},{id:"p3",name:"Select全选",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Select全选",info:"Select全选`"}},codeText:"\n          import React, { useState } from 'react';\n          import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n          export default () => {\n            const [vals, setVals] = useState([]);\n\n            return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogSelectCheckAllMultiFormItem\n              selectProps={{\n                style: {\n                  width: 200,\n                },\n              }}\n              value={vals}\n              onChange={(v) => setVals(v)}\n            />\n          }\n                    ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogSelectCheckAllMultiFormItem,{style:{width:300},value:n,onChange:e=>u(e)})},{id:"p4",name:"AutoComplete的单选",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"AutoComplete的单选",info:"AutoComplete的单选`"}},codeText:"\n          import React, { useState } from 'react';\n          import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n          export default () => {\n            const [val, setVal] = useState([]);\n\n            return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogAutoCompleteSelectFormItem\n              selectProps={{\n                style: {\n                  width: 200,\n                },\n              }}\n              value={val}\n              onChange={(v) => setVal(v)}\n            />\n          }\n                    ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemFilterBookListAutoSelectCompleteFormItem,{style:{width:200},value:e,onChange:e=>t(e)})},{id:"p5",name:"AutoComplete的多选",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"AutoComplete的多选",info:"AutoComplete的多选`"}},codeText:"\n          import React, { useState } from 'react';\n          import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n          export default () => {\n            const [vals, setVals] = useState([]);\n\n            return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogAutoCompleteSelectMultiFormItem\n              selectProps={{\n                style: {\n                  width: 200,\n                },\n              }}\n              value={vals}\n              onChange={(v) => setVals(v)}\n            />\n          }\n                    ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemFilterBookListAutoSelectCompleteMultiFormItem,{style:{width:200},value:n,onChange:e=>{u(e)}})},{id:"p6",name:"AutoComplete的全选",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"AutoComplete的全选",info:"AutoComplete的全选`"}},codeText:"\n          import React, { useState } from 'react';\n          import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n          export default () => {\n            const [vals, setVals] = useState([]);\n\n            return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogAutoCompleteSelectCheckAllMultiFormItem\n              selectProps={{\n                style: {\n                  width: 200,\n                },\n              }}\n              value={vals}\n              onChange={(v) => setVals(v)}\n            />\n          }\n                    ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemFilterBookListAutoSelectCompleteCheckAllMultiFormItem,{style:{width:200},value:n,onChange:e=>u(e)})},{id:"p7",name:"省市区级联",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"省市区级联",info:"省市区级联`"}},codeText:"\nimport React, { useState } from 'react';\n\nimport { FieldGeneratorToDict, FlexLayout, Space } from '@baifendian/adhere';\n\nexport default () => {\n  const [province, setProvince] = useState();\n  const [city, setCity] = useState();\n  const [county, setCounty] = useState();\n\n  return (\n    <div>\n      <Space.Group direction=\"vertical\">\n        <FlexLayout direction=\"horizontal\">\n          <FlexLayout.Fixed>省：</FlexLayout.Fixed>\n          <FlexLayout.Auto>\n            <FieldGeneratorToDict.FormItemGeneratorToDict.SystemProvinceSelectDynamicFormItem\n              style={{ width: 200 }}\n              value={province}\n              onChange={(v) => setProvince(v)}\n            />\n          </FlexLayout.Auto>\n        </FlexLayout>\n\n        <FlexLayout direction=\"horizontal\">\n          <FlexLayout.Fixed>市：</FlexLayout.Fixed>\n          <FlexLayout.Auto>\n            <FieldGeneratorToDict.FormItemGeneratorToDict.SystemCitySelectDynamicFormItem\n              style={{ width: 200 }}\n              value={city}\n              onChange={(v) => setCity(v)}\n              cascadeParams={province}\n              onDataSourceChange={() => setCity('')}\n            />\n          </FlexLayout.Auto>\n        </FlexLayout>\n\n        <FlexLayout direction=\"horizontal\">\n          <FlexLayout.Fixed>区：</FlexLayout.Fixed>\n          <FlexLayout.Auto>\n            <FieldGeneratorToDict.FormItemGeneratorToDict.SystemCountySelectDynamicFormItem\n              style={{ width: 200 }}\n              value={county}\n              onChange={(v) => setCounty(v)}\n              cascadeParams={city}\n              onDataSourceChange={() => setCounty('')}\n            />\n          </FlexLayout.Auto>\n        </FlexLayout>\n      </Space.Group>\n    </div>\n  )\n}\n            ",renderChildren:()=>d.createElement("div",null,d.createElement(r.Z.Group,{direction:"vertical"},d.createElement(a.default,{direction:"horizontal"},d.createElement(a.default.Fixed,null,"省："),d.createElement(a.default.Auto,null,d.createElement(o.FormItemGeneratorToDict.SystemProvinceSelectDynamicFormItem,{style:{width:200},value:b,onChange:e=>k(e)}))),d.createElement(a.default,{direction:"horizontal"},d.createElement(a.default.Fixed,null,"市："),d.createElement(a.default.Auto,null,d.createElement(o.FormItemGeneratorToDict.SystemCitySelectDynamicFormItem,{style:{width:200},value:R,onChange:e=>E(e),cascadeParams:b,onDataSourceChange:()=>E("")}))),d.createElement(a.default,{direction:"horizontal"},d.createElement(a.default.Fixed,null,"区："),d.createElement(a.default.Auto,null,d.createElement(o.FormItemGeneratorToDict.SystemCountySelectDynamicFormItem,{style:{width:200},value:L,onChange:e=>V(e),cascadeParams:R,onDataSourceChange:()=>V("")})))))}]}),d.createElement(p.e0,{title:"FormItemGeneratorToDict - Radio(字典中以Radio或DynamicRadio结尾)",config:[{id:"p1",name:"Radio横向",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Radio横向",info:"Radio横向`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [val, setVal] = useState();\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogRadioHorizontalFormItem\n      value={val}\n      onChange={(v) => setVal(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogRadioHorizontalFormItem,{value:e,onChange:e=>t(e)})},{id:"p2",name:"Radio纵向",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Radio纵向",info:"Radio纵向`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [val, setVal] = useState();\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogRadioVerticalFormItem\n      value={val}\n      onChange={(v) => setVal(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogRadioVerticalFormItem,{value:e,onChange:e=>t(e)})},{id:"p3",name:"Radio的Button",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Radio的Button",info:"Radio的Button`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [val, setVal] = useState();\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogRadioButtonFormItem\n      buttonStyle=\"solid\"\n      value={val}\n      onChange={(v) => setVal(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogRadioButtonFormItem,{buttonStyle:"solid",value:e,onChange:e=>t(e)})},{id:"p4",name:"Radio的Select",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Radio的Select",info:"Radio的Select`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [val, setVal] = useState();\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogRadioSelectFormItem\n      selectProps={{\n        style: {\n          width: 200,\n        },\n      }}\n      value={val}\n      onChange={(v) => setVal(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogRadioSelectFormItem,{selectProps:{style:{width:200}},value:e,onChange:e=>t(e)})},{id:"p5",name:"Radio的自定义",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Radio的自定义",info:"Radio的自定义"}},codeText:"\n  import React, { useState } from 'react';\n  import { Space as AntdSpace } from 'antd';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [val, setVal] = useState();\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogRadioCustomFormItem\n      optionType=\"button\"\n      buttonStyle=\"solid\"\n      value={val}\n      onChange={(v) => setVal(v)}\n    >\n      {(data) => <AntdSpace size={8}>{data.map(({ item }) => item)}</AntdSpace>}\n    </FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogRadioCustomFormItem>\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogRadioCustomFormItem,{optionType:"button",buttonStyle:"solid",value:e,onChange:e=>t(e)},(e=>d.createElement(c.Z,{size:8},e.map((e=>{let{item:t}=e;return t})))))}]}),d.createElement(p.e0,{title:"FormItemGeneratorToDict - Checkbox(字典中以Checkbox或DynamicCheckbox结尾)",config:[{id:"p1",name:"Checkbox横向",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Checkbox横向",info:"Checkbox横向`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogCheckBoxHorizontalFormItem\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogCheckBoxHorizontalFormItem,{value:n,onChange:e=>u(e)})},{id:"p2",name:"Checkbox纵向",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Checkbox纵向",info:"Checkbox纵向`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogCheckBoxVerticalFormItem\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogCheckBoxVerticalFormItem,{value:n,onChange:e=>u(e)})},{id:"p3",name:"Checkbox纵向全选",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Checkbox横向全选",info:"Checkbox横向全选`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogCheckBoxCheckAllVerticalFormItem\n      buttonStyle=\"solid\"\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogCheckBoxCheckAllVerticalFormItem,{buttonStyle:"solid",value:n,onChange:e=>u(e)})},{id:"p4",name:"Checkbox横向全选",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Checkbox纵向全选",info:"Checkbox纵向全选`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogCheckBoxCheckAllHorizontalFormItem\n      selectProps={{\n        style: {\n          width: 200,\n        },\n      }}\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogCheckBoxCheckAllHorizontalFormItem,{selectProps:{style:{width:200}},value:n,onChange:e=>u(e)})},{id:"p5",name:"Checkbox的Select",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Checkbox的Select",info:"Checkbox的Select"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogCheckBoxSelectFormItem\n      selectProps={{\n        style: {\n          width: 200,\n        },\n      }}\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogCheckBoxSelectFormItem,{selectProps:{style:{width:200}},value:n,onChange:e=>u(e)})},{id:"p6",name:"Checkbox的CheckAllSelect",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Checkbox的CheckAllSelect",info:"Checkbox的CheckAllSelect"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogCheckBoxCheckAllSelectFormItem\n      selectProps={{\n        style: {\n          width: 200,\n        },\n      }}\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogCheckBoxCheckAllSelectFormItem,{selectProps:{style:{width:200}},value:n,onChange:e=>u(e)})},{id:"p7",name:"自定义CheckBox",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"自定义CheckBox",info:"自定义CheckBox"}},codeText:"\n  import React, { useState } from 'react';\n  import {Space as AntdSpace, Checkbox} from 'antd';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogCheckBoxCustomFormItem\n      selectProps={{\n        style: {\n          width: 200,\n        },\n      }}\n      value={vals}\n      onChange={(v) => setVals(v)}\n    >\n      {(dataSource) => (\n        <AntdSpace size={8}>\n          {dataSource.map(({ data }) => (\n            <Checkbox key={data.value} value={data.value}>\n              {data.label}\n            </Checkbox>\n          ))}\n        </AntdSpace>\n      )}\n    </FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogCheckBoxCustomFormItem>\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogCheckBoxCustomFormItem,{selectProps:{style:{width:200}},value:n,onChange:e=>u(e)},(e=>d.createElement(c.Z,{size:8},e.map((e=>{let{data:t}=e;return d.createElement(m.Z,{key:t.value,value:t.value},t.label)})))))}]}),d.createElement(p.e0,{title:"FormItemGeneratorToDict - TreeSelect",config:[{id:"p1",name:"TreeSelect单选(能选任意节点)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"TreeSelect单选(能选任意节点)",info:"TreeSelect单选(能选任意节点)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [val, setVal] = useState('');\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemOrgTreeFormItem\n      selectProps={{\n        style: {\n          width: 200,\n        },\n      }}\n      value={val}\n      onChange={(v) => setVal(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemOrgTreeFormItem,{style:{width:200},value:e,onChange:e=>t(e)})},{id:"p2",name:"TreeSelect单选(只能选叶子节点)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"TreeSelect单选(只能选叶子节点)",info:"TreeSelect单选(只能选叶子节点)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [val, setVal] = useState('');\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemOrgTreeLeafFormItem\n      selectProps={{\n        style: {\n          width: 200,\n        },\n      }}\n      value={val}\n      onChange={(v) => setVal(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemOrgTreeLeafFormItem,{style:{width:200},value:e,onChange:e=>t(e)})},{id:"p3",name:"TreeSelect多选(能选任意节点)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"TreeSelect多选(能选任意节点)",info:"TreeSelect多选(能选任意节点)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemOrgTreeMultiFormItem\n      selectProps={{\n        style: {\n          width: 200,\n        },\n      }}\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemOrgTreeMultiFormItem,{style:{width:300},value:n,onChange:e=>u(e)})},{id:"p4",name:"TreeSelect多选(只能选叶子节点)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"TreeSelect多选(只能选叶子节点)",info:"TreeSelect多选(只能选叶子节点)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemOrgTreeLeafMultiFormItem\n      selectProps={{\n        style: {\n          width: 200,\n        },\n      }}\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemOrgTreeLeafMultiFormItem,{style:{width:200},value:n,onChange:e=>u(e)})},{id:"p5",name:"异步加载",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"异步加载",info:"异步加载`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemDepartmentTreeAsyncFormItem\n      selectProps={{\n        style: {\n          width: 200,\n        },\n      }}\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDepartmentTreeAsyncFormItem,{style:{width:200},value:n,onChange:e=>u(e)})},{id:"p6",name:"异步加载(多选)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"异步加载(多选)",info:"异步加载(多选)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemDepartmentTreeAsyncMultiFormItem\n      selectProps={{\n        style: {\n          width: 200,\n        },\n      }}\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDepartmentTreeAsyncMultiFormItem,{style:{width:200},value:n,onChange:e=>u(e)})},{id:"p7",name:"异步加载(只能选叶子节点)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"异步加载(只能选叶子节点)",info:"异步加载(只能选叶子节点)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemDepartmentTreeAsyncLeafFormItem\n      selectProps={{\n        style: {\n          width: 200,\n        },\n      }}\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDepartmentTreeAsyncLeafFormItem,{style:{width:200},value:n,onChange:e=>u(e)})},{id:"p8",name:"异步加载多选(只能选叶子节点)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"异步加载多选(只能选叶子节点)",info:"异步加载多选(只能选叶子节点)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemDepartmentTreeAsyncLeafMultiFormItem\n      selectProps={{\n        style: {\n          width: 200,\n        },\n      }}\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDepartmentTreeAsyncLeafMultiFormItem,{style:{width:200},value:n,onChange:e=>u(e)})},{id:"p9",name:"异步加载(回显)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"异步加载(回显)",info:"异步加载(回显)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    <FieldGeneratorToDict.FormItemGeneratorToDict.SystemDepartmentTreeAsyncFormItem\n      style={{ width: 200 }}\n      value={branchVals}\n      onChange={(v) => setBranchVals(v)}\n      fetchBranch={(value, cascadeParams) => {\n        return Promise.resolve([\n          {\n            title: '辽宁省',\n            value: '210000000000',\n            isLeaf: false,\n            children: [\n              {\n                title: '沈阳市',\n                value: '210100000000',\n                isLeaf: false,\n                children: [\n                  {\n                    title: '和平区',\n                    value: '210102000000',\n                    isLeaf: true,\n                  },\n                ],\n              },\n            ],\n          },\n        ]);\n      }}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDepartmentTreeAsyncFormItem,{style:{width:200},value:f,onChange:e=>y(e),fetchBranch:(e,t)=>Promise.resolve([{title:"辽宁省",value:"210000000000",isLeaf:!1,children:[{title:"沈阳市",value:"210100000000",isLeaf:!1,children:[{title:"和平区",value:"210102000000",isLeaf:!0}]}]}])})},{id:"p10",name:"异步加载(回显-多数据)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"异步加载(回显-多数据)",info:"异步加载(回显-多数据)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    <FieldGeneratorToDict.FormItemGeneratorToDict.SystemDepartmentTreeAsyncMultiFormItem\n      style={{ width: 200 }}\n      value={branchMultiVals}\n      onChange={(v) => setBranchMultiVals(v)}\n      fetchBranch={(value, cascadeParams) => {\n        return Promise.resolve([\n          {\n            title: '辽宁省',\n            value: '210000000000',\n            isLeaf: false,\n            children: [\n              {\n                title: '沈阳市',\n                value: '210100000000',\n                isLeaf: false,\n                children: [\n                  {\n                    title: '和平区',\n                    value: '210102000000',\n                    isLeaf: true,\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            title: '黑龙江省',\n            value: '230000000000',\n            isLeaf: false,\n            children: [\n              {\n                title: '哈尔滨市',\n                value: '230100000000',\n                isLeaf: false,\n                children: [\n                  {\n                    title: '道里区',\n                    value: '230102000000',\n                    isLeaf: true,\n                  },\n                ],\n              },\n            ],\n          },\n        ]);\n      }}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDepartmentTreeAsyncMultiFormItem,{style:{width:200},value:h,onChange:e=>T(e),fetchBranch:(e,t)=>Promise.resolve([{title:"辽宁省",value:"210000000000",isLeaf:!1,children:[{title:"沈阳市",value:"210100000000",isLeaf:!1,children:[{title:"和平区",value:"210102000000",isLeaf:!0}]}]},{title:"黑龙江省",value:"230000000000",isLeaf:!1,children:[{title:"哈尔滨市",value:"230100000000",isLeaf:!1,children:[{title:"道里区",value:"230102000000",isLeaf:!0}]}]}])})},{id:"p11",name:"异步加载(回显-多数据-只能选叶子节点)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"异步加载(回显-多数据-只能选叶子节点)",info:"异步加载(回显-多数据-只能选叶子节点)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    <FieldGeneratorToDict.FormItemGeneratorToDict.SystemDepartmentTreeAsyncLeafMultiFormItem\n      style={{ width: 200 }}\n      value={branchMultiVals}\n      onChange={(v) => setBranchMultiVals(v)}\n      fetchBranch={(value, cascadeParams) => {\n        return Promise.resolve([\n          {\n            title: '辽宁省',\n            value: '210000000000',\n            isLeaf: false,\n            children: [\n              {\n                title: '沈阳市',\n                value: '210100000000',\n                isLeaf: false,\n                children: [\n                  {\n                    title: '和平区',\n                    value: '210102000000',\n                    isLeaf: true,\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            title: '黑龙江省',\n            value: '230000000000',\n            isLeaf: false,\n            children: [\n              {\n                title: '哈尔滨市',\n                value: '230100000000',\n                isLeaf: false,\n                children: [\n                  {\n                    title: '道里区',\n                    value: '230102000000',\n                    isLeaf: true,\n                  },\n                ],\n              },\n            ],\n          },\n        ]);\n      }}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDepartmentTreeAsyncLeafMultiFormItem,{style:{width:200},value:h,onChange:e=>T(e),fetchBranch:(e,t)=>Promise.resolve([{title:"辽宁省",value:"210000000000",isLeaf:!1,children:[{title:"沈阳市",value:"210100000000",isLeaf:!1,children:[{title:"和平区",value:"210102000000",isLeaf:!0}]}]},{title:"黑龙江省",value:"230000000000",isLeaf:!1,children:[{title:"哈尔滨市",value:"230100000000",isLeaf:!1,children:[{title:"道里区",value:"230102000000",isLeaf:!0}]}]}])})},{id:"p12",name:"TreeSelect单选(能选任意节点，flat数据)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"TreeSelect单选(能选任意节点，flat数据)",info:"TreeSelect单选(能选任意节点，flat数据)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    <FieldGeneratorToDict.FormItemGeneratorToDict.SystemDepartmentAllTreeDynamicFormItem\n      style={{ width: 200 }}\n      treeDataSimpleMode\n      value={val}\n      onChange={(v) => setVal(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDepartmentAllTreeDynamicFormItem,{style:{width:200},treeDataSimpleMode:!0,value:e,onChange:e=>t(e)})},{id:"p13",name:"异步加载(flat数据)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"异步加载(flat数据)",info:"异步加载(flat数据)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemDepartmentTreeAsyncFormItem\n      style={{ width: 200 }}\n      treeDataSimpleMode\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDepartmentTreeAsyncFormItem,{style:{width:200},treeDataSimpleMode:!0,value:n,onChange:e=>u(e)})},{id:"p14",name:"异步加载(回显,flat数据)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"异步加载(回显,flat数据)",info:"异步加载(回显,flat数据)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemDepartmentTreeAsyncMultiFormItem\n      style={{ width: 200 }}\n      treeDataSimpleMode\n      value={branchVals}\n      onChange={(v) => setBranchVals(v)}\n      fetchBranch={(value, cascadeParams) => {\n        return Promise.resolve([\n          {\n            title: '辽宁省',\n            value: '210000000000',\n            id: '210000000000',\n            pId: 0,\n            isLeaf: false,\n          },\n          {\n            title: '沈阳市',\n            value: '210100000000',\n            id: '210100000000',\n            pId: '210000000000',\n            isLeaf: false,\n          },\n          {\n            title: '和平区',\n            value: '210102000000',\n            id: '210102000000',\n            pId: '210100000000',\n            isLeaf: true,\n          },\n        ]);\n      }}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDepartmentTreeAsyncMultiFormItem,{style:{width:200},treeDataSimpleMode:!0,value:f,onChange:e=>y(e),fetchBranch:(e,t)=>Promise.resolve([{title:"辽宁省",value:"210000000000",id:"210000000000",pId:0,isLeaf:!1},{title:"沈阳市",value:"210100000000",id:"210100000000",pId:"210000000000",isLeaf:!1},{title:"和平区",value:"210102000000",id:"210102000000",pId:"210100000000",isLeaf:!0}])})}]}),d.createElement(p.e0,{title:"FormItemGeneratorToDict - Transfer",config:[{id:"p1",name:"基本",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"基本",info:"基本`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogTransferFormItem\n      targetKeys={vals}\n      onChange={(v) => {\n        setVals(v);\n      }}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogTransferFormItem,{targetKeys:n,onChange:e=>{u(e)}})},{id:"p2",name:"SelectFormItem",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"SelectFormItem",info:"SelectFormItem`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogTransferSelectFormItem\n      selectProps={{\n        style: { width: 300 },\n      }}\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogTransferSelectFormItem,{selectProps:{style:{width:300}},value:n,onChange:e=>u(e)})}]}),d.createElement(p.e0,{title:"FormItemGeneratorToDict - Table",config:[{id:"p1",name:"普通不带分页",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"普通不带分页",info:"普通不带分页`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestTableFormItem\n      columns={[\n        {\n          key: 'name',\n          dataIndex: 'name',\n          title: '姓名',\n        },\n        {\n          key: 'sex',\n          dataIndex: 'sex',\n          title: '性别',\n        },\n        {\n          key: 'birthDay',\n          dataIndex: 'birthDay',\n          title: '生日',\n        },\n        {\n          key: 'deptName',\n          dataIndex: 'deptName',\n          title: '部门',\n        },\n        {\n          key: 'address',\n          dataIndex: 'address',\n          title: '地址',\n        },\n      ]}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemUserTableFormItem,{columns:[{key:"name",dataIndex:"name",title:"姓名"},{key:"sex",dataIndex:"sex",title:"性别"},{key:"birthDay",dataIndex:"birthDay",title:"生日"},{key:"deptName",dataIndex:"deptName",title:"部门"},{key:"address",dataIndex:"address",title:"地址"}]})},{id:"p2",name:"普通单选Select",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"普通单选Select",info:"普通单选Select`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [val, setVal] = useState('');\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestTableSelectFormItem\n      selectProps={{\n        style: {\n          width: 1024,\n        },\n      }}\n      columns={[\n        {\n          key: 'name',\n          dataIndex: 'name',\n          title: '姓名',\n        },\n        {\n          key: 'sex',\n          dataIndex: 'sex',\n          title: '性别',\n        },\n        {\n          key: 'birthDay',\n          dataIndex: 'birthDay',\n          title: '生日',\n        },\n        {\n          key: 'deptName',\n          dataIndex: 'deptName',\n          title: '部门',\n        },\n        {\n          key: 'address',\n          dataIndex: 'address',\n          title: '地址',\n        },\n      ]}\n      value={val}\n      onChange={(v) => setVal(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemUserTableSelectFormItem,{selectProps:{style:{width:1024}},columns:[{key:"name",dataIndex:"name",title:"姓名"},{key:"sex",dataIndex:"sex",title:"性别"},{key:"birthDay",dataIndex:"birthDay",title:"生日"},{key:"deptName",dataIndex:"deptName",title:"部门"},{key:"address",dataIndex:"address",title:"地址"}],value:e,onChange:e=>t(e)})},{id:"p3",name:"普通多选Select",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"普通多选Select",info:"普通多选Select`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestTableMultiSelectFormItem\n      selectProps={{\n        style: {\n          width: 1024,\n        },\n      }}\n      columns={[\n        {\n          key: 'name',\n          dataIndex: 'name',\n          title: '姓名',\n        },\n        {\n          key: 'sex',\n          dataIndex: 'sex',\n          title: '性别',\n        },\n        {\n          key: 'birthDay',\n          dataIndex: 'birthDay',\n          title: '生日',\n        },\n        {\n          key: 'deptName',\n          dataIndex: 'deptName',\n          title: '部门',\n        },\n        {\n          key: 'address',\n          dataIndex: 'address',\n          title: '地址',\n        },\n      ]}\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemUserTableMultiSelectFormItem,{selectProps:{style:{width:1024}},columns:[{key:"name",dataIndex:"name",title:"姓名"},{key:"sex",dataIndex:"sex",title:"性别"},{key:"birthDay",dataIndex:"birthDay",title:"生日"},{key:"deptName",dataIndex:"deptName",title:"部门"},{key:"address",dataIndex:"address",title:"地址"}],value:n,onChange:e=>u(e)})},{id:"p4",name:"分页的动态数据",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"分页的动态数据",info:"分页的动态数据`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestTablePaginationFormItem\n      columns={[\n        {\n          key: 'name',\n          dataIndex: 'name',\n          title: '姓名',\n        },\n        {\n          key: 'sex',\n          dataIndex: 'sex',\n          title: '性别',\n        },\n        {\n          key: 'birthDay',\n          dataIndex: 'birthDay',\n          title: '生日',\n        },\n        {\n          key: 'deptName',\n          dataIndex: 'deptName',\n          title: '部门',\n        },\n        {\n          key: 'address',\n          dataIndex: 'address',\n          title: '地址',\n        },\n      ]}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemUserPaginTablePaginationFormItem,{columns:[{key:"name",dataIndex:"name",title:"姓名"},{key:"sex",dataIndex:"sex",title:"性别"},{key:"birthDay",dataIndex:"birthDay",title:"生日"},{key:"deptName",dataIndex:"deptName",title:"部门"},{key:"address",dataIndex:"address",title:"地址"}]})},{id:"p5",name:"分页的动态数据Select单选",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"分页的动态数据Select单选",info:"分页的动态数据Select单选`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [val, setVal] = useState('');\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestTablePaginationSelectFormItem\n      selectProps={{\n        style: { width: 1024 },\n      }}\n      columns={[\n        {\n          key: 'name',\n          dataIndex: 'name',\n          title: '姓名',\n        },\n        {\n          key: 'sex',\n          dataIndex: 'sex',\n          title: '性别',\n        },\n        {\n          key: 'birthDay',\n          dataIndex: 'birthDay',\n          title: '生日',\n        },\n        {\n          key: 'deptName',\n          dataIndex: 'deptName',\n          title: '部门',\n        },\n        {\n          key: 'address',\n          dataIndex: 'address',\n          title: '地址',\n        },\n      ]}\n      value={val}\n      onChange={(v) => {\n        if (typeof v !== 'object') {\n          setVal(v);\n        }\n      }}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemUserPaginTablePaginationSelectFormItem,{selectProps:{style:{width:1024}},columns:[{key:"name",dataIndex:"name",title:"姓名"},{key:"sex",dataIndex:"sex",title:"性别"},{key:"birthDay",dataIndex:"birthDay",title:"生日"},{key:"deptName",dataIndex:"deptName",title:"部门"},{key:"address",dataIndex:"address",title:"地址"}],value:e,onChange:e=>{"object"!=typeof e&&t(e)}})},{id:"p6",name:"分页的动态数据Select多选",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"分页的动态数据Select多选",info:"分页的动态数据Select多选`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestTablePaginationMultiSelectFormItem\n      selectProps={{\n        style: { width: 1024 },\n      }}\n      columns={[\n        {\n          key: 'name',\n          dataIndex: 'name',\n          title: '姓名',\n        },\n        {\n          key: 'sex',\n          dataIndex: 'sex',\n          title: '性别',\n        },\n        {\n          key: 'birthDay',\n          dataIndex: 'birthDay',\n          title: '生日',\n        },\n        {\n          key: 'deptName',\n          dataIndex: 'deptName',\n          title: '部门',\n        },\n        {\n          key: 'address',\n          dataIndex: 'address',\n          title: '地址',\n        },\n      ]}\n      value={vals}\n      onChange={(v) => {\n        if (typeof v !== 'object') {\n          setVals(v);\n        }\n      }}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemUserPaginTablePaginationMultiSelectFormItem,{selectProps:{style:{width:1024}},columns:[{key:"name",dataIndex:"name",title:"姓名"},{key:"sex",dataIndex:"sex",title:"性别"},{key:"birthDay",dataIndex:"birthDay",title:"生日"},{key:"deptName",dataIndex:"deptName",title:"部门"},{key:"address",dataIndex:"address",title:"地址"}],value:n,onChange:e=>{Array.isArray(e)&&u(e)}})}]}),d.createElement(p.e0,{title:"FormItemGeneratorToDict - Cascader",config:[{id:"p1",name:"Cascader(能选任意节点)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Cascader(能选任意节点)",info:"Cascader(能选任意节点)"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestCascaderFormItem\n      style={{ width: 500 }}\n      value={vals}\n      onChange={(v) => setVals(v || [])}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemSSQCascaderFormItem,{style:{width:500},value:n,onChange:e=>u(e||[])})},{id:"p2",name:"Cascader(只能选叶子节点)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Cascader(只能选叶子节点)",info:"Cascader(只能选叶子节点)"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestCascaderLeafFormItem\n      style={{ width: 500 }}\n      value={vals}\n      onChange={(v) => setVals(v || [])}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemSSQCascaderLeafFormItem,{style:{width:500},value:n,onChange:e=>u(e||[])})},{id:"p3",name:"Cascader多选(能选任意节点)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Cascader多选(能选任意节点)",info:"Cascader多选(能选任意节点)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestCascaderMultiFormItem\n      style={{ width: 500 }}\n      value={vals}\n      onChange={(v) => setVals(v || [])}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemSSQCascaderMultiFormItem,{style:{width:500},value:n,onChange:e=>u(e||[])})},{id:"p4",name:"Cascader多选(只能选叶子节点)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Cascader多选(只能选叶子节点)",info:"Cascader多选(只能选叶子节点)"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestCascaderLeafMultiFormItem\n      style={{ width: 500 }}\n      value={vals}\n      onChange={(v) => setVals(v || [])}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemSSQCascaderLeafMultiFormItem,{style:{width:500},value:n,onChange:e=>u(e||[])})},{id:"p5",name:"异步加载",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"异步加载",info:"异步加载`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemDepartmentCascaderAsyncFormItem\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDepartmentCascaderAsyncFormItem,{value:n,onChange:e=>u(e)})},{id:"p6",name:"异步加载(多选)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"异步加载(多选)",info:"异步加载(多选)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemDepartmentCascaderAsyncMultiFormItem\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDepartmentCascaderAsyncMultiFormItem,{value:n,onChange:e=>u(e)})},{id:"p7",name:"异步加载(回显)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"异步加载(回显)",info:"异步加载(回显)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemDepartmentCascaderAsyncFormItem\n      value={vals}\n      onChange={(v) => {\n        console.log('v======', v);\n        setCascaderBranchVals(v);\n      }}\n      fetchBranch={(value, cascadeParams) => {\n        return Promise.resolve([\n          {\n            label: '辽宁省',\n            value: '210000000000',\n            isLeaf: false,\n            children: [\n              {\n                label: '沈阳市',\n                value: '210100000000',\n                isLeaf: false,\n                children: [\n                  {\n                    label: '和平区',\n                    value: '210102000000',\n                    isLeaf: true,\n                  },\n                ],\n              },\n            ],\n          },\n        ]);\n      }}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDepartmentCascaderAsyncFormItem,{value:F,onChange:e=>{console.log("v======",e),v(e)},fetchBranch:(e,t)=>Promise.resolve([{label:"辽宁省",value:"210000000000",isLeaf:!1,children:[{label:"沈阳市",value:"210100000000",isLeaf:!1,children:[{label:"和平区",value:"210102000000",isLeaf:!0}]}]}])})},{id:"p8",name:"异步加载(回显-多数据)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"异步加载(回显-多数据)",info:"异步加载(回显-多数据)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemDepartmentCascaderAsyncMultiFormItem\n      value={vals}\n      onChange={(v) => {\n        console.log('v======', v);\n        setCascaderBranchVals(v);\n      }}\n      fetchBranch={(value, cascadeParams) => {\n        return Promise.resolve([\n          {\n            label: '辽宁省',\n            value: '210000000000',\n            isLeaf: false,\n            children: [\n              {\n                label: '沈阳市',\n                value: '210100000000',\n                isLeaf: false,\n                children: [\n                  {\n                    label: '和平区',\n                    value: '210102000000',\n                    isLeaf: true,\n                  },\n                ],\n              },\n            ],\n          },\n          {\n            label: '黑龙江省',\n            value: '230000000000',\n            isLeaf: false,\n            children: [\n              {\n                label: '哈尔滨市',\n                value: '230100000000',\n                isLeaf: false,\n                children: [\n                  {\n                    label: '道里区',\n                    value: '230102000000',\n                    isLeaf: true,\n                  },\n                ],\n              },\n            ],\n          },\n        ]);\n      }}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDepartmentCascaderAsyncMultiFormItem,{value:S,onChange:e=>{console.log("v======",e),I(e)},fetchBranch:(e,t)=>Promise.resolve([{label:"辽宁省",value:"210000000000",isLeaf:!1,children:[{label:"沈阳市",value:"210100000000",isLeaf:!1,children:[{label:"和平区",value:"210102000000",isLeaf:!0}]}]},{label:"黑龙江省",value:"230000000000",isLeaf:!1,children:[{label:"哈尔滨市",value:"230100000000",isLeaf:!1,children:[{label:"道里区",value:"230102000000",isLeaf:!0}]}]}])})},{id:"p9",name:"Cascader(能选任意节点，拉平数据)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Cascader(能选任意节点，拉平数据)",info:"Cascader(能选任意节点，拉平数据)"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemDepartmentAllCascaderDynamicMultiFormItem\n      treeDataSimpleMode\n      value={vals}\n      onChange={(v) => setVals(v || [])}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDepartmentAllCascaderDynamicMultiFormItem,{treeDataSimpleMode:!0,value:n,onChange:e=>u(e||[])})},{id:"p10",name:"异步加载(拉平数据)",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"异步加载(拉平数据)",info:"异步加载(拉平数据)`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemDepartmentCascaderAsyncFormItem\n      treeDataSimpleMode\n      value={vals}\n      onChange={(v) => setVals(v || [])}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDepartmentCascaderAsyncFormItem,{treeDataSimpleMode:!0,value:n,onChange:e=>u(e)})}]}),d.createElement(p.e0,{title:"FormItemGeneratorToDict - List",config:[{id:"p1",name:"普通不带分页",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"普通不带分页",info:"普通不带分页`"}},codeText:"\n  import React, { useState } from 'react';\n  import { List,Avatar } from 'antd';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const listRenderItem = (item) => (\n      <List.Item>\n        <List.Item.Meta\n          avatar={<Avatar src=\"https://joeschmoe.io/api/v1/random\" />}\n          title={<a href=\"https://ant.design\">{item.name}</a>}\n          description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\n        />\n      </List.Item>\n    );\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestListFormItem\n      renderItem={listRenderItem}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemUserListFormItem,{renderItem:A})},{id:"p2",name:"普通单选Select",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"普通单选Select",info:"普通单选Select`"}},codeText:"\n  import React, { useState } from 'react';\n  import { List,Avatar } from 'antd';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [val, setVal] = useState('');\n\n    const listRenderItem = (item) => (\n      <List.Item>\n        <List.Item.Meta\n          avatar={<Avatar src=\"https://joeschmoe.io/api/v1/random\" />}\n          title={<a href=\"https://ant.design\">{item.name}</a>}\n          description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\n        />\n      </List.Item>\n    );\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestListSelectFormItem\n      selectProps={{\n        style: {\n          width: 1024,\n        },\n      }}\n      renderItem={listRenderItem}\n      value={val}\n      onChange={(v) => setVal(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemUserListSelectFormItem,{selectProps:{style:{width:1024}},renderItem:A,value:e,onChange:e=>t(e)})},{id:"p3",name:"普通多选Select",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"普通多选Select",info:"普通多选Select`"}},codeText:"\n  import React, { useState } from 'react';\n  import { List,Avatar } from 'antd';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [vals, setVals] = useState([]);\n\n    const listRenderItem = (item) => (\n      <List.Item>\n        <List.Item.Meta\n          avatar={<Avatar src=\"https://joeschmoe.io/api/v1/random\" />}\n          title={<a href=\"https://ant.design\">{item.name}</a>}\n          description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\n        />\n      </List.Item>\n    );\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestListMultiSelectFormItem\n      selectProps={{\n        style: {\n          width: 1024,\n        },\n      }}\n      renderItem={listRenderItem}\n      value={vals}\n      onChange={(v) => setVals(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemUserListMultiSelectFormItem,{selectProps:{style:{width:1024}},renderItem:A,value:D,onChange:e=>C(e)})},{id:"p4",name:"分页的动态数据",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"分页的动态数据",info:"分页的动态数据`"}},codeText:"\n  import React from 'react';\n  import { List,Avatar } from 'antd';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const listRenderItem = (item) => (\n      <List.Item>\n        <List.Item.Meta\n          avatar={<Avatar src=\"https://joeschmoe.io/api/v1/random\" />}\n          title={<a href=\"https://ant.design\">{item.name}</a>}\n          description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\n        />\n      </List.Item>\n    );\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestListPaginationFormItem\n      renderItem={listRenderItem}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemUserPaginListPaginationFormItem,{renderItem:A})},{id:"p5",name:"分页的动态数据Select单选",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"分页的动态数据Select单选",info:"分页的动态数据Select单选`"}},codeText:"\n  import React, { useState } from 'react';\n  import { List,Avatar } from 'antd';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [val, setVal] = useState('');\n\n    const listRenderItem = (item) => (\n      <List.Item>\n        <List.Item.Meta\n          avatar={<Avatar src=\"https://joeschmoe.io/api/v1/random\" />}\n          title={<a href=\"https://ant.design\">{item.name}</a>}\n          description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\n        />\n      </List.Item>\n    );\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestListPaginationSelectFormItem\n      selectProps={{\n        style: {\n          width: 1024,\n        },\n      }}\n      renderItem={listRenderItem}\n      value={val}\n      onChange={(v) => setVal(v)}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemUserPaginListPaginationSelectFormItem,{selectProps:{style:{width:1024}},renderItem:A,value:e,onChange:e=>{"object"!=typeof e&&t(e)}})},{id:"p6",name:"分页的动态数据Select多选",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"分页的动态数据Select多选",info:"分页的动态数据Select多选`"}},codeText:"\n  import React, { useState } from 'react';\n  import { List,Avatar } from 'antd';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [listVals, setListVals] = useState([]);\n\n    const listRenderItem = (item) => (\n      <List.Item>\n        <List.Item.Meta\n          avatar={<Avatar src=\"https://joeschmoe.io/api/v1/random\" />}\n          title={<a href=\"https://ant.design\">{item.name}</a>}\n          description=\"Ant Design, a design language for background applications, is refined by Ant UED Team\"\n        />\n      </List.Item>\n    );\n\n    return <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestListPaginationMultiSelectFormItem\n      selectProps={{\n        style: {\n          width: 1024,\n        },\n      }}\n      renderItem={listRenderItem}\n      value={listVals}\n      onChange={(v) => {\n        if (Array.isArray(v)) {\n          setListVals(v);\n        }\n      }}\n    />\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemUserPaginListPaginationMultiSelectFormItem,{selectProps:{style:{width:1024}},renderItem:A,value:D,onChange:e=>{Array.isArray(e)&&C(e)}})}]}),d.createElement(p.e0,{title:"FormItemGeneratorToDict - AutoComplete",config:[{id:"p1",name:"基本使用",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"基本使用",info:"基本使用`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [autoCompleteValue, setAutoCompleteValue] = useState({\n      inputValue: '',\n      selectValue: '',\n    });\n\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestAutoCompleteFormItem\n        style={{ width: 200 }}\n        value={autoCompleteValue}\n        onChange={(v) => {\n          setAutoCompleteValue(v);\n        }}\n      />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogAutoCompleteFormItem,{style:{width:200},value:G,onChange:e=>{g(e)}})}]}),d.createElement(p.e0,{title:"FormItemGeneratorToDict - Breadcrumb",config:[{id:"p1",name:"基本使用",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"基本使用",info:"基本使用`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestBreadcrumbFormItem />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBCNavBreadcrumbFormItem,null)}]}),d.createElement(p.e0,{title:"FormItemGeneratorToDict - Dropdown",config:[{id:"p1",name:"基本使用",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"基本使用",info:"基本使用`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n  import { DownOutlined } from '@ant-design/icons';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestDropdownFormItem>\n        <a onClick={(e) => e.preventDefault()}>\n          Hover me\n          <DownOutlined />\n        </a>\n      </FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestDropdownFormItem>\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemDropNavDropdownFormItem,null,d.createElement("a",{onClick:e=>e.preventDefault()},"Hover me",d.createElement(s.Z,null)))}]}),d.createElement(p.e0,{title:"FormItemGeneratorToDict - Mentions",config:[{id:"p1",name:"基本使用",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"基本使用",info:"基本使用`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestMentionsFormItem />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemMentMentionsFormItem,null)}]}),d.createElement(p.e0,{title:"FormItemGeneratorToDict - Menu",config:[{id:"p1",name:"基本使用",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"基本使用",info:"基本使用`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestMenuFormItem />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemNavMenuFormItem,null)},{id:"p2",name:"基本使用",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"基本使用",info:"基本使用`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    const [current, setCurrent] = useState(1);\n\n    const onClick = () => {};\n\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestJSX1MenuFormItem\n        onClick={onClick}\n        selectedKeys={[current]}\n        mode=\"horizontal\"\n      />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemJSX1NavMenuFormItem,{onClick:w,selectedKeys:[x],mode:"horizontal"})},{id:"p3",name:"基本使用",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"基本使用",info:"基本使用`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestJSX2MenuFormItem\n        onClick={() => {}}\n        style={{\n          width: 256,\n        }}\n        defaultSelectedKeys={['1']}\n        defaultOpenKeys={['sub1']}\n        mode=\"inline\"\n      />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemJSX2NavMenuFormItem,{onClick:()=>{},style:{width:256},defaultSelectedKeys:["1"],defaultOpenKeys:["sub1"],mode:"inline"})}]}),d.createElement(p.e0,{title:"FormItemGeneratorToDict - Segmented",config:[{id:"p1",name:"基本使用",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"基本使用",info:"基本使用`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestObjArraySegmentedFormItem />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemObjArraySegNavSegmentedFormItem,null)},{id:"p2",name:"基本使用",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"基本使用",info:"基本使用`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestSegmentedFormItem />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemSegNavSegmentedFormItem,null)}]}),d.createElement(p.e0,{title:"FormItemGeneratorToDict - Steps",config:[{id:"p1",name:"基本使用",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"基本使用",info:"基本使用`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestOneStepsFormItem value={1} />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemOneWizardStepsFormItem,{value:1})},{id:"p2",name:"基本使用",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"基本使用",info:"基本使用`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestOneStepsFormItem\n        direction=\"vertical\"\n        size=\"small\"\n        value={1}\n      />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemTwoWizardStepsFormItem,{direction:"vertical",size:"small",value:1})}]}),d.createElement(p.e0,{title:"FormItemGeneratorToDict - Tag",config:[{id:"p1",name:"Tag横向",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Tag横向",info:"Tag横向`"}},codeText:"\n  import React, { useState } from 'react';\n  import { AntdFormItem, Space } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <Space.Group direction=\"vertical\">\n        <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogTagHorizontalFormItem\n          value={vals}\n          onChange={(v) => setVals(v)}\n        />\n        <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogTagHorizontalFormItem\n          renderItem={({ index }) => {\n            const colorMap = new Map([\n              [0, 'magenta'],\n              [1, 'red'],\n              [2, 'volcano'],\n            ]);\n\n            return {\n              props: {\n                color: colorMap.get(index),\n              },\n            };\n          }}\n          value={vals}\n          onChange={(v) => setVals(v)}\n        />\n      </Space.Group>\n    )\n  }\n            ",renderChildren:()=>d.createElement(r.Z.Group,{direction:"vertical"},d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogTagHorizontalFormItem,{value:n,onChange:e=>u(e)}),d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogTagHorizontalFormItem,{renderItem:e=>{let{index:t}=e;return{props:{color:new Map([[0,"magenta"],[1,"red"],[2,"volcano"]]).get(t)}}},value:n,onChange:e=>u(e)}))},{id:"p2",name:"Tag纵向",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Tag纵向",info:"Tag纵向`"}},codeText:"\n  import React, { useState } from 'react';\n  import { AntdFormItem, Space } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <Space.Group direction=\"vertical\">\n        <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogTagVerticalFormItem\n          value={vals}\n          onChange={(v) => setVals(v)}\n        />\n\n        <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogTagVerticalFormItem\n          renderItem={({ index }) => {\n            const colorMap = new Map([\n              [0, 'magenta'],\n              [1, 'red'],\n              [2, 'volcano'],\n            ]);\n\n            return {\n              props: {\n                color: colorMap.get(index),\n              },\n            };\n          }}\n          value={vals}\n          onChange={(v) => setVals(v)}\n        />\n      </Space.Group>\n    )\n  }\n            ",renderChildren:()=>d.createElement(r.Z.Group,{direction:"vertical"},d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogTagVerticalFormItem,{value:n,onChange:e=>u(e)}),d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogTagVerticalFormItem,{renderItem:e=>{let{index:t}=e;return{props:{color:new Map([[0,"magenta"],[1,"red"],[2,"volcano"]]).get(t)}}},value:n,onChange:e=>u(e)}))},{id:"p3",name:"Tag纵向全选",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Tag纵向全选",info:"Tag纵向全选`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogTagCheckAllVerticalFormItem\n        value={vals}\n        onChange={(v) => setVals(v)}\n      />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogTagCheckAllVerticalFormItem,{value:n,onChange:e=>u(e)})},{id:"p4",name:"Tag横向全选",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Tag横向全选",info:"Tag横向全选`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogTagCheckAllHorizontalFormItem\n        value={vals}\n        onChange={(v) => setVals(v)}\n      />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogTagCheckAllHorizontalFormItem,{value:n,onChange:e=>u(e)})},{id:"p5",name:"Tag的Select",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Tag的Select",info:"Tag的Select`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogTagSelectFormItem\n        selectProps={{\n          style: {\n            width: 200,\n          },\n        }}\n        value={val}\n        onChange={(v) => setVal(v)}\n      />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogTagSelectFormItem,{selectProps:{style:{width:200}},value:e,onChange:e=>t(e)})},{id:"p6",name:"Tag的Select多选",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Tag的Select多选",info:"Tag的Select多选`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogTagMultiSelectFormItem\n        selectProps={{\n          style: {\n            width: 200,\n          },\n        }}\n        value={vals}\n        onChange={(v) => setVals(v)}\n      />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogTagMultiSelectFormItem,{selectProps:{style:{width:200}},value:n,onChange:e=>u(e)})},{id:"p7",name:"Tag的CheckAllSelect",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"Tag的CheckAllSelect",info:"Tag的CheckAllSelect`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemBookCatalogTagCheckAllSelectFormItem\n        selectProps={{\n          style: {\n            width: 200,\n          },\n        }}\n        value={vals}\n        onChange={(v) => setVals(v)}\n      />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemBookCatalogTagCheckAllSelectFormItem,{selectProps:{style:{width:200}},value:n,onChange:e=>u(e)})}]}),d.createElement(p.e0,{title:"FormItemGeneratorToDict - Timeline",config:[{id:"p1",name:"基本使用",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"基本使用",info:"基本使用`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestOneTimelineFormItem />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemOneTLTimelineFormItem,null)},{id:"p2",name:"基本使用",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"基本使用",info:"基本使用`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestTwoTimelineFormItem mode=\"alternate\" />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemTwoTLTimelineFormItem,{mode:"alternate"})},{id:"p3",name:"基本使用",mode:"code",scope:{React:d},type:"PlayGround",cardProps:{description:{title:"基本使用",info:"基本使用`"}},codeText:"\n  import React, { useState } from 'react';\n  import { FieldGeneratorToDict } from '@baifendian/adhere';\n\n  export default () => {\n    return (\n      <FieldGeneratorToDict.FormItemGeneratorToDict.SystemTestThreeTimelineFormItem mode=\"right\" />\n    )\n  }\n            ",renderChildren:()=>d.createElement(o.FormItemGeneratorToDict.SystemThreeTLTimelineFormItem,{mode:"right"})}]}),d.createElement(p.sB,{title:"FieldGeneratorToDict.FormItemGeneratorToDict",config:[{border:!0,title:"SystemTestRadioHorizontalFormItem",data:[{params:"name",desc:"发到后台的文件参数名",type:"string",defaultVal:"file"},{params:"其他属性",desc:"参考 https://ant.design/components/upload-cn#api",type:"-",defaultVal:"-"}]}]}))}},96032:function(e,t,n){n.d(t,{$0:function(){return c},ae:function(){return s},e0:function(){return m},sB:function(){return d}});var r=n(70517),a=n(6692),o=n(90171);const{PlayGroundPageContext:i,PlayGroundPage:l}=a.default,{Section:c,CodeBoxSection:m,PropsSection:d,FunctionPropsSection:s}=l;t.ZP=function(e){let{children:t,...n}=e;const[a,c]=(0,o.useState)(),m=(0,o.useRef)();return(0,o.useEffect)((()=>{c(m.current.parentElement.parentElement)}),[]),o.createElement(i.Provider,{value:{scrollEl:a}},o.createElement(l,(0,r.Z)({ref:m},n),t))}},70951:function(e,t,n){var r=n(8860);t.default=r.Z},91098:function(e,t,n){var r=n(58014);t.Z=r.Z}}]);