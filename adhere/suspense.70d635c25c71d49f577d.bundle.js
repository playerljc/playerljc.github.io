"use strict";(self.webpackChunk_ctsj_build=self.webpackChunk_ctsj_build||[]).push([[5368],{39310:function(n,e,t){t.d(e,{Z:function(){return o}});var a=t(90171),r=t(62984).Z.useSetState,i=function(n,e){n=n.children;var t=r(!0),i=t[0],o=t[1];return(0,a.useImperativeHandle)(e,(function(){return{reMount:function(){return new Promise((function(n){return o(!1,(function(){return o(!0,(function(){return n()}))}))}))}}})),i?n:null},o=(0,a.forwardRef)(i)},3073:function(n,e,t){t.r(e),t.d(e,{default:function(){return k}});var a=t(9304),r=t(64437),i=t(17464),o=t(90171),s=t(96032),d=t(44915).Z,l=t(70517),c=t(91098),u=t(39203),m=t(74731),p=t(94062),f=t.n(p);const{useSetState:h}=u.default;var g=n=>{const[e,t]=h([]),a=(0,o.useRef)();function r(){return new Promise((n=>{setTimeout((()=>{const e=[];e.length=10,e.fill(0);const a=e.map(((n,e)=>({id:e+1,name:f().internet.userName(),sex:e%2==0?"男":"女",age:f().random.number(),height:f().random.number(),width:f().random.number()})));t(a,(()=>n()))}),5e3)}))}return o.createElement(d.ASync,(0,l.Z)({ref:a,fetchData:r,isEmpty:()=>0===e.length},n),o.createElement(c.Z.Group,{direction:"horizontal"},o.createElement(i.ZP,{type:"primary",onClick:()=>a.current.reset().then((()=>r()))},"重置"),o.createElement(i.ZP,{type:"primary",onClick:()=>a.current.fetchData()},"加载数据")),o.createElement(m.Z,{rowKey:"id",columns:[{title:"姓名",dataIndex:"name",key:"name"},{title:"性别",key:"sex",dataIndex:"sex"},{title:"年龄",key:"age",dataIndex:"age"},{title:"身高",key:"height",dataIndex:"height"},{title:"体重",key:"width",dataIndex:"width"}],dataSource:e,pagination:!1}))},y=()=>{const[n,e]=(0,o.useState)([]),t=(0,o.useRef)();function a(){setTimeout((()=>{const n=[];n.length=10,n.fill(0);const t=n.map(((n,e)=>({id:e+1,name:f().internet.userName(),sex:e%2==0?"男":"女",age:f().random.number(),height:f().random.number(),width:f().random.number()})));e(t)}),5e3)}return(0,o.useEffect)((()=>{a()}),[]),o.createElement(d.Sync,{ref:t,data:n,isEmpty:()=>0===n.length},o.createElement(c.Z.Group,{direction:"horizontal"},o.createElement(i.ZP,{type:"primary",onClick:()=>t.current.reset().then((()=>a()))},"重置"),o.createElement(i.ZP,{type:"primary",onClick:a},"加载数据")),o.createElement(m.Z,{rowKey:"id",columns:[{title:"姓名",dataIndex:"name",key:"name"},{title:"性别",key:"sex",dataIndex:"sex"},{title:"年龄",key:"age",dataIndex:"age"},{title:"身高",key:"height",dataIndex:"height"},{title:"体重",key:"width",dataIndex:"width"}],dataSource:n,pagination:!1}))},x=t(67199);var S=class extends d{constructor(n){super(n),(0,x.Z)(this,"handleTableChange",(n=>{this.setState({pagination:n},(()=>{this.fetchData()}))})),this.state={dataSource:[],loading:!1,pagination:{current:1,pageSize:2}}}componentWillReceiveProps(n){super.componentWillReceiveProps(n),n.reset&&this.setState({pagination:{current:1,pageSize:2}},(()=>{this.fetchData()}))}getColumns(){return[{title:"姓名",dataIndex:"name",key:"name"},{title:"性别",key:"sex",dataIndex:"sex"},{title:"年龄",key:"age",dataIndex:"age"},{title:"身高",key:"height",dataIndex:"height"},{title:"体重",key:"width",dataIndex:"width"}]}fetchData(){const n=[];n.length=10,n.fill(0),this.setState({loading:!0},(()=>{setTimeout((()=>{const e=n.map(((n,e)=>({id:e+1,name:`人${e+1}`,sex:"男",age:66,height:180,width:180})));this.setState({dataSource:e},(()=>{setTimeout((()=>{this.setState({loading:!1})}),200)}))}),2e3)}))}showLoading(){return this.state.loading}renderInner(){return o.createElement("div",{style:{position:"relative"}},o.createElement(m.Z,{rowKey:"id",columns:this.getColumns(),dataSource:this.state.dataSource,pagination:this.state.pagination,onChange:this.handleTableChange}))}},k=()=>{const n=(0,o.useRef)(),e=(0,o.useRef)();return o.createElement(s.ZP,null,o.createElement(s.$0,{title:"Suspense"},o.createElement("p",null,"数据加载单元(如第一次是骷髅骨架，其他是loading)，有数据加载的单元，第一次是骷髅骨架(或其他)mount，更新是loading"),o.createElement("p",null,"此组件是一个父类，使用的时候需要写一个子类，人后重写fetchData、renderInner和showLoading三个方法，所以只能使用class的方式，不能使用hooks")),o.createElement(s.e0,{title:"代码演示",columnCount:1,config:[{id:"p1",name:"基本使用",mode:"code",scope:{React:o},cardProps:{description:{title:"基本使用",info:"基本使用"}},config:[{title:"table.jsx",mode:"code",scope:{React:o},codeText:"\n  import { Table } from 'antd';\n  import React from 'react';\n\n  import { Suspense } from '@baifendian/adhere';\n\n  class TableWrap extends Suspense {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        dataSource: [],\n        loading: false,\n        pagination: {\n          current: 1,\n          pageSize: 2,\n        },\n      };\n    }\n\n    componentWillReceiveProps(nextProps) {\n      super.componentWillReceiveProps(nextProps);\n\n      if (nextProps.reset) {\n        this.setState(\n          {\n            pagination: {\n              current: 1,\n              pageSize: 2,\n            },\n          },\n          () => {\n            this.fetchData();\n          },\n        );\n      }\n    }\n\n    getColumns() {\n      return [\n        {\n          title: '姓名',\n          dataIndex: 'name',\n          key: 'name',\n        },\n        {\n          title: '性别',\n          key: 'sex',\n          dataIndex: 'sex',\n        },\n        {\n          title: '年龄',\n          key: 'age',\n          dataIndex: 'age',\n        },\n        {\n          title: '身高',\n          key: 'height',\n          dataIndex: 'height',\n        },\n        {\n          title: '体重',\n          key: 'width',\n          dataIndex: 'width',\n        },\n      ];\n    }\n\n    fetchData() {\n      const list = [];\n      list.length = 10;\n      list.fill(0);\n\n      this.setState(\n        {\n          loading: true,\n        },\n        () => {\n          setTimeout(() => {\n            const dataSource = list.map((t, index) => ({\n              id: index + 1,\n              name: `人${index + 1}`,\n              sex: '男',\n              age: 66,\n              height: 180,\n              width: 180,\n            }));\n\n            this.setState(\n              {\n                dataSource,\n              },\n              () => {\n                setTimeout(() => {\n                  this.setState({\n                    loading: false,\n                  });\n                }, 200);\n              },\n            );\n          }, 2000);\n        },\n      );\n    }\n\n    showLoading() {\n      return this.state.loading;\n    }\n\n    handleTableChange = (pagination) => {\n      this.setState(\n        {\n          pagination,\n        },\n        () => {\n          this.fetchData();\n        },\n      );\n    };\n\n    renderInner() {\n      return (\n        <div style={{ position: 'relative' }}>\n          <Table\n            rowKey=\"id\"\n            columns={this.getColumns()}\n            dataSource={this.state.dataSource}\n            pagination={this.state.pagination}\n            onChange={this.handleTableChange}\n          />\n        </div>\n      );\n    }\n  }\n\n  export default TableWrap;\n                  "},{title:"test.jsx",mode:"code",scope:{React:o},codeText:"\n  import React,{ useRef } from 'react';\n  import { ForceUpdate } from '@baifendian/adhere';\n  import { Button } from 'antd';\n  import Table from './table.jsx';\n\n  export default () => {\n    const t1 = useRef();\n\n    return (\n      <>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            t1.current.reMount();\n          }}\n        >\n          重置\n        </Button>\n\n        <ForceUpdate ref={t1}>\n          <Table />\n        </ForceUpdate>\n      </>\n    );\n  }\n                  "}],type:"PlayGroundMulit",renderChildren:()=>o.createElement(o.Fragment,null,o.createElement(i.ZP,{type:"primary",onClick:()=>{n.current.reMount()}},"重置"),o.createElement(r.Z,{ref:n},o.createElement(S,null)))},{id:"p2",name:"自定义firstLoading的UI",mode:"code",scope:{React:o},cardProps:{description:{title:"自定义firstLoading的UI",info:"自定义firstLoading的UI"}},config:[{title:"table.jsx",mode:"code",scope:{React:o},codeText:"\n  import { Table } from 'antd';\n  import React from 'react';\n\n  import { Suspense } from '@baifendian/adhere';\n\n  class TableWrap extends Suspense {\n    constructor(props) {\n      super(props);\n\n      this.state = {\n        dataSource: [],\n        loading: false,\n        pagination: {\n          current: 1,\n          pageSize: 2,\n        },\n      };\n    }\n\n    componentWillReceiveProps(nextProps) {\n      super.componentWillReceiveProps(nextProps);\n\n      if (nextProps.reset) {\n        this.setState(\n          {\n            pagination: {\n              current: 1,\n              pageSize: 2,\n            },\n          },\n          () => {\n            this.fetchData();\n          },\n        );\n      }\n    }\n\n    getColumns() {\n      return [\n        {\n          title: '姓名',\n          dataIndex: 'name',\n          key: 'name',\n        },\n        {\n          title: '性别',\n          key: 'sex',\n          dataIndex: 'sex',\n        },\n        {\n          title: '年龄',\n          key: 'age',\n          dataIndex: 'age',\n        },\n        {\n          title: '身高',\n          key: 'height',\n          dataIndex: 'height',\n        },\n        {\n          title: '体重',\n          key: 'width',\n          dataIndex: 'width',\n        },\n      ];\n    }\n\n    fetchData() {\n      const list = [];\n      list.length = 10;\n      list.fill(0);\n\n      this.setState(\n        {\n          loading: true,\n        },\n        () => {\n          setTimeout(() => {\n            const dataSource = list.map((t, index) => ({\n              id: index + 1,\n              name: `人${index + 1}`,\n              sex: '男',\n              age: 66,\n              height: 180,\n              width: 180,\n            }));\n\n            this.setState(\n              {\n                dataSource,\n              },\n              () => {\n                setTimeout(() => {\n                  this.setState({\n                    loading: false,\n                  });\n                }, 200);\n              },\n            );\n          }, 2000);\n        },\n      );\n    }\n\n    showLoading() {\n      return this.state.loading;\n    }\n\n    handleTableChange = (pagination) => {\n      this.setState(\n        {\n          pagination,\n        },\n        () => {\n          this.fetchData();\n        },\n      );\n    };\n\n    renderInner() {\n      return (\n        <div style={{ position: 'relative' }}>\n          <Table\n            rowKey=\"id\"\n            columns={this.getColumns()}\n            dataSource={this.state.dataSource}\n            // loading={this.showLoading()}\n            pagination={this.state.pagination}\n            onChange={this.handleTableChange}\n          />\n        </div>\n      );\n    }\n  }\n\n  export default TableWrap;\n                  "},{title:"test.jsx",mode:"code",scope:{React:o},codeText:"\n  import React,{ useRef } from 'react';\n  import { ForceUpdate, Spin } from '@baifendian/adhere';\n  import { Button } from 'antd';\n  import Table from './table.jsx';\n\n  export default () => {\n    const t2 = useRef();\n\n    return (\n      <>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            t2.current.reMount();\n          }}\n        >\n          重置\n        </Button>\n\n        <ForceUpdate ref={t2}>\n          <Table\n            firstLoading={\n              <div style={{ position: 'relative' }}>\n                <Spin spinning />\n              </div>\n            }\n          />\n        </ForceUpdate>\n      </>\n    );\n  }\n                  "}],type:"PlayGroundMulit",renderChildren:()=>o.createElement(o.Fragment,null,o.createElement(i.ZP,{type:"primary",onClick:()=>{e.current.reMount()}},"重置"),o.createElement(r.Z,{ref:e},o.createElement(S,{firstLoading:o.createElement("div",{style:{position:"relative"}},o.createElement(a.Z,{spinning:!0}))})))},{id:"p3",name:"不调用接口值传递数据",mode:"code",scope:{React:o},codeText:"\n  import React, { useEffect, useRef, useState } from 'react';\n  import { Space, Suspense } from '@baifendian/adhere';\n  import { Button, Table } from 'antd';\n  import faker from 'faker';\n\n  export default () => {\n    const [data, setData] = useState([]);\n\n    const ref = useRef();\n\n    function fetchData() {\n      setTimeout(() => {\n        const list = [];\n        list.length = 10;\n        list.fill(0);\n\n        const dataSource = list.map((t, index) => ({\n          id: index + 1,\n          name: faker.internet.userName(),\n          sex: index % 2 === 0 ? '男' : '女',\n          age: faker.random.number(),\n          height: faker.random.number(),\n          width: faker.random.number(),\n        }));\n\n        setData(dataSource);\n      }, 1000 * 5);\n    }\n\n    function getColumns() {\n      return [\n        {\n          title: '姓名',\n          dataIndex: 'name',\n          key: 'name',\n        },\n        {\n          title: '性别',\n          key: 'sex',\n          dataIndex: 'sex',\n        },\n        {\n          title: '年龄',\n          key: 'age',\n          dataIndex: 'age',\n        },\n        {\n          title: '身高',\n          key: 'height',\n          dataIndex: 'height',\n        },\n        {\n          title: '体重',\n          key: 'width',\n          dataIndex: 'width',\n        },\n      ];\n    }\n\n    useEffect(() => {\n      fetchData();\n    }, []);\n\n    return (\n      <Suspense.Sync ref={ref} data={data} isEmpty={() => data.length === 0}>\n        <Space.Group direction=\"horizontal\">\n          <Button type=\"primary\" onClick={() => ref.current.reset().then(() => fetchData())}>\n            重置\n          </Button>\n          <Button type=\"primary\" onClick={fetchData}>\n            加载数据\n          </Button>\n        </Space.Group>\n        <Table rowKey=\"id\" columns={getColumns()} dataSource={data} pagination={false} />\n      </Suspense.Sync>\n    );\n  };\n        ",cardProps:{description:{title:"不调用接口值传递数据",info:"不调用接口值传递数据"}},type:"PlayGround",renderChildren:()=>o.createElement(y,null)},{id:"p4",name:"调用接口传递数据",mode:"code",scope:{React:o},codeText:"\n  import React, { useRef } from 'react';\n  import { Space, Suspense, Hooks } from '@baifendian/adhere';\n  import { Button, Table } from 'antd';\n  import faker from 'faker';\n\n  const { useSetState } = Hooks;\n\n  export default () => {\n    const [data, setData] = useSetState([]);\n\n    const ref = useRef();\n\n    function fetchData() {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          const list = [];\n          list.length = 10;\n          list.fill(0);\n\n          const dataSource = list.map((t, index) => ({\n            id: index + 1,\n            name: faker.internet.userName(),\n            sex: index % 2 === 0 ? '男' : '女',\n            age: faker.random.number(),\n            height: faker.random.number(),\n            width: faker.random.number(),\n          }));\n\n          setData(dataSource, () => resolve());\n        }, 1000 * 5);\n      });\n    }\n\n    function getColumns() {\n      return [\n        {\n          title: '姓名',\n          dataIndex: 'name',\n          key: 'name',\n        },\n        {\n          title: '性别',\n          key: 'sex',\n          dataIndex: 'sex',\n        },\n        {\n          title: '年龄',\n          key: 'age',\n          dataIndex: 'age',\n        },\n        {\n          title: '身高',\n          key: 'height',\n          dataIndex: 'height',\n        },\n        {\n          title: '体重',\n          key: 'width',\n          dataIndex: 'width',\n        },\n      ];\n    }\n\n    return (\n      <Suspense.ASync ref={ref} fetchData={fetchData} isEmpty={() => data.length === 0}>\n        <Space.Group direction=\"horizontal\">\n          <Button type=\"primary\" onClick={() => ref.current.reset().then(() => fetchData())}>\n            重置\n          </Button>\n          <Button type=\"primary\" onClick={() => ref.current.fetchData()}>\n            加载数据\n          </Button>\n        </Space.Group>\n        <Table rowKey=\"id\" columns={getColumns()} dataSource={data} pagination={false} />\n      </Suspense.ASync>\n    );\n  };\n        ",cardProps:{description:{title:"调用接口传递数据",info:"调用接口传递数据"}},type:"PlayGround",renderChildren:()=>o.createElement(g,null)},{id:"p5",name:"自定义renderNormalLoading",mode:"code",scope:{React:o},codeText:"\n  import React, { useRef } from 'react';\n  import { Space, Suspense, Hooks, Spin } from '@baifendian/adhere';\n  import { Button, Table } from 'antd';\n  import faker from 'faker';\n\n  const { useSetState } = Hooks;\n\n  export default () => {\n    const [data, setData] = useSetState([]);\n\n    const ref = useRef();\n\n    function fetchData() {\n      return new Promise((resolve) => {\n        setTimeout(() => {\n          const list = [];\n          list.length = 10;\n          list.fill(0);\n\n          const dataSource = list.map((t, index) => ({\n            id: index + 1,\n            name: faker.internet.userName(),\n            sex: index % 2 === 0 ? '男' : '女',\n            age: faker.random.number(),\n            height: faker.random.number(),\n            width: faker.random.number(),\n          }));\n\n          setData(dataSource, () => resolve());\n        }, 1000 * 5);\n      });\n    }\n\n    function getColumns() {\n      return [\n        {\n          title: '姓名',\n          dataIndex: 'name',\n          key: 'name',\n        },\n        {\n          title: '性别',\n          key: 'sex',\n          dataIndex: 'sex',\n        },\n        {\n          title: '年龄',\n          key: 'age',\n          dataIndex: 'age',\n        },\n        {\n          title: '身高',\n          key: 'height',\n          dataIndex: 'height',\n        },\n        {\n          title: '体重',\n          key: 'width',\n          dataIndex: 'width',\n        },\n      ];\n    }\n\n    return (\n      <Suspense.ASync ref={ref} fetchData={fetchData} isEmpty={() => data.length === 0}\n        renderNormalLoading={({ children, loading }) => {\n          return (\n            <div style={{ position: 'relative' }}>\n              {children}\n              <Spin text=\"处理中...\" spinning={loading} />\n            </div>\n          );\n        }}\n      >\n        <Space.Group direction=\"horizontal\">\n          <Button type=\"primary\" onClick={() => ref.current.reset().then(() => fetchData())}>\n            重置\n          </Button>\n          <Button type=\"primary\" onClick={() => ref.current.fetchData()}>\n            加载数据\n          </Button>\n        </Space.Group>\n        <Table rowKey=\"id\" columns={getColumns()} dataSource={data} pagination={false} />\n      </Suspense.ASync>\n    );\n  };\n        ",cardProps:{description:{title:"自定义renderNormalLoading",info:"自定义renderNormalLoading"}},type:"PlayGround",renderChildren:()=>o.createElement(g,{renderNormalLoading:n=>{let{children:e,loading:t}=n;return o.createElement("div",{style:{position:"relative"}},e,o.createElement(a.Z,{text:"处理中...",spinning:t}))}})}]}),o.createElement(s.sB,{title:"Props",config:[{border:!0,title:"SuspenseProps",data:[{params:"reset",desc:"是否重置",type:"boolean",defaultVal:"false"},{params:"firstLoading",desc:"自定义firstLoading",type:"React.ReactElement | null",defaultVal:"null"}]},{border:!0,title:"SuspenseSyncProps",data:[{params:"data",desc:"数据",type:"any",defaultVal:"{}"},{params:"isEmpty",desc:"是否是空数据",type:"() => boolean",defaultVal:""}]},{border:!0,title:"SuspenseASyncProps",data:[{params:"isEmpty",desc:"是否是空数据",type:"() => boolean",defaultVal:""},{params:"fetchData",desc:"加载数据",type:"(params?:any) => Promise<void>",defaultVal:""}]}]}),o.createElement(s.ae,{title:"Api",config:[{border:!0,title:"重写的方法",data:[{name:"fetchData",desc:"加载数据",modifier:"public",params:[],returnType:"void",returnDesc:""},{name:"renderInner",desc:"渲染的UI",modifier:"public",params:[],returnType:"React.ReactElement",returnDesc:""},{name:"showLoading",desc:"是否显示遮罩",modifier:"public",params:[],returnType:"boolean",returnDesc:""},{name:"reset",desc:"重置",modifier:"public",params:[],returnType:"Promise<void>",returnDesc:""}]}]}))}},96032:function(n,e,t){t.d(e,{$0:function(){return d},ae:function(){return u},e0:function(){return l},sB:function(){return c}});var a=t(70517),r=t(6692),i=t(90171);const{PlayGroundPageContext:o,PlayGroundPage:s}=r.default,{Section:d,CodeBoxSection:l,PropsSection:c,FunctionPropsSection:u}=s;e.ZP=function(n){let{children:e,...t}=n;const[r,d]=(0,i.useState)(),l=(0,i.useRef)();return(0,i.useEffect)((()=>{d(l.current.parentElement.parentElement)}),[]),i.createElement(o.Provider,{value:{scrollEl:r}},i.createElement(s,(0,a.Z)({ref:l},t),e))}},64437:function(n,e,t){var a=t(39310);e.Z=a.Z},39203:function(n,e,t){var a=t(62984);e.default=a.Z},91098:function(n,e,t){var a=t(58014);e.Z=a.Z},9304:function(n,e,t){var a=t(13935);e.Z=a.Z}}]);