"use strict";(self.webpackChunk_ctsj_build=self.webpackChunk_ctsj_build||[]).push([[1687],{92715:(e,r,t)=>{t.d(r,{A:()=>_});var n=t(86798),a=t(59223),l=t(31934),o=t.n(l),i=t(66783),u=t.n(i),c=t(26322),s=t(58738),p=t(88724),d=t(2438),f=t(65347),m=t(68202).A.memoized,v="adhere-ui-auto-complete";const A=function(e){var r=e.renderLoading,t=e.emptyContent,n=e.loadData,a=(e=(0,c.useState)(!1))[0],l=e[1],o=(e=(0,c.useState)(!1))[0],i=(e=e[1],(0,c.useMemo)((function(){var e;return null!=(e=null==r?void 0:r())?e:c.createElement("div",{className:"".concat(v,"-loading")},c.createElement(f.A,{size:"large"}))}),[r])),u=(0,c.useMemo)((function(){return null!=t?t:c.createElement(d.A,{image:d.A.PRESENTED_IMAGE_SIMPLE})}),[t]),s=(0,c.useCallback)(m.createMemoFun((function(e){l(!0),null!=n&&n(e).then((function(){l(!1)}))})),[n]);return{defaultDebounceTimeout:300,fetchLoading:i,empty:u,selectorPrefix:v,fetching:a,open:o,setOpen:e,onClear:function(){null!=n&&n("").then((function(){l(!1)}))},onInputMemo:s}};var g=function(){return(g=Object.assign||function(e){for(var r,t=1,n=arguments.length;t<n;t++)for(var a in r=arguments[t])Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a]);return e}).apply(this,arguments)},h=function(e,r){var t={};for(a in e)Object.prototype.hasOwnProperty.call(e,a)&&r.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var n=0,a=Object.getOwnPropertySymbols(e);n<a.length;n++)r.indexOf(a[n])<0&&Object.prototype.propertyIsEnumerable.call(e,a[n])&&(t[a[n]]=e[a[n]]);return t},y=function(e,r,t){if(t||2===arguments.length)for(var n,a=0,l=r.length;a<l;a++)!n&&a in r||((n=n||Array.prototype.slice.call(r,0,a))[a]=r[a]);return e.concat(n||Array.prototype.slice.call(r))},T={keyAttr:"value",titleAttr:"title",parentIdAttr:"pId",rootParentId:0},C=(0,c.memo)((function(e){var r=e.classNameWrap,t=e.styleWrap,n=e.renderLoading,l=e.debounceTimeout,i=e.loadData,d=e.treeData,f=e.emptyContent,m=e.children,v=e.treeDataSimpleMode,C=h(e,["classNameWrap","styleWrap","renderLoading","debounceTimeout","loadData","treeData","emptyContent","children","treeDataSimpleMode"]),S=(e=(0,c.useState)({}))[0],b=e[1],w=(0,c.useRef)(0),D=(n=(e=A({renderLoading:n,emptyContent:f,loadData:i})).defaultDebounceTimeout,f=e.selectorPrefix,e.fetchLoading),k=e.empty,_=e.fetching,E=(i=e.open,e.setOpen),I=e.onClear,R=e.onInputMemo;function P(e){return(Array.isArray(e)?e:[e]).reduce((function(e,r){var t=K.find((function(e){return e.value===r}));return e[r]=y(y([],p.A.getAncestor(K,t,T),!0),[t],!1),e}),{})}function x(e,r,t){var n;t.triggerNode?(b(P(e)),null!=(n=C.onChange)&&n.call(C,e),N?w.current=Date.now():E(!1)):(b({}),null!=(n=C.onChange)&&n.call(C,e,r,t))}e=(0,c.useCallback)(u()((function(e){var r=Date.now();["ant-checkbox-input"].some((function(r){return-1!==e.target.className.indexOf(r)}))||(N&&0!==w.current&&r-w.current<=400?w.current=0:(w.current=0,r=e.target.value.trim(),R(r)))}),null!=l?l:n),[l]);var O=(0,c.useMemo)((function(){return"treeCheckable"in C&&!!C.treeCheckable}),[C.treeCheckable]),N=(0,c.useMemo)((function(){return O||"multiple"in C&&!!C.multiple}),[O,C.multiple]),j=(0,c.useMemo)((function(){return v?d:p.A.treeToArray(d,{parentIdAttr:T.parentIdAttr,rootParentId:T.rootParentId},T.keyAttr)}),[d]),V=(0,c.useMemo)((function(){return Object.keys(S).map((function(e){return S[e]})).flat()}),[S]),W=(0,c.useMemo)((function(){var e,r,t,n;return v?(r=(e=y(y([],null!=d?d:[],!0),null!=V?V:[],!0)).map((function(e){return e.value})),t=Array.from(new Set(r)),p.A.treeToArray(p.A.completionIncompleteFlatArr(y(y([],null!=d?d:[],!0),null!=V?V:[],!0),t.map((function(r){return e.find((function(e){return e.value===r}))})),T),{parentIdAttr:T.parentIdAttr,rootParentId:T.rootParentId},T.keyAttr)):(r=(n=y(y([],null!=j?j:[],!0),null!=V?V:[],!0)).map((function(e){return e.value})),n=(t=Array.from(new Set(r))).map((function(e){return n.find((function(r){return r.value===e}))})),p.A.completionIncompleteFlatArr(y(y([],null!=j?j:[],!0),null!=V?V:[],!0),n,T))}),[d,j,S,C.value]),K=(0,c.useMemo)((function(){return v?W:p.A.treeToArray(W,{parentIdAttr:T.parentIdAttr,rootParentId:T.rootParentId},T.keyAttr)}),[v,W]);return(0,a.A)((function(){var e=Object.keys(S),r=null!=(r=C.value)?r:C.defaultValue;(r=(Array.isArray(r)?r:[r]).filter((function(r){return!e.includes(r)}))).length&&b(g(g({},S),P(r)))}),[C.defaultValue,C.value,S,K]),c.createElement("div",{className:o()(f,null!=r?r:""),style:null!=t?t:{}},c.createElement(s.A,g({showSearch:!0,allowClear:!0,filterTreeNode:!1,open:i,treeData:W,onInput:e,onClear:I,dropdownRender:function(e){var r;return _?D:null!=W&&W.length?null!=(r=null==m?void 0:m({originNode:e,treeDataSimpleMode:v,value:C.value,onChange:function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return x.apply(void 0,e)},treeData:null!=W?W:[],loading:_}))?r:e:k},onDropdownVisibleChange:E},C,{treeCheckable:!1,treeDataSimpleMode:!!v,onChange:function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return x.apply(void 0,e)}})))}));C.displayName="TreeAutoComplete";const S=C;var b=function(){return(b=Object.assign||function(e){for(var r,t=1,n=arguments.length;t<n;t++)for(var a in r=arguments[t])Object.prototype.hasOwnProperty.call(r,a)&&(e[a]=r[a]);return e}).apply(this,arguments)},w=function(e,r){var t={};for(a in e)Object.prototype.hasOwnProperty.call(e,a)&&r.indexOf(a)<0&&(t[a]=e[a]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols)for(var n=0,a=Object.getOwnPropertySymbols(e);n<a.length;n++)r.indexOf(a[n])<0&&Object.prototype.propertyIsEnumerable.call(e,a[n])&&(t[a[n]]=e[a[n]]);return t},D=function(e,r,t){if(t||2===arguments.length)for(var n,a=0,l=r.length;a<l;a++)!n&&a in r||((n=n||Array.prototype.slice.call(r,0,a))[a]=r[a]);return e.concat(n||Array.prototype.slice.call(r))},k=(0,c.memo)((function(e){var r=e.classNameWrap,t=e.styleWrap,l=e.renderLoading,i=e.debounceTimeout,s=e.options,p=e.loadData,d=e.defaultOptions,f=e.emptyContent,m=e.children,v=w(e,["classNameWrap","styleWrap","renderLoading","debounceTimeout","options","loadData","defaultOptions","emptyContent","children"]),g=(e=(0,c.useState)(null!=d?d:[]))[0],h=e[1],y=(0,c.useRef)(0),T="mode"in v&&"multiple"===v.mode,C=(l=(e=A({renderLoading:l,emptyContent:f,loadData:p})).defaultDebounceTimeout,f=e.selectorPrefix,e.fetchLoading),S=e.empty,k=e.fetching,_=(p=e.open,e.setOpen),E=e.onClear,I=e.onInputMemo;function R(e){var r;Array.isArray(e)?h(e.map((function(e){return null==P?void 0:P.find((function(r){return r.value===e}))})).filter((function(e){return!!e}))):h([(null!=P?P:[]).find((function(r){return r.value===e}))].filter((function(e){return!!e}))),null!=(r=v.onChange)&&r.call(v,e),T?y.current=Date.now():_(!1)}e=(0,c.useCallback)(u()((function(e){var r=Date.now();["ant-checkbox-input"].some((function(r){return-1!==e.target.className.indexOf(r)}))||(T&&0!==y.current&&r-y.current<=400?y.current=0:(y.current=0,r=e.target.value.trim(),I(r)))}),null!=i?i:l),[i]);var P=(0,c.useMemo)((function(){return D(D(D([],null!=s?s:[],!0),(null!=d?d:[]).filter((function(e){return v.value.includes(e.value)})),!0),g,!0)}),[s,d,g,v.value]),x=(0,c.useMemo)((function(){var e=P.map((function(e){return e.value}));return Array.from(new Set(e)).map((function(e){return P.find((function(r){return r.value===e}))}))}),[P]);return(0,a.A)((function(){h(null!=d?d:[])}),[d]),c.createElement("div",{className:o()(f,null!=r?r:""),style:null!=t?t:{}},c.createElement(n.A,b({showSearch:!0,allowClear:!0,filterOption:!1,open:p,options:x,onInput:e,onClear:E,dropdownRender:function(e){var r;return k?C:null!=x&&x.length?null!=(r=null==m?void 0:m({originNode:e,value:v.value,onChange:R,options:null!=x?x:[],loading:k}))?r:e:S},onDropdownVisibleChange:_},v,{onChange:R})))}));k.TreeAutoComplete=S,k.displayName="AutoComplete";const _=k},68202:(e,r,t)=>{t.d(r,{A:()=>A});var n=t(79073),a=t.n(n),l=t(88724),o=t(54043),i=function(e,r,t){if(t||2===arguments.length)for(var n,a=0,l=r.length;a<l;a++)!n&&a in r||((n=n||Array.prototype.slice.call(r,0,a))[a]=r[a]);return e.concat(n||Array.prototype.slice.call(r))},u=o.A.Events,c={},s="__",p=["".concat(s,"parentName").concat(s),"".concat(s,"parent").concat(s)],d=["$",s],f=[s];function m(e){return!(d.some((function(r){return e.startsWith(r)}))||f.some((function(r){return e.endsWith(r)})))}function v(e,r,t){var n,o=new Proxy(e,{set:function(e,n,o,i){if(m(n)){var u,c,s,d;if(l.A.isArray(e))return d=e.length,u=Reflect.set(e,n,o,i),c=l.A.getPropertyVisitPathStr(e,n),r[c]=a()(e),s=e.length,t.trigger(c,n,o),s<d||!l.A.isObject(o)&&!l.A.isArray(o)||p[0]in o||((o=v(o,r,t))[p[0]]="[".concat(n,"]"),o[p[1]]=e,u=Reflect.set(e,n,o,i)),u;l.A.isObject(e)&&(c=l.A.getPropertyVisitPathStr(e,n),s=void 0,d=a()(o),t.trigger(c,o,d),s=s||a()(o),r[c]=s,!l.A.isObject(o)&&!l.A.isArray(o)||p[0]in o||((o=v(o,r,t))[p[0]]=n,o[p[1]]=e))}return Reflect.set(e,n,o,i)},deleteProperty:function(e,n){var a;return m(n)&&!l.A.isArray(e)&&(a=l.A.getPropertyVisitPathStr(e,n),t.trigger(a,n),delete r[a]),Reflect.deleteProperty(e,n)}});for(n in e){var i=e[n];m(n)&&(l.A.isObject(i)||l.A.isArray(i))&&(e[n]=v(i,r,t),i[p[0]]=l.A.isArray(e)?"[".concat(n,"]"):n,i[p[1]]=e)}return o}const A={createRef:function(e){var r=Symbol.for(l.A.uuid()),t=e;return Object.defineProperty(c,r,{enumerable:!0,configurable:!0,set:function(e){var n=t;t=e,o.A.trigger(Symbol.keyFor(r),{oldValue:n,newValue:e})},get:function(){return t}}),[function(){return c[r]},function(e){c[r]=e},r]},memoized:{watch:{all:function(e,r){r=Array.from(new Set(i([],r,!0)));var t=[],n=[];function a(r){var t=n.find((function(e){return e.type===r}));t&&(t.isChange=!0),n.every((function(e){return e.isChange}))&&(n.forEach((function(e){return e.isChange=!1})),e())}return r.forEach((function(e){var r;function i(t){var n,o=t.oldValue;t=t.newValue;l.A.isSymbol(e)?o!==t&&a(r):"light"===(n=e).mode?Object.is(o,t)||a(r):"deep"===n.mode?l.A.isRef(o)&&l.A.isRef(t)?JSON.stringify(o)!==JSON.stringify(t)&&a(r):Object.is(o,t)||a(r):l.A.isFunction(n.mode)&&!n.mode(o,t)&&a(r)}r=l.A.isSymbol(e)?Symbol.keyFor(e):Symbol.keyFor(e.property),n.push({type:r,isChange:!1}),t.push({type:r,handler:i}),o.A.on(r,i)})),function(){t.forEach((function(e){var r=e.type;e=e.handler;o.A.remove(r,e)}))}},race:function(e,r){r=Array.from(new Set(i([],r,!0)));var t=[];return r.forEach((function(r){var n;function a(t){var n,a=t.oldValue;t=t.newValue;l.A.isSymbol(r)?a!==t&&e():"light"===(n=r).mode?Object.is(a,t)||e():"deep"===n.mode?l.A.isRef(a)&&l.A.isRef(t)?JSON.stringify(a)!==JSON.stringify(t)&&e():Object.is(a,t)||e():l.A.isFunction(n.mode)&&!n.mode(a,t)&&e()}n=l.A.isSymbol(r)?Symbol.keyFor(r):Symbol.keyFor(r.property),t.push({type:n,handler:a}),o.A.on(n,a)})),function(){t.forEach((function(e){var r=e.type;e=e.handler;o.A.remove(r,e)}))}}},createMemoFun:function(e,r){void 0===r&&(r=10);var t=[],n=[function(e,r){return e.length===r.length},function(e,r){for(var t=!0,n=0;n<e.length;n++){var o=e[n],i=r[n];if(!(t=l.A.isRef(o)&&l.A.isRef(i)?JSON.stringify(a()(o))===JSON.stringify(a()(i)):o===i))break}return t}];return function(){for(var a=[],l=0;l<arguments.length;l++)a[l]=arguments[l];return function(a){if(!(o=function(e){void 0===e&&(e=[]);for(var r=null,a=0;a<t.length;a++){var l=t[a],o=l.resultVal;if(function(e,r){for(var t=!0,a=0;a<n.length&&(t=(0,n[a])(e,r));a++);return t}(l.depends,e)){r=o;break}}return r}(a=void 0===a?[]:a))){var l,o=e.apply(this,a);if(t.length>=r&&t.shift(),o instanceof Promise)return l=o.then((function(e){return e})),t.push({depends:a,resultVal:l}),l;t.push({depends:a,resultVal:o})}return o}.call(this,a||[])}}},watch:{create:function(e,r){var t=new u;if(!l.A.isEmpty(r))for(var n in r)t.on(n,r[n]);return{value:v(e,a()(e),t),on:function(e,r){t.on(e,r)},remove:function(e,r){t.remove(e,r)}}}}}},58364:(e,r,t)=>{t.r(r),t.d(r,{default:()=>j});const n="import Mockjs from 'mockjs';\r\n\r\nimport Mock from '@baifendian/adhere-mock';\r\n\r\nconst { Book } = Mock;\r\n\r\nexport default Book.map((t) => {\r\n  const id = Mockjs.mock('@guid');\r\n\r\n  return {\r\n    ...t,\r\n    t: `${t.t}1`,\r\n    value: id,\r\n    label: t.t,\r\n    id,\r\n  };\r\n});\r\n";var a=t(26322),l=t(96465);const o=t(92715).A;var i=t(62076),u=t(13097),c=t(65086);const s=[{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf1",title:"leaf1",id:"leaf1"},{value:"leaf2",title:"leaf2",id:"leaf2"}]},{value:"parent 1-1",title:"parent 1-1",id:"parent 1-1",children:[{value:"leaf3",title:"leaf3",id:"leaf3"}]}]}],p=()=>{const[e,r]=(0,a.useState)([]),[t,n]=(0,a.useState)([]);return a.createElement(o.TreeAutoComplete,{value:t,className:c.A.Wrapper3,treeCheckable:!0,loadData:e=>new Promise((t=>{if(!e)return r([]),void t();setTimeout((()=>{const n=i.A.treeToArray(s,{parentIdAttr:"pId",rootParentId:0},"value"),a=n.filter((r=>-1!==r.title.indexOf(e))),l=i.A.completionIncompleteFlatArr(n,a,{keyAttr:"value",titleAttr:"title",parentIdAttr:"pId",rootParentId:0});r(l),t()}),100)})),treeData:e,onChange:e=>{n(e)}},(e=>{let{value:r,onChange:t,treeData:n,loading:l}=e;return a.createElement(u.A,{loading:l,columns:[{title:"名称",key:"title",dataIndex:"title"}],scroll:{y:300},rowKey:"id",dataSource:n,pagination:!1,rowSelection:{type:"checkbox",selectedRowKeys:r,onSelect:function(e,r,n){t(n.map((e=>e.value)),n.map((e=>e.title)),{selected:r,triggerNode:{props:e}})},onSelectAll:(e,r,n)=>{t(r.map((e=>e.value)),r.map((e=>e.title)),{selected:e,triggerNode:e?{props:n}:null})}}})}))},d=[{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf1",title:"leaf1",id:"leaf1"},{value:"leaf2",title:"leaf2",id:"leaf2"}]},{value:"parent 1-1",title:"parent 1-1",id:"parent 1-1",children:[{value:"leaf3",title:"leaf3",id:"leaf3"}]}]}],f={key:"leaf2",value:[{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf2",title:"leaf2",id:"leaf2"}]}]}]},m=()=>{const[e,r]=(0,a.useState)([]),[t,n]=(0,a.useState)(["leaf2"]);return a.createElement(o.TreeAutoComplete,{value:t,className:c.A.Wrapper,treeCheckable:!0,defaultTreeData:f,loadData:e=>new Promise((t=>{if(!e)return r([]),void t();setTimeout((()=>{const n=i.A.treeToArray(d,{parentIdAttr:"pId",rootParentId:0},"value"),a=n.filter((r=>-1!==r.title.indexOf(e))),l=i.A.completionIncompleteFlatArr(n,a,{keyAttr:"value",titleAttr:"title",parentIdAttr:"pId",rootParentId:0});r(l),t()}),100)})),treeData:e,onChange:e=>{n(e)}})},v=i.A.treeToArray([{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf1",title:"leaf1",id:"leaf1"},{value:"leaf2",title:"leaf2",id:"leaf2"}]},{value:"parent 1-1",title:"parent 1-1",id:"parent 1-1",children:[{value:"leaf3",title:"leaf3",id:"leaf3"}]}]}],{parentIdAttr:"pId",rootParentId:0},"id"),A={key:"leaf2",value:i.A.treeToArray([{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf2",title:"leaf2",id:"leaf2"}]}]}],{parentIdAttr:"pId",rootParentId:0},"id")},g=()=>{const[e,r]=(0,a.useState)([]),[t,n]=(0,a.useState)("leaf2");return a.createElement(o.TreeAutoComplete,{value:t,className:c.A.Wrapper,defaultTreeData:A,treeDataSimpleMode:!0,loadData:e=>new Promise((t=>{if(!e)return r([]),void t();setTimeout((()=>{const n=v.filter((r=>-1!==r.title.indexOf(e))),a=i.A.treeToArray(i.A.completionIncompleteFlatArr(v,n,{keyAttr:"id",titleAttr:"title",parentIdAttr:"pId",rootParentId:0}),{keyAttr:"id",titleAttr:"title",parentIdAttr:"pId",rootParentId:0});r(a),t()}),100)})),treeData:e,onChange:e=>{n(e)}})},h=[{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf1",title:"leaf1",id:"leaf1"},{value:"leaf2",title:"leaf2",id:"leaf2"}]},{value:"parent 1-1",title:"parent 1-1",id:"parent 1-1",children:[{value:"leaf3",title:"leaf3",id:"leaf3"}]}]}],y={key:"leaf2",value:[{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf2",title:"leaf2",id:"leaf2"}]}]}]},T=()=>{const[e,r]=(0,a.useState)([]),[t,n]=(0,a.useState)(["leaf2"]);return a.createElement(o.TreeAutoComplete,{value:t,className:c.A.Wrapper,multiple:!0,defaultTreeData:y,loadData:e=>new Promise((t=>{if(!e)return r([]),void t();setTimeout((()=>{const n=i.A.treeToArray(h,{parentIdAttr:"pId",rootParentId:0},"value"),a=n.filter((r=>-1!==r.title.indexOf(e))),l=i.A.completionIncompleteFlatArr(n,a,{keyAttr:"value",titleAttr:"title",parentIdAttr:"pId",rootParentId:0});r(l),t()}),100)})),treeData:e,onChange:e=>{n(e)}})};var C=t(28361),S=t.n(C),b=t(18640);const{Book:w}=b.A,D=w.map((e=>{const r=S().mock("@guid");return{...e,t:"".concat(e.t,"1"),value:r,label:e.t,id:r}})),k=()=>{const[e,r]=(0,a.useState)([]),[t,n]=(0,a.useState)([]);return a.createElement(o,{placeholder:"自动补全",value:t,mode:"multiple",className:c.A.Wrapper3,loadData:e=>new Promise((t=>{if(!e)return r([]),void t();setTimeout((()=>{const n=[...D].filter((r=>-1!==r.t.indexOf(e))).map((e=>({label:e.t,value:e.id})));r(n),t()}),500)})),options:e,onChange:e=>{n(e)}})},_=()=>{const[e,r]=(0,a.useState)([]),[t,n]=(0,a.useState)([]);return a.createElement(o,{placeholder:"自动补全",value:t,mode:"multiple",className:c.A.Wrapper3,loadData:e=>new Promise((t=>{if(!e)return r([]),void t();setTimeout((()=>{const n=D.filter((r=>-1!==r.t.indexOf(e))).map((e=>({label:e.t,value:e.id,...e})));r(n),t()}),500)})),options:e,onChange:e=>{n(e)}},(e=>{let{value:r,onChange:t,options:n}=e;return a.createElement(u.A,{columns:[{title:"名称",key:"label",dataIndex:"label"},{title:"出版社",key:"label",dataIndex:"label"}],scroll:{y:200},rowKey:"id",dataSource:n,pagination:!1,rowSelection:{type:"checkbox",selectedRowKeys:r,onSelect:function(e,n,a){if(n){const e=a.filter((e=>!!e)).map((e=>e.value));t(Array.from(new Set([...r,...e])))}else t(r.filter((r=>r!==e.id)))},onSelectAll:(e,n,a)=>{if(e){const e=n.filter((e=>!!e)).map((e=>e.value));t(Array.from(new Set([...r,...e])))}else{const e=a.filter((e=>!!e)).map((e=>e.value));t(r.filter((r=>!e.includes(r))))}}}})}))},E=()=>{const[e,r]=(0,a.useState)([]),t=(0,a.useRef)(),[n,l]=(0,a.useState)(0),[i,s]=(0,a.useState)([]),p=(0,a.useRef)({page:1,limit:10});function d(){return new Promise((e=>{setTimeout((()=>{const n=[...D].filter((e=>-1!==e.t.indexOf(t.current))).map((e=>({label:e.t,value:e.id,...e}))),a=n.slice((p.current.page-1)*p.current.limit,p.current.page*p.current.limit);l(n.length),r(a),e()}),500)}))}return a.createElement(o,{placeholder:"自动补全",value:i,mode:"multiple",className:c.A.Wrapper3,loadData:e=>new Promise((n=>{if(t.current=e,p.current={page:1,limit:10},!e)return r([]),void n();d()})),options:e,onChange:e=>{s(e)}},(e=>{let{value:r,onChange:t,options:l}=e;return a.createElement(u.A,{columns:[{title:"名称",key:"label",dataIndex:"label"},{title:"出版社",key:"label",dataIndex:"label"}],rowKey:"id",dataSource:l,pagination:{current:p.page,pageSize:p.limit,total:n,onChange:(e,r)=>{p.current={page:e,limit:r},d()},onShowSizeChange:(e,r)=>{p.current={page:e,limit:r},d()}},scroll:{y:200},rowSelection:{type:"checkbox",selectedRowKeys:r,onSelect:function(e,n,a){if(n){const e=a.filter((e=>!!e)).map((e=>e.value));t(Array.from(new Set([...r,...e])))}else t(r.filter((r=>r!==e.id)))},onSelectAll:(e,n,a)=>{if(e){const e=n.filter((e=>!!e)).map((e=>e.value));t(Array.from(new Set([...r,...e])))}else{const e=a.filter((e=>!!e)).map((e=>e.value));t(r.filter((r=>!e.includes(r))))}}}})}))},I=()=>{const[e,r]=(0,a.useState)([]),t=(0,a.useRef)(),[n,l]=(0,a.useState)(0),[i,s]=(0,a.useState)([]),p=(0,a.useRef)({page:1,limit:10});function d(){return new Promise((e=>{setTimeout((()=>{const n=[...D].filter((e=>-1!==e.t.indexOf(t.current))).map((e=>({label:e.t,value:e.id,...e}))),a=n.slice((p.current.page-1)*p.current.limit,p.current.page*p.current.limit);l(n.length),r(a),e()}),500)}))}return a.createElement(o,{placeholder:"自动补全",value:i,className:c.A.Wrapper3,loadData:e=>new Promise((n=>{if(t.current=e,p.current={page:1,limit:10},!e)return r([]),void n();d()})),options:e,onChange:e=>{s(e)}},(e=>{let{value:r,onChange:t,options:l}=e;return a.createElement(u.A,{columns:[{title:"名称",key:"label",dataIndex:"label"},{title:"出版社",key:"label",dataIndex:"label"}],rowKey:"id",dataSource:l,pagination:{current:p.page,pageSize:p.limit,total:n,onChange:(e,r)=>{p.current={page:e,limit:r},d()},onShowSizeChange:(e,r)=>{p.current={page:e,limit:r},d()}},scroll:{y:200},rowSelection:{type:"radio",selectedRowKeys:r,onSelect:function(e,r,n){if(r){const e=n.filter((e=>!!e)).map((e=>e.value));t(e)}}}})}))},R=[{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf1",title:"leaf1",id:"leaf1"},{value:"leaf2",title:"leaf2",id:"leaf2"}]},{value:"parent 1-1",title:"parent 1-1",id:"parent 1-1",children:[{value:"leaf3",title:"leaf3",id:"leaf3"}]}]}],P=()=>{const[e,r]=(0,a.useState)([]),[t,n]=(0,a.useState)([]);return a.createElement(o.TreeAutoComplete,{value:t,className:c.A.Wrapper3,multiple:!0,loadData:e=>new Promise((t=>{if(!e)return r([]),void t();setTimeout((()=>{const n=i.A.treeToArray(R,{parentIdAttr:"pId",rootParentId:0},"value"),a=n.filter((r=>-1!==r.title.indexOf(e))),l=i.A.completionIncompleteFlatArr(n,a,{keyAttr:"value",titleAttr:"title",parentIdAttr:"pId",rootParentId:0});r(l),t()}),100)})),treeData:e,onChange:e=>{n(e)}},(e=>{let{value:r,onChange:t,treeData:n,loading:l}=e;return a.createElement(u.A,{loading:l,columns:[{title:"名称",key:"title",dataIndex:"title"}],scroll:{y:300},rowKey:"id",dataSource:n,pagination:!1,rowSelection:{type:"checkbox",selectedRowKeys:r,onSelect:function(e,r,n){t(n.map((e=>e.value)),n.map((e=>e.title)),{selected:r,triggerNode:{props:e}})},onSelectAll:(e,r,n)=>{t(r.map((e=>e.value)),r.map((e=>e.title)),{selected:e,triggerNode:e?{props:n}:null})}}})}))},x=[{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf1",title:"leaf1",id:"leaf1"},{value:"leaf2",title:"leaf2",id:"leaf2"}]},{value:"parent 1-1",title:"parent 1-1",id:"parent 1-1",children:[{value:"leaf3",title:"leaf3",id:"leaf3"}]}]}],O={key:"leaf2",value:[{value:"parent 1",title:"parent 1",id:"parent 1",children:[{value:"parent 1-0",title:"parent 1-0",id:"parent 1-0",children:[{value:"leaf2",title:"leaf2",id:"leaf2"}]}]}]},N=()=>{const[e,r]=(0,a.useState)([]),[t,n]=(0,a.useState)("leaf2");return a.createElement(o.TreeAutoComplete,{value:t,className:c.A.Wrapper,defaultTreeData:O,loadData:e=>new Promise((t=>{if(!e)return r([]),void t();setTimeout((()=>{const n=i.A.treeToArray(x,{parentIdAttr:"pId",rootParentId:0},"value"),a=n.filter((r=>-1!==r.title.indexOf(e))),l=i.A.completionIncompleteFlatArr(n,a,{keyAttr:"value",titleAttr:"title",parentIdAttr:"pId",rootParentId:0});r(l),t()}),100)})),treeData:e,onChange:e=>{n(e)}})},j=()=>a.createElement(l.Ay,null,a.createElement(l.wn,{title:"AutoComplete"},a.createElement("p",null,"自动补全")),a.createElement(l.Wc,{title:"代码演示",config:[{id:"p1",name:"Select的自动补全",cardProps:{description:{title:"Select的自动补全",info:"Select的自动补全"}},active:"SelectAutoComplete.jsx",config:[{key:"SelectAutoComplete.jsx",title:"SelectAutoComplete.jsx",codeText:"import React, { useState } from 'react';\r\n\r\nimport { AutoComplete } from '@baifendian/adhere';\r\n\r\nimport Book from '../data';\r\n\r\nimport styles from '../../anthoc/examples/Cascader/index.less';\r\n\r\nexport default () => {\r\n  const [options, setOptions] = useState([]);\r\n\r\n  const [value, setValue] = useState([]);\r\n\r\n  return (\r\n    <AutoComplete\r\n      placeholder=\"自动补全\"\r\n      value={value}\r\n      mode=\"multiple\"\r\n      className={styles.Wrapper3}\r\n      loadData={(_kw) => {\r\n        return new Promise((resolve) => {\r\n          if (!_kw) {\r\n            setOptions([]);\r\n            resolve();\r\n            return;\r\n          }\r\n\r\n          setTimeout(() => {\r\n            const result = [...Book]\r\n              .filter((_book) => _book.t.indexOf(_kw) !== -1)\r\n              .map((t) => ({\r\n                label: t.t,\r\n                value: t.id,\r\n              }));\r\n\r\n            setOptions(result);\r\n\r\n            resolve();\r\n          }, 500);\r\n        });\r\n      }}\r\n      options={options}\r\n      onChange={(_value) => {\r\n        setValue(_value);\r\n      }}\r\n    />\r\n  );\r\n};\r\n"},{key:"data.js",title:"data.js",codeText:n}],type:"PlayGroundTab",renderChildren:()=>a.createElement(k,null)},{id:"p2",name:"Table的自动补全",cardProps:{description:{title:"Table的自动补全",info:"Table的自动补全"}},active:"TableAutoComplete.jsx",config:[{key:"TableAutoComplete.jsx",title:"TableAutoComplete.jsx",codeText:"import { Table } from 'antd';\r\nimport React, { useState } from 'react';\r\n\r\nimport { AutoComplete } from '@baifendian/adhere';\r\n\r\nimport Book from '../data';\r\n\r\nimport styles from '../../anthoc/examples/Cascader/index.less';\r\n\r\nexport default () => {\r\n  const [options, setOptions] = useState([]);\r\n\r\n  const [value, setValue] = useState([]);\r\n\r\n  return (\r\n    <AutoComplete\r\n      placeholder=\"自动补全\"\r\n      value={value}\r\n      mode=\"multiple\"\r\n      className={styles.Wrapper3}\r\n      loadData={(_kw) => {\r\n        return new Promise((resolve) => {\r\n          if (!_kw) {\r\n            setOptions([]);\r\n            resolve();\r\n            return;\r\n          }\r\n\r\n          setTimeout(() => {\r\n            const result = Book.filter((_book) => _book.t.indexOf(_kw) !== -1).map((t) => ({\r\n              label: t.t,\r\n              value: t.id,\r\n              ...t,\r\n            }));\r\n\r\n            setOptions(result);\r\n\r\n            resolve();\r\n          }, 500);\r\n        });\r\n      }}\r\n      options={options}\r\n      onChange={(_value) => {\r\n        setValue(_value);\r\n      }}\r\n    >\r\n      {({ value: _value, onChange: _onChange, options }) => {\r\n        return (\r\n          <Table\r\n            columns={[\r\n              {\r\n                title: '名称',\r\n                key: 'label',\r\n                dataIndex: 'label',\r\n              },\r\n              {\r\n                title: '出版社',\r\n                key: 'label',\r\n                dataIndex: 'label',\r\n              },\r\n            ]}\r\n            scroll={{\r\n              y: 200,\r\n            }}\r\n            rowKey=\"id\"\r\n            dataSource={options}\r\n            pagination={false}\r\n            rowSelection={{\r\n              type: 'checkbox',\r\n              selectedRowKeys: _value,\r\n              onSelect: function (record, selected, selectedRows) {\r\n                if (selected) {\r\n                  const selectedRowKeys = selectedRows.filter((t) => !!t).map((t) => t.value);\r\n                  _onChange(Array.from(new Set([..._value, ...selectedRowKeys])));\r\n                } else {\r\n                  _onChange(_value.filter((t) => t !== record.id));\r\n                }\r\n              },\r\n              onSelectAll: (selected, selectedRows, changeRows) => {\r\n                if (selected) {\r\n                  const selectedRowKeys = selectedRows.filter((t) => !!t).map((t) => t.value);\r\n                  _onChange(Array.from(new Set([..._value, ...selectedRowKeys])));\r\n                } else {\r\n                  const changeSelectedRowKeys = changeRows.filter((t) => !!t).map((t) => t.value);\r\n                  _onChange(_value.filter((t) => !changeSelectedRowKeys.includes(t)));\r\n                }\r\n              },\r\n            }}\r\n          />\r\n        );\r\n      }}\r\n    </AutoComplete>\r\n  );\r\n};\r\n"},{key:"data.js",title:"data.js",codeText:n}],type:"PlayGroundTab",renderChildren:()=>a.createElement(_,null)},{id:"p3",name:"Table的单选分页自动补全",cardProps:{description:{title:"Table的单选分页自动补全",info:"Table的单选分页自动补全"}},active:"TablePaginRadioAutoComplete.jsx",config:[{key:"TablePaginRadioAutoComplete.jsx",title:"TablePaginRadioAutoComplete.jsx",codeText:"import { Table } from 'antd';\r\nimport React, { useRef, useState } from 'react';\r\n\r\nimport { AutoComplete } from '@baifendian/adhere';\r\n\r\nimport Book from '../data';\r\n\r\nimport styles from '../../anthoc/examples/Cascader/index.less';\r\n\r\nexport default () => {\r\n  const [options, setOptions] = useState([]);\r\n\r\n  const kw = useRef();\r\n\r\n  const [totalCount, setTotalCount] = useState(0);\r\n\r\n  const [value, setValue] = useState([]);\r\n\r\n  const pagin = useRef({\r\n    page: 1,\r\n    limit: 10,\r\n  });\r\n\r\n  function loadData() {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const all = [...Book]\r\n          .filter((_book) => {\r\n            return _book.t.indexOf(kw.current) !== -1;\r\n          })\r\n          .map((t) => ({\r\n            label: t.t,\r\n            value: t.id,\r\n            ...t,\r\n          }));\r\n\r\n        const result = all.slice(\r\n          (pagin.current.page - 1) * pagin.current.limit,\r\n          pagin.current.page * pagin.current.limit,\r\n        );\r\n\r\n        setTotalCount(all.length);\r\n        setOptions(result);\r\n\r\n        resolve();\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <AutoComplete\r\n      placeholder=\"自动补全\"\r\n      value={value}\r\n      className={styles.Wrapper3}\r\n      loadData={(_kw) => {\r\n        return new Promise((resolve) => {\r\n          kw.current = _kw;\r\n\r\n          pagin.current = {\r\n            page: 1,\r\n            limit: 10,\r\n          };\r\n\r\n          if (!_kw) {\r\n            setOptions([]);\r\n            resolve();\r\n            return;\r\n          }\r\n\r\n          loadData();\r\n        });\r\n      }}\r\n      options={options}\r\n      onChange={(_value) => {\r\n        setValue(_value);\r\n      }}\r\n    >\r\n      {({ value: _value, onChange: _onChange, options }) => {\r\n        return (\r\n          <Table\r\n            columns={[\r\n              {\r\n                title: '名称',\r\n                key: 'label',\r\n                dataIndex: 'label',\r\n              },\r\n              {\r\n                title: '出版社',\r\n                key: 'label',\r\n                dataIndex: 'label',\r\n              },\r\n            ]}\r\n            rowKey=\"id\"\r\n            dataSource={options}\r\n            pagination={{\r\n              current: pagin.page,\r\n              pageSize: pagin.limit,\r\n              total: totalCount,\r\n              onChange: (page, pageSize) => {\r\n                pagin.current = {\r\n                  page,\r\n                  limit: pageSize,\r\n                };\r\n\r\n                loadData();\r\n              },\r\n              onShowSizeChange: (current, size) => {\r\n                pagin.current = {\r\n                  page: current,\r\n                  limit: size,\r\n                };\r\n\r\n                loadData();\r\n              },\r\n            }}\r\n            scroll={{\r\n              y: 200,\r\n            }}\r\n            rowSelection={{\r\n              type: 'radio',\r\n              selectedRowKeys: _value,\r\n              onSelect: function (record, selected, selectedRows) {\r\n                if (selected) {\r\n                  const selectedRowKeys = selectedRows.filter((t) => !!t).map((t) => t.value);\r\n                  _onChange(selectedRowKeys);\r\n                }\r\n              },\r\n            }}\r\n          />\r\n        );\r\n      }}\r\n    </AutoComplete>\r\n  );\r\n};\r\n"},{key:"data.js",title:"data.js",codeText:n}],type:"PlayGroundTab",renderChildren:()=>a.createElement(I,null)},{id:"p4",name:"Table的多选分页自动补全",cardProps:{description:{title:"Table的多选分页自动补全",info:"Table的多选分页自动补全"}},active:"TablePaginMultipleAutoComplete.jsx",config:[{key:"TablePaginMultipleAutoComplete.jsx",title:"TablePaginMultipleAutoComplete.jsx",codeText:"import { Table } from 'antd';\r\nimport React, { useRef, useState } from 'react';\r\n\r\nimport { AutoComplete } from '@baifendian/adhere';\r\n\r\nimport Book from '../data';\r\n\r\nimport styles from '../../anthoc/examples/Cascader/index.less';\r\n\r\nexport default () => {\r\n  const [options, setOptions] = useState([]);\r\n\r\n  const kw = useRef();\r\n\r\n  const [totalCount, setTotalCount] = useState(0);\r\n\r\n  const [value, setValue] = useState([]);\r\n\r\n  const pagin = useRef({\r\n    page: 1,\r\n    limit: 10,\r\n  });\r\n\r\n  function loadData() {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const all = [...Book]\r\n          .filter((_book) => {\r\n            return _book.t.indexOf(kw.current) !== -1;\r\n          })\r\n          .map((t) => ({\r\n            label: t.t,\r\n            value: t.id,\r\n            ...t,\r\n          }));\r\n\r\n        const result = all.slice(\r\n          (pagin.current.page - 1) * pagin.current.limit,\r\n          pagin.current.page * pagin.current.limit,\r\n        );\r\n\r\n        setTotalCount(all.length);\r\n        setOptions(result);\r\n\r\n        resolve();\r\n      }, 500);\r\n    });\r\n  }\r\n\r\n  return (\r\n    <AutoComplete\r\n      placeholder=\"自动补全\"\r\n      value={value}\r\n      mode=\"multiple\"\r\n      className={styles.Wrapper3}\r\n      loadData={(_kw) => {\r\n        return new Promise((resolve) => {\r\n          kw.current = _kw;\r\n\r\n          pagin.current = {\r\n            page: 1,\r\n            limit: 10,\r\n          };\r\n\r\n          if (!_kw) {\r\n            setOptions([]);\r\n            resolve();\r\n            return;\r\n          }\r\n\r\n          loadData();\r\n        });\r\n      }}\r\n      options={options}\r\n      onChange={(_value) => {\r\n        setValue(_value);\r\n      }}\r\n    >\r\n      {({ value: _value, onChange: _onChange, options }) => {\r\n        return (\r\n          <Table\r\n            columns={[\r\n              {\r\n                title: '名称',\r\n                key: 'label',\r\n                dataIndex: 'label',\r\n              },\r\n              {\r\n                title: '出版社',\r\n                key: 'label',\r\n                dataIndex: 'label',\r\n              },\r\n            ]}\r\n            rowKey=\"id\"\r\n            dataSource={options}\r\n            pagination={{\r\n              current: pagin.page,\r\n              pageSize: pagin.limit,\r\n              total: totalCount,\r\n              onChange: (page, pageSize) => {\r\n                pagin.current = {\r\n                  page,\r\n                  limit: pageSize,\r\n                };\r\n\r\n                loadData();\r\n              },\r\n              onShowSizeChange: (current, size) => {\r\n                pagin.current = {\r\n                  page: current,\r\n                  limit: size,\r\n                };\r\n\r\n                loadData();\r\n              },\r\n            }}\r\n            scroll={{\r\n              y: 200,\r\n            }}\r\n            rowSelection={{\r\n              type: 'checkbox',\r\n              selectedRowKeys: _value,\r\n              onSelect: function (record, selected, selectedRows) {\r\n                if (selected) {\r\n                  const selectedRowKeys = selectedRows.filter((t) => !!t).map((t) => t.value);\r\n                  _onChange(Array.from(new Set([..._value, ...selectedRowKeys])));\r\n                } else {\r\n                  _onChange(_value.filter((t) => t !== record.id));\r\n                }\r\n              },\r\n              onSelectAll: (selected, selectedRows, changeRows) => {\r\n                if (selected) {\r\n                  const selectedRowKeys = selectedRows.filter((t) => !!t).map((t) => t.value);\r\n                  _onChange(Array.from(new Set([..._value, ...selectedRowKeys])));\r\n                } else {\r\n                  const changeSelectedRowKeys = changeRows.filter((t) => !!t).map((t) => t.value);\r\n                  _onChange(_value.filter((t) => !changeSelectedRowKeys.includes(t)));\r\n                }\r\n              },\r\n            }}\r\n          />\r\n        );\r\n      }}\r\n    </AutoComplete>\r\n  );\r\n};\r\n"},{key:"data.js",title:"data.js",codeText:n}],type:"PlayGroundTab",renderChildren:()=>a.createElement(E,null)},{id:"p5",name:"TreeSelect的AutoComplete",cardProps:{description:{title:"TreeSelect的AutoComplete",info:"TreeSelect的AutoComplete"}},codeText:"import React, { useState } from 'react';\r\n\r\nimport { AutoComplete, Util } from '@baifendian/adhere';\r\n\r\nimport styles from '../../anthoc/examples/Cascader/index.less';\r\n\r\nconst TREE_DATA = [\r\n  {\r\n    value: 'parent 1',\r\n    title: 'parent 1',\r\n    id: 'parent 1',\r\n    children: [\r\n      {\r\n        value: 'parent 1-0',\r\n        title: 'parent 1-0',\r\n        id: 'parent 1-0',\r\n        children: [\r\n          {\r\n            value: 'leaf1',\r\n            title: 'leaf1',\r\n            id: 'leaf1',\r\n          },\r\n          {\r\n            value: 'leaf2',\r\n            title: 'leaf2',\r\n            id: 'leaf2',\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        value: 'parent 1-1',\r\n        title: 'parent 1-1',\r\n        id: 'parent 1-1',\r\n        children: [\r\n          {\r\n            value: 'leaf3',\r\n            title: 'leaf3',\r\n            id: 'leaf3',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst defaultTreeData = {\r\n  key: 'leaf2',\r\n  value: [\r\n    {\r\n      value: 'parent 1',\r\n      title: 'parent 1',\r\n      id: 'parent 1',\r\n      children: [\r\n        {\r\n          value: 'parent 1-0',\r\n          title: 'parent 1-0',\r\n          id: 'parent 1-0',\r\n          children: [\r\n            {\r\n              value: 'leaf2',\r\n              title: 'leaf2',\r\n              id: 'leaf2',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport default () => {\r\n  const [treeData, setTreeData] = useState([]);\r\n\r\n  const [value, setValue] = useState('leaf2');\r\n\r\n  return (\r\n    <AutoComplete.TreeAutoComplete\r\n      value={value}\r\n      className={styles.Wrapper}\r\n      defaultTreeData={defaultTreeData}\r\n      loadData={(_kw) => {\r\n        return new Promise((resolve) => {\r\n          if (!_kw) {\r\n            setTreeData([]);\r\n            resolve();\r\n            return;\r\n          }\r\n\r\n          setTimeout(() => {\r\n            // 正常\r\n            const flatTreeData = Util.treeToArray(\r\n              TREE_DATA,\r\n              { parentIdAttr: 'pId', rootParentId: 0 },\r\n              'value',\r\n            );\r\n\r\n            const result = flatTreeData.filter((_node) => _node.title.indexOf(_kw) !== -1);\r\n\r\n            const targetTreeData = Util.completionIncompleteFlatArr(flatTreeData, result, {\r\n              keyAttr: 'value',\r\n              titleAttr: 'title',\r\n              parentIdAttr: 'pId',\r\n              rootParentId: 0,\r\n            });\r\n\r\n            setTreeData(targetTreeData);\r\n\r\n            resolve();\r\n          }, 100);\r\n        });\r\n      }}\r\n      treeData={treeData}\r\n      onChange={(_value) => {\r\n        setValue(_value);\r\n      }}\r\n    />\r\n  );\r\n};\r\n",type:"PlayGround",renderChildren:()=>a.createElement(N,null)},{id:"p6",name:"TreeSelect的AutoComplete拉平的数据",cardProps:{description:{title:"TreeSelect的AutoComplete拉平的数据",info:"TreeSelect的AutoComplete拉平的数据"}},codeText:"import React, { useState } from 'react';\r\n\r\nimport { AutoComplete, Util } from '@baifendian/adhere';\r\n\r\nimport styles from '../../anthoc/examples/Cascader/index.less';\r\n\r\nconst TREE_DATA = [\r\n  {\r\n    value: 'parent 1',\r\n    title: 'parent 1',\r\n    id: 'parent 1',\r\n    children: [\r\n      {\r\n        value: 'parent 1-0',\r\n        title: 'parent 1-0',\r\n        id: 'parent 1-0',\r\n        children: [\r\n          {\r\n            value: 'leaf1',\r\n            title: 'leaf1',\r\n            id: 'leaf1',\r\n          },\r\n          {\r\n            value: 'leaf2',\r\n            title: 'leaf2',\r\n            id: 'leaf2',\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        value: 'parent 1-1',\r\n        title: 'parent 1-1',\r\n        id: 'parent 1-1',\r\n        children: [\r\n          {\r\n            value: 'leaf3',\r\n            title: 'leaf3',\r\n            id: 'leaf3',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst FLAT_TREE_DATA = Util.treeToArray(\r\n  TREE_DATA,\r\n  {\r\n    parentIdAttr: 'pId',\r\n    rootParentId: 0,\r\n  },\r\n  'id',\r\n);\r\n\r\nconst defaultTreeData = {\r\n  key: 'leaf2',\r\n  value: [\r\n    {\r\n      value: 'parent 1',\r\n      title: 'parent 1',\r\n      id: 'parent 1',\r\n      children: [\r\n        {\r\n          value: 'parent 1-0',\r\n          title: 'parent 1-0',\r\n          id: 'parent 1-0',\r\n          children: [\r\n            {\r\n              value: 'leaf2',\r\n              title: 'leaf2',\r\n              id: 'leaf2',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nconst flatDefaultTreeData = {\r\n  key: 'leaf2',\r\n  value: Util.treeToArray(\r\n    defaultTreeData.value,\r\n    {\r\n      parentIdAttr: 'pId',\r\n      rootParentId: 0,\r\n    },\r\n    'id',\r\n  ),\r\n};\r\n\r\nexport default () => {\r\n  const [treeData, setTreeData] = useState([]);\r\n\r\n  const [value, setValue] = useState('leaf2');\r\n\r\n  return (\r\n    <AutoComplete.TreeAutoComplete\r\n      value={value}\r\n      className={styles.Wrapper}\r\n      defaultTreeData={flatDefaultTreeData}\r\n      treeDataSimpleMode\r\n      loadData={(_kw) => {\r\n        return new Promise((resolve) => {\r\n          if (!_kw) {\r\n            setTreeData([]);\r\n            resolve();\r\n            return;\r\n          }\r\n\r\n          setTimeout(() => {\r\n            // flat\r\n            const result = FLAT_TREE_DATA.filter((_node) => _node.title.indexOf(_kw) !== -1);\r\n\r\n            const targetTreeData = Util.treeToArray(\r\n              Util.completionIncompleteFlatArr(FLAT_TREE_DATA, result, {\r\n                keyAttr: 'id',\r\n                titleAttr: 'title',\r\n                parentIdAttr: 'pId',\r\n                rootParentId: 0,\r\n              }),\r\n              {\r\n                keyAttr: 'id',\r\n                titleAttr: 'title',\r\n                parentIdAttr: 'pId',\r\n                rootParentId: 0,\r\n              },\r\n            );\r\n\r\n            setTreeData(targetTreeData);\r\n\r\n            resolve();\r\n          }, 100);\r\n        });\r\n      }}\r\n      treeData={treeData}\r\n      onChange={(_value) => {\r\n        setValue(_value);\r\n      }}\r\n    />\r\n  );\r\n};\r\n",type:"PlayGround",renderChildren:()=>a.createElement(g,null)},{id:"p7",name:"TreeSelect的AutoComplete多选",cardProps:{description:{title:"TreeSelect的AutoComplete多选",info:"TreeSelect的AutoComplete多选"}},codeText:"import React, { useState } from 'react';\r\n\r\nimport { AutoComplete, Util } from '@baifendian/adhere';\r\n\r\nimport styles from '../../anthoc/examples/Cascader/index.less';\r\n\r\nconst TREE_DATA = [\r\n  {\r\n    value: 'parent 1',\r\n    title: 'parent 1',\r\n    id: 'parent 1',\r\n    children: [\r\n      {\r\n        value: 'parent 1-0',\r\n        title: 'parent 1-0',\r\n        id: 'parent 1-0',\r\n        children: [\r\n          {\r\n            value: 'leaf1',\r\n            title: 'leaf1',\r\n            id: 'leaf1',\r\n          },\r\n          {\r\n            value: 'leaf2',\r\n            title: 'leaf2',\r\n            id: 'leaf2',\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        value: 'parent 1-1',\r\n        title: 'parent 1-1',\r\n        id: 'parent 1-1',\r\n        children: [\r\n          {\r\n            value: 'leaf3',\r\n            title: 'leaf3',\r\n            id: 'leaf3',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst defaultTreeData = {\r\n  key: 'leaf2',\r\n  value: [\r\n    {\r\n      value: 'parent 1',\r\n      title: 'parent 1',\r\n      id: 'parent 1',\r\n      children: [\r\n        {\r\n          value: 'parent 1-0',\r\n          title: 'parent 1-0',\r\n          id: 'parent 1-0',\r\n          children: [\r\n            {\r\n              value: 'leaf2',\r\n              title: 'leaf2',\r\n              id: 'leaf2',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport default () => {\r\n  const [treeData, setTreeData] = useState([]);\r\n\r\n  const [value, setValue] = useState(['leaf2']);\r\n\r\n  return (\r\n    <AutoComplete.TreeAutoComplete\r\n      value={value}\r\n      className={styles.Wrapper}\r\n      multiple\r\n      defaultTreeData={defaultTreeData}\r\n      loadData={(_kw) => {\r\n        return new Promise((resolve) => {\r\n          if (!_kw) {\r\n            setTreeData([]);\r\n            resolve();\r\n            return;\r\n          }\r\n\r\n          setTimeout(() => {\r\n            // 正常\r\n            const flatTreeData = Util.treeToArray(\r\n              TREE_DATA,\r\n              { parentIdAttr: 'pId', rootParentId: 0 },\r\n              'value',\r\n            );\r\n\r\n            const result = flatTreeData.filter((_node) => _node.title.indexOf(_kw) !== -1);\r\n\r\n            const targetTreeData = Util.completionIncompleteFlatArr(flatTreeData, result, {\r\n              keyAttr: 'value',\r\n              titleAttr: 'title',\r\n              parentIdAttr: 'pId',\r\n              rootParentId: 0,\r\n            });\r\n\r\n            setTreeData(targetTreeData);\r\n\r\n            resolve();\r\n          }, 100);\r\n        });\r\n      }}\r\n      treeData={treeData}\r\n      onChange={(_value) => {\r\n        setValue(_value);\r\n      }}\r\n    />\r\n  );\r\n};\r\n",type:"PlayGround",renderChildren:()=>a.createElement(T,null)},{id:"p8",name:"TreeSelect的AutoComplete支持checkable",cardProps:{description:{title:"TreeSelect的AutoComplete支持checkable",info:"TreeSelect的AutoComplete支持checkable"}},codeText:"import React, { useState } from 'react';\r\n\r\nimport { AutoComplete, Util } from '@baifendian/adhere';\r\n\r\nimport styles from '../../anthoc/examples/Cascader/index.less';\r\n\r\nconst TREE_DATA = [\r\n  {\r\n    value: 'parent 1',\r\n    title: 'parent 1',\r\n    id: 'parent 1',\r\n    children: [\r\n      {\r\n        value: 'parent 1-0',\r\n        title: 'parent 1-0',\r\n        id: 'parent 1-0',\r\n        children: [\r\n          {\r\n            value: 'leaf1',\r\n            title: 'leaf1',\r\n            id: 'leaf1',\r\n          },\r\n          {\r\n            value: 'leaf2',\r\n            title: 'leaf2',\r\n            id: 'leaf2',\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        value: 'parent 1-1',\r\n        title: 'parent 1-1',\r\n        id: 'parent 1-1',\r\n        children: [\r\n          {\r\n            value: 'leaf3',\r\n            title: 'leaf3',\r\n            id: 'leaf3',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst defaultTreeData = {\r\n  key: 'leaf2',\r\n  value: [\r\n    {\r\n      value: 'parent 1',\r\n      title: 'parent 1',\r\n      id: 'parent 1',\r\n      children: [\r\n        {\r\n          value: 'parent 1-0',\r\n          title: 'parent 1-0',\r\n          id: 'parent 1-0',\r\n          children: [\r\n            {\r\n              value: 'leaf2',\r\n              title: 'leaf2',\r\n              id: 'leaf2',\r\n            },\r\n          ],\r\n        },\r\n      ],\r\n    },\r\n  ],\r\n};\r\n\r\nexport default () => {\r\n  const [treeData, setTreeData] = useState([]);\r\n\r\n  const [value, setValue] = useState(['leaf2']);\r\n\r\n  return (\r\n    <AutoComplete.TreeAutoComplete\r\n      value={value}\r\n      className={styles.Wrapper}\r\n      treeCheckable\r\n      defaultTreeData={defaultTreeData}\r\n      loadData={(_kw) => {\r\n        return new Promise((resolve) => {\r\n          if (!_kw) {\r\n            setTreeData([]);\r\n            resolve();\r\n            return;\r\n          }\r\n\r\n          setTimeout(() => {\r\n            // 正常\r\n            const flatTreeData = Util.treeToArray(\r\n              TREE_DATA,\r\n              { parentIdAttr: 'pId', rootParentId: 0 },\r\n              'value',\r\n            );\r\n\r\n            const result = flatTreeData.filter((_node) => _node.title.indexOf(_kw) !== -1);\r\n\r\n            const targetTreeData = Util.completionIncompleteFlatArr(flatTreeData, result, {\r\n              keyAttr: 'value',\r\n              titleAttr: 'title',\r\n              parentIdAttr: 'pId',\r\n              rootParentId: 0,\r\n            });\r\n\r\n            setTreeData(targetTreeData);\r\n\r\n            resolve();\r\n          }, 100);\r\n        });\r\n      }}\r\n      treeData={treeData}\r\n      onChange={(_value) => {\r\n        setValue(_value);\r\n      }}\r\n    />\r\n  );\r\n};\r\n",type:"PlayGround",renderChildren:()=>a.createElement(m,null)},{id:"p9",name:"TreeSelect的AutoComplete自定义TableTree渲染",cardProps:{description:{title:"TreeSelect的AutoComplete自定义TableTree渲染",info:"TreeSelect的AutoComplete自定义TableTree渲染"}},codeText:"import { Table } from 'antd';\r\nimport React, { useState } from 'react';\r\n\r\nimport { AutoComplete, Util } from '@baifendian/adhere';\r\n\r\nimport styles from '../../anthoc/examples/Cascader/index.less';\r\n\r\nconst TREE_DATA = [\r\n  {\r\n    value: 'parent 1',\r\n    title: 'parent 1',\r\n    id: 'parent 1',\r\n    children: [\r\n      {\r\n        value: 'parent 1-0',\r\n        title: 'parent 1-0',\r\n        id: 'parent 1-0',\r\n        children: [\r\n          {\r\n            value: 'leaf1',\r\n            title: 'leaf1',\r\n            id: 'leaf1',\r\n          },\r\n          {\r\n            value: 'leaf2',\r\n            title: 'leaf2',\r\n            id: 'leaf2',\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        value: 'parent 1-1',\r\n        title: 'parent 1-1',\r\n        id: 'parent 1-1',\r\n        children: [\r\n          {\r\n            value: 'leaf3',\r\n            title: 'leaf3',\r\n            id: 'leaf3',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nexport default () => {\r\n  const [treeData, setTreeData] = useState([]);\r\n\r\n  const [value, setValue] = useState([]);\r\n\r\n  return (\r\n    <AutoComplete.TreeAutoComplete\r\n      value={value}\r\n      className={styles.Wrapper3}\r\n      multiple\r\n      loadData={(_kw) => {\r\n        return new Promise((resolve) => {\r\n          if (!_kw) {\r\n            setTreeData([]);\r\n            resolve();\r\n            return;\r\n          }\r\n\r\n          setTimeout(() => {\r\n            // 正常\r\n\r\n            const flatTreeData = Util.treeToArray(\r\n              TREE_DATA,\r\n              { parentIdAttr: 'pId', rootParentId: 0 },\r\n              'value',\r\n            );\r\n\r\n            const result = flatTreeData.filter((_node) => _node.title.indexOf(_kw) !== -1);\r\n\r\n            const targetTreeData = Util.completionIncompleteFlatArr(flatTreeData, result, {\r\n              keyAttr: 'value',\r\n              titleAttr: 'title',\r\n              parentIdAttr: 'pId',\r\n              rootParentId: 0,\r\n            });\r\n\r\n            setTreeData(targetTreeData);\r\n\r\n            resolve();\r\n          }, 100);\r\n        });\r\n      }}\r\n      treeData={treeData}\r\n      onChange={(_value) => {\r\n        setValue(_value);\r\n      }}\r\n    >\r\n      {({ value: _value, onChange: _onChange, treeData: _treeData, loading }) => (\r\n        <Table\r\n          loading={loading}\r\n          columns={[\r\n            {\r\n              title: '名称',\r\n              key: 'title',\r\n              dataIndex: 'title',\r\n            },\r\n          ]}\r\n          scroll={{\r\n            y: 300,\r\n          }}\r\n          rowKey=\"id\"\r\n          dataSource={_treeData}\r\n          pagination={false}\r\n          rowSelection={{\r\n            type: 'checkbox',\r\n            selectedRowKeys: _value,\r\n            onSelect: function (record, selected, selectedRows) {\r\n              _onChange(\r\n                selectedRows.map((t) => t.value),\r\n                selectedRows.map((t) => t.title),\r\n                {\r\n                  selected,\r\n                  triggerNode: {\r\n                    props: record,\r\n                  },\r\n                },\r\n              );\r\n            },\r\n            onSelectAll: (selected, selectedRows, changeRows) => {\r\n              _onChange(\r\n                selectedRows.map((t) => t.value),\r\n                selectedRows.map((t) => t.title),\r\n                {\r\n                  selected,\r\n                  triggerNode: selected\r\n                    ? {\r\n                        props: changeRows,\r\n                      }\r\n                    : null,\r\n                },\r\n              );\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </AutoComplete.TreeAutoComplete>\r\n  );\r\n};\r\n",type:"PlayGround",renderChildren:()=>a.createElement(P,null)},{id:"p10",name:"TreeSelect的AutoComplete自定义TableTree渲染支持checkable",cardProps:{description:{title:"TreeSelect的AutoComplete自定义TableTree渲染支持checkable",info:"TreeSelect的AutoComplete自定义TableTree渲染支持checkable"}},codeText:"import { Table } from 'antd';\r\nimport React, { useState } from 'react';\r\n\r\nimport { AutoComplete, Util } from '@baifendian/adhere';\r\n\r\nimport styles from '../../anthoc/examples/Cascader/index.less';\r\n\r\nconst TREE_DATA = [\r\n  {\r\n    value: 'parent 1',\r\n    title: 'parent 1',\r\n    id: 'parent 1',\r\n    children: [\r\n      {\r\n        value: 'parent 1-0',\r\n        title: 'parent 1-0',\r\n        id: 'parent 1-0',\r\n        children: [\r\n          {\r\n            value: 'leaf1',\r\n            title: 'leaf1',\r\n            id: 'leaf1',\r\n          },\r\n          {\r\n            value: 'leaf2',\r\n            title: 'leaf2',\r\n            id: 'leaf2',\r\n          },\r\n        ],\r\n      },\r\n      {\r\n        value: 'parent 1-1',\r\n        title: 'parent 1-1',\r\n        id: 'parent 1-1',\r\n        children: [\r\n          {\r\n            value: 'leaf3',\r\n            title: 'leaf3',\r\n            id: 'leaf3',\r\n          },\r\n        ],\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nexport default () => {\r\n  const [treeData, setTreeData] = useState([]);\r\n\r\n  const [value, setValue] = useState([]);\r\n\r\n  return (\r\n    <AutoComplete.TreeAutoComplete\r\n      value={value}\r\n      className={styles.Wrapper3}\r\n      treeCheckable\r\n      loadData={(_kw) => {\r\n        return new Promise((resolve) => {\r\n          if (!_kw) {\r\n            setTreeData([]);\r\n            resolve();\r\n            return;\r\n          }\r\n\r\n          setTimeout(() => {\r\n            // 正常\r\n\r\n            const flatTreeData = Util.treeToArray(\r\n              TREE_DATA,\r\n              { parentIdAttr: 'pId', rootParentId: 0 },\r\n              'value',\r\n            );\r\n\r\n            const result = flatTreeData.filter((_node) => _node.title.indexOf(_kw) !== -1);\r\n\r\n            const targetTreeData = Util.completionIncompleteFlatArr(flatTreeData, result, {\r\n              keyAttr: 'value',\r\n              titleAttr: 'title',\r\n              parentIdAttr: 'pId',\r\n              rootParentId: 0,\r\n            });\r\n\r\n            setTreeData(targetTreeData);\r\n\r\n            resolve();\r\n          }, 100);\r\n        });\r\n      }}\r\n      treeData={treeData}\r\n      onChange={(_value) => {\r\n        setValue(_value);\r\n      }}\r\n    >\r\n      {({ value: _value, onChange: _onChange, treeData: _treeData, loading }) => (\r\n        <Table\r\n          loading={loading}\r\n          columns={[\r\n            {\r\n              title: '名称',\r\n              key: 'title',\r\n              dataIndex: 'title',\r\n            },\r\n          ]}\r\n          scroll={{\r\n            y: 300,\r\n          }}\r\n          rowKey=\"id\"\r\n          dataSource={_treeData}\r\n          pagination={false}\r\n          rowSelection={{\r\n            type: 'checkbox',\r\n            selectedRowKeys: _value,\r\n            onSelect: function (record, selected, selectedRows) {\r\n              _onChange(\r\n                selectedRows.map((t) => t.value),\r\n                selectedRows.map((t) => t.title),\r\n                {\r\n                  selected,\r\n                  triggerNode: {\r\n                    props: record,\r\n                  },\r\n                },\r\n              );\r\n            },\r\n            onSelectAll: (selected, selectedRows, changeRows) => {\r\n              _onChange(\r\n                selectedRows.map((t) => t.value),\r\n                selectedRows.map((t) => t.title),\r\n                {\r\n                  selected,\r\n                  triggerNode: selected\r\n                    ? {\r\n                        props: changeRows,\r\n                      }\r\n                    : null,\r\n                },\r\n              );\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </AutoComplete.TreeAutoComplete>\r\n  );\r\n};\r\n",type:"PlayGround",renderChildren:()=>a.createElement(p,null)}]}),a.createElement(l.e6,{title:"Props",config:[{border:!0,title:"属性",data:[{params:"classNameWrap",desc:"附加的样式表",type:"string",defaultVal:""},{params:"styleWrap",desc:"附加的样式",type:"React.CSSProperties",defaultVal:""},{params:"renderLoading",desc:"自定义loading",type:"() => React.ReactNode",defaultVal:""},{params:"debounceTimeout",desc:"防抖的时间",type:"number",defaultVal:"300"},{params:"loadData",desc:"异步加载数据",type:"(kw?: string) => Promise<void>",defaultVal:""},{params:"children",desc:"自动补全的UI",type:"\n                  (arg: {\n                    originNode?: React.ReactElement;\n                    value?: SelectProps['value'];\n                    onChange?: SelectProps['onChange'];\n                    options?: SelectProps['options'];\n                  }) => React.ReactElement\n                ",defaultVal:""}]}]}))},73376:(e,r,t)=>{t.d(r,{A:()=>f});var n=t(86662),a=t(86056),l=t(26322),o=t(90264),i=t(38948);const u="fdFKYQbTadYRAFXyIsyC",c="TGQfKkX166qX5wG5Oi6O",s="xoMDGjw3kWAGwRmDVR2l",p="juDjVuIAwAS6vlI_lwTq",d="s2U_wfx5rmRlV8iKcHg5",f=()=>l.createElement("ul",{className:u},l.createElement("li",{className:c},l.createElement("dl",null,l.createElement("dt",null,"相关资源"),l.createElement("dd",null,l.createElement("ul",{className:s},l.createElement("li",{className:p},"自主研发",l.createElement("ul",null,l.createElement("li",null,l.createElement("a",{href:"http://49.232.163.126:8084/",target:"_blank",rel:"noopener noreferrer"},"adherev")),l.createElement("li",null,l.createElement("a",{href:"https://github.com/playerljc/CTSJ-BUILD",target:"_blank",rel:"noopener noreferrer"},"CTSJ-BUILD")),l.createElement("li",null,l.createElement("a",{href:"https://github.com/playerljc/CTSJ-BUILDV",target:"_blank",rel:"noopener noreferrer"},"CTSJ-BUILDV")),l.createElement("li",null,l.createElement("a",{href:"https://github.com/playerljc/CTSJ-STATE",target:"_blank",rel:"noopener noreferrer"},"CTSJ-STATE")),l.createElement("li",null,l.createElement("a",{href:"https://github.com/playerljc/CTSJ-ROUTER",target:"_blank",rel:"noopener noreferrer"},"CTSJ-ROUTER")),l.createElement("li",null,l.createElement("a",{href:"https://github.com/playerljc/CTSJ-VuexGenerator",target:"_blank",rel:"noopener noreferrer"},"CTSJ-VuexGenerator")),l.createElement("li",null,l.createElement("a",{href:"https://github.com/playerljc/CTSJ-React-SSR",target:"_blank",rel:"noopener noreferrer"},"CTSJ-React-SSR")),l.createElement("li",null,l.createElement("a",{href:"https://github.com/playerljc/CTSJ-DOC",target:"_blank",rel:"noopener noreferrer"},"CTSJ-DOC")),l.createElement("li",null,l.createElement("a",{href:"https://github.com/playerljc/CTSJ-DvaGenerator",target:"_blank",rel:"noopener noreferrer"},"CTSJ-DvaGenerator")),l.createElement("li",null,l.createElement("a",{href:"https://github.com/playerljc/WebViewJavascriptBridge",target:"_blank",rel:"noopener noreferrer"},"WebViewJavascriptBridge")))),l.createElement("li",{className:p},"模板工程",l.createElement("ul",null,l.createElement("li",null,l.createElement("a",{href:"https://gitee.com/playerljc/ReactPro/tree/adhere",target:"_blank",rel:"noopener noreferrer"},"ReactPro(G1)")),l.createElement("li",null,l.createElement("a",{href:"https://gitee.com/playerljc/ReactPro/tree/polyfill",target:"_blank",rel:"noopener noreferrer"},"ReactPro(G1)(支持IE)")),l.createElement("li",null,l.createElement("a",{href:"https://gitee.com/playerljc/ReactPro/tree/adhere-webpack5-js-ssr",target:"_blank",rel:"noopener noreferrer"},"ReactPro(G1)(SSR)")),l.createElement("li",null,l.createElement("a",{href:"https://gitee.com/playerljc/AntPro",target:"_blank",rel:"noopener noreferrer"},"AntPro(G1)")),l.createElement("li",null,l.createElement("a",{href:"http://git.baifendian.com/dongxu.guo/ReactWeb",target:"_blank",rel:"noopener noreferrer"},"ReactWeb(G3)")),l.createElement("li",null,l.createElement("a",{href:"http://git.baifendian.com/bo.li/Percent_Vue_Admin.git",target:"_blank",rel:"noopener noreferrer"},"PercentVue(G3)")),l.createElement("li",null,l.createElement("a",{href:"https://gitee.com/playerljc/VuePro",target:"_blank",rel:"noopener noreferrer"},"VuePro(G1)")))))))),l.createElement("li",{className:c},l.createElement("dl",null,l.createElement("dt",null,"帮助"),l.createElement("dd",null,l.createElement("ul",{className:s},l.createElement("li",{className:p},l.createElement("a",{href:i.Jk.O,target:"_blank",rel:"noopener noreferrer"},l.createElement(a.A,null),l.createElement("span",{className:d},"Gitlib"))),l.createElement("li",{className:p},l.createElement(o.N_,{to:"/adhere/changelog"},l.createElement(n.A,null),l.createElement("span",{className:d},"更新日志"))))))))},96465:(e,r,t)=>{t.d(r,{Wc:()=>d,I7:()=>m,e6:()=>f,wn:()=>p,Ay:()=>v});var n=t(71860),a=t(24370),l=t(26322),o=t(73376);const i="xpgSrI_YtLJ2DLwvO1Cq",u="KHCbMGLwqpj8TVQmsF1m",{PlayGroundPageContext:c,PlayGroundPage:s}=a.A,{Section:p,CodeBoxSection:d,PropsSection:f,FunctionPropsSection:m}=s;const v=function(e){let{children:r,onScrollBottom:t,distance:a=50,...p}=e;const[d,f]=(0,l.useState)(),m=(0,l.useRef)();return(0,l.useEffect)((()=>{f(m.current)}),[]),l.createElement(c.Provider,{value:{scrollEl:null!=d?d:document.body}},l.createElement(s,(0,n.A)({ref:m,className:i,anchorNavigationAutoClassName:u,anchorNavigationFixedClassName:u},p),r,l.createElement(o.A,null)))}},38948:e=>{e.exports=JSON.parse('{"rE":"2.11.0","Jk":{"O":"https://github.com/playerljc/adhere"}}')}}]);