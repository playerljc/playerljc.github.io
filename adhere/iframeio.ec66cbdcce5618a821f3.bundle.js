"use strict";(self.webpackChunk_ctsj_build=self.webpackChunk_ctsj_build||[]).push([[7716],{175362:function(e,n){n.Z={Wrap:"lRfg3r3HBsE7gqr_ob1Z",Inner:"ARoDGHUtMkcdEySsWpWS",IframeWrap:"j3FgX2hO86XLnGAj4Rhr",Iframe:"h2GWVlMb_qXTYLnKXTAU"}},483265:function(e,n,t){t.d(n,{Z:function(){return p}});var r=t(618667),a=t(739462),i=t(772099),s=t(82607),l=t(5254),o=t(925060),d=t(690171),c=t(152041),u=t(175362);const{Fetch:f}=r.default;function p(){const[e,n]=(0,d.useState)(""),[t,r]=(0,d.useState)([]),[p,m]=(0,d.useState)(!1),g=(0,d.useRef)(),y=window.location.origin,v=window.location.origin,x=(0,d.useRef)(new f(window,y));return d.createElement("div",{className:u.Z.Wrap},p&&d.createElement("div",{className:u.Z.Inner},d.createElement(a.Z,{direction:"vertical",size:"middle",style:{display:"flex"}},d.createElement(i.Z,{title:"将输入框值设置到iframe里"},d.createElement(s.default.Group,{compact:!0},d.createElement(s.default,{value:e,style:{width:"calc(100% - 200px)"},onChange:e=>n(e.target.value)}),d.createElement(l.ZP,{type:"primary",onClick:function(){var n;x.current.put(null==g||null===(n=g.current)||void 0===n?void 0:n.contentWindow,v,"/display",{data:e})}},"发送"))),d.createElement(i.Z,{title:"获取iframe文档内容"},d.createElement(l.ZP,{type:"primary",onClick:function(){var n;x.current.get(null==g||null===(n=g.current)||void 0===n?void 0:n.contentWindow,v,"/getDoc",{data:e}).then((e=>{alert(e.getBody())}))}},"获取")),d.createElement(i.Z,{title:"上传图片到iframe里面进行显示"},d.createElement(s.default,{id:"uploadImgFile",type:"file",onChange:function(e){const n=e.target.files[0],t=new FileReader;t.addEventListener("load",(e=>{var n;x.current.put(null==g||null===(n=g.current)||void 0===n?void 0:n.contentWindow,v,"/uploadImg",{data:e.target.result})})),t.readAsDataURL(n)}})),d.createElement(i.Z,{title:"带有进度的上传一个文件给iframe"},d.createElement(s.default,{id:"uploadProgressFile",type:"file",onChange:function(e){const n=e.target.files[0],t=(0,c.Z)(),a={file:n,completeSize:0,status:"active",fileId:t};r((e=>[...e,a]));const i=new FileReader;i.addEventListener("load",(e=>{const a=e.target.result,i=1024,s=Math.floor(a.byteLength/i)+(a.byteLength%i==0?0:1);console.log("文件名称",n.name),console.log("文件大小",n.size),console.log("上传次数",s);let l=0;const o=()=>{var e;if(l>=s)return r((e=>(e.find((e=>e.fileId===t)).status="success",[...e]))),void console.log(`文件${n.name}上传完成!`);const d=a.slice(l*i,(l+1)*i);console.log(`第${l+1}次上传开始`),x.current.get(null==g||null===(e=g.current)||void 0===e?void 0:e.contentWindow,v,"/progressUploadFile",{data:{segmentSize:i,segmentCount:s,currentIndex:l,fileId:t,fileName:n.name,size:n.size,buffer:d}}).then((()=>{r((e=>{console.log(`第${l+1}次上传结束`);const n=e.find((e=>e.fileId===t));return n.status="active",n.completeSize=(l+1)*i,[...e]})),l++,o()}))};o()})),i.readAsArrayBuffer(n)}}),d.createElement("ul",null,d.createElement(a.Z,{direction:"vertical",size:"middle",style:{display:"flex"}},t.map((e=>(console.log("进度条:",Number((e.completeSize/e.file.size*100).toFixed(2)),e.status),d.createElement("li",{key:e.fileId},d.createElement("span",null,e.file.name),d.createElement(o.Z,{percent:Number((e.completeSize/e.file.size*100).toFixed(2)),status:e.status})))))))))),d.createElement("div",{className:u.Z.IframeWrap},d.createElement("h1",{style:{textAlign:"center"}},"Iframe"),d.createElement("iframe",{name:"server",ref:g,className:u.Z.Iframe,src:"/iframeServer",onLoad:function(){m(!0)}})))}},379005:function(e,n,t){t.r(n);var r=t(690171),a=t(296032),i=t(483265);n.default=()=>r.createElement(a.ZP,null,r.createElement(a.$0,{title:"IframeIO"},r.createElement("p",null,"iframe的通信客户端和服务端")),r.createElement(a.e0,{title:"代码演示",config:[{id:"p1",name:"基本使用",mode:"code",scope:{React:r},cardProps:{description:{title:"基本使用",info:"基本使用"}},active:"client.jsx",config:[{key:"client.jsx",title:"client.jsx",codeText:"\n  import React, { useRef, useState } from 'react';\nimport { v4 } from 'uuid';\nimport { Input, Button, Card, Space, Progress } from 'antd';\nimport { IframeIO } from '@baifendian/adhere';\n\nimport styles from './client.less'\n\n  // type UpLoadItem = {\n  //   file: any;\n  //   completeSize: number;\n  //   status: 'success' | 'exception' | 'normal' | 'active';\n  //   fileId: string;\n  // };\n\n  const { Fetch } = IframeIO;\n\n  export default function () {\n    const [value, setValue] = useState('');\n    const [uploadList, setUploadList] = useState([]);\n\n    const [iframeReady, setIframeReady] = useState(false);\n    const iframeRef = useRef();\n\n    const sourceOrigin = window.location.origin;\n    const targetOrigin = window.location.origin;\n\n    const fetch = useRef(new Fetch(window, sourceOrigin));\n\n    /**\n     * onSend\n     * @description 将输入框值设置到iframe里\n     */\n    function onSend() {\n      fetch.current.put(iframeRef?.current?.contentWindow, targetOrigin, '/display', {\n        data: value,\n      });\n    }\n\n    /**\n     * onGetDoc\n     */\n    function onGetDoc() {\n      fetch.current\n\n        .get(iframeRef?.current?.contentWindow, targetOrigin, '/getDoc', {\n          data: value,\n        })\n        .then((res) => {\n          alert(res.getBody());\n        });\n    }\n\n    /**\n     * onUploadChange\n     * @param e\n     */\n    function onUploadChange(e) {\n      const fileEl = e.target;\n\n      const file = fileEl.files[0];\n\n      const reader = new FileReader();\n\n      reader.addEventListener('load', (e1) => {\n        fetch.current.put(iframeRef?.current?.contentWindow, targetOrigin, '/uploadImg', {\n          data: e1.target.result,\n        });\n      });\n\n      reader.readAsDataURL(file);\n    }\n\n    /**\n     * onUploadProgressFile\n     * @param e\n     */\n    function onUploadProgressFile(e) {\n      const file = e.target.files[0];\n\n      const fileId = v4();\n      const uploadItem = {\n        file,\n        completeSize: 0,\n        status: 'active',\n        fileId,\n      };\n\n      setUploadList((list) => [...list, uploadItem]);\n\n      const reader = new FileReader();\n      reader.addEventListener('load', (e1) => {\n        const buffer = e1.target.result;\n\n        // 段的大小 1kb\n        const segmentSize = 1024;\n\n        // 段数\n        const segmentCount =\n          Math.floor(buffer.byteLength / segmentSize) +\n          (buffer.byteLength % segmentSize === 0 ? 0 : 1);\n\n        console.log('文件名称', file.name);\n        console.log('文件大小', file.size);\n        console.log('上传次数', segmentCount);\n\n        let index = 0;\n\n        // 传递数据就是多次调用接口进行文件上传\n        const upload = () => {\n          if (index >= segmentCount) {\n            setUploadList((list) => {\n              const item = list.find((t) => t.fileId === fileId);\n              item.status = 'success';\n              return [...list];\n            });\n\n            console.log(`文件${file.name}上传完成!`);\n            return;\n          }\n\n          const uploadBuffer = buffer.slice(index * segmentSize, (index + 1) * segmentSize);\n\n          console.log(`第${index + 1}次上传开始`);\n\n          fetch.current\n\n            .get(iframeRef?.current?.contentWindow, targetOrigin, '/progressUploadFile', {\n              data: {\n                segmentSize,\n                segmentCount,\n                currentIndex: index,\n                fileId,\n                fileName: file.name,\n                size: file.size,\n                buffer: uploadBuffer,\n              },\n            })\n            .then(() => {\n              // 更新进度\n              setUploadList((list) => {\n                console.log(`第${index + 1}次上传结束`);\n                const item = list.find((t) => t.fileId === fileId);\n                item.status = 'active';\n                item.completeSize = (index + 1) * segmentSize;\n                return [...list];\n              });\n\n              index++;\n\n              upload();\n            });\n        };\n\n        upload();\n      });\n      reader.readAsArrayBuffer(file);\n    }\n\n    function onIframeLoad() {\n      setIframeReady(true);\n    }\n\n    return (\n      <div className={styles.Wrap}>\n        {iframeReady && (\n          <div className={styles.Inner}>\n            <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex' }}>\n              <Card title=\"将输入框值设置到iframe里\">\n                <Input.Group compact>\n                  <Input\n                    value={value}\n                    style={{ width: 'calc(100% - 200px)' }}\n                    onChange={(e) => setValue(e.target.value)}\n                  />\n                  <Button type=\"primary\" onClick={onSend}>\n                    发送\n                  </Button>\n                </Input.Group>\n              </Card>\n\n              <Card title=\"获取iframe文档内容\">\n                <Button type=\"primary\" onClick={onGetDoc}>\n                  获取\n                </Button>\n              </Card>\n\n              <Card title=\"上传图片到iframe里面进行显示\">\n                <Input id=\"uploadImgFile\" type=\"file\" onChange={onUploadChange} />\n              </Card>\n\n              <Card title=\"带有进度的上传一个文件给iframe\">\n                <Input id=\"uploadProgressFile\" type=\"file\" onChange={onUploadProgressFile} />\n                <ul>\n                  <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex' }}>\n                    {uploadList.map((t) => {\n                      console.log(\n                        '进度条:',\n                        Number(((t.completeSize / t.file.size) * 100).toFixed(2)),\n                        t.status,\n                      );\n\n                      return (\n                        <li key={t.fileId}>\n                          <span>{t.file.name}</span>\n                          <Progress\n                            percent={Number(((t.completeSize / t.file.size) * 100).toFixed(2))}\n                            status={t.status}\n                          />\n                        </li>\n                      );\n                    })}\n                  </Space>\n                </ul>\n              </Card>\n            </Space>\n          </div>\n        )}\n\n        <div className={styles.IframeWrap}>\n          <h1 style={{ textAlign: 'center' }}>Iframe</h1>\n          <iframe\n            name=\"server\"\n            ref={iframeRef}\n            className={styles.Iframe}\n            src=\"/iframeServer\"\n            onLoad={onIframeLoad}\n          />\n        </div>\n      </div>\n    );\n  }\n                "},{key:"client.less",title:"client.less",codeText:"\n  .Wrap {\n    border: 1px solid #ccc;\n\n    > .Inner {\n      padding: 20px;\n    }\n\n    .IframeWrap {\n      padding: 20px;\n\n      .Iframe {\n        width: 100%;\n        height: 800px;\n        border: 1px solid #ccc;\n      }\n    }\n  }\n                "},{key:"server.jsx",title:"server.jsx",codeText:"\n  import React, { useEffect, useRef, useState } from 'react';\nimport { Card, Space, Progress } from 'antd';\nimport { IframeIO } from '@baifendian/adhere';\nimport FileSaver from 'file-saver';\n\nimport styles from './server.less';\n\n  // type FileUpLoad = {\n  //   // 段大小\n  //   segmentSize: number;\n  //   // 段数\n  //   segmentCount: number;\n  //   // 当前段数\n  //   currentIndex: number;\n  //   fileId: string;\n  //   fileName: string;\n  //   size: number;\n  //   status: 'success' | 'exception' | 'normal' | 'active';\n  //   // 一次传过来的buffer\n  //   buffer: ArrayBuffer;\n  //   // 总的buffer\n  //   fileBuffer: ArrayBuffer[];\n  // };\n\n  const { Router, Server } = IframeIO;\n\n  export default function () {\n    const [displayValue, setDisplayValue] = useState('');\n    const [image, setImage] = useState('');\n    const [uploadList, setUploadList] = useState([]);\n\n    const ref = useRef();\n    const server = useRef();\n    const router = useRef();\n\n    const sourceOrigin = window.location.origin;\n    const whiteList = [sourceOrigin];\n\n    useEffect(() => {\n      router.current = new Router();\n\n      // @ts-ignore\n      router.current\n        /**\n         * /display\n         */\n        .controller('/display', (ctx, next) => {\n          const body = ctx.request.getBody();\n          setDisplayValue(body);\n          ctx.response.setStatusCode(200);\n          ctx.response.setStatusMessage('ok');\n          next();\n        })\n        /**\n         * /getDoc\n         */\n        .controller('/getDoc', (ctx, next) => {\n          ctx.response.setBody(ref.current.outerHTML);\n          ctx.response.setStatusCode(200);\n          ctx.response.setStatusMessage('ok');\n          next();\n        })\n        /**\n         * uploadImg\n         */\n        .controller('/uploadImg', (ctx, next) => {\n          const body = ctx.request.getBody();\n          setImage(body);\n          ctx.response.setStatusCode(200);\n          ctx.response.setStatusMessage('ok');\n          next();\n        })\n        /**\n         * progressUploadFile\n         */\n        .controller('/progressUploadFile', (ctx, next) => {\n          const fileUpload = ctx.request.getBody();\n\n          // 一个文件的开始\n          if (fileUpload.currentIndex === 0) {\n            setUploadList((list) => {\n              list.push({\n                ...fileUpload,\n                status: 'active',\n                fileBuffer: [fileUpload.buffer],\n              });\n              return [...list];\n            });\n          }\n          // 一个文件的结束\n          else if (fileUpload.currentIndex === fileUpload.segmentCount - 1) {\n            setUploadList((list) => {\n              const index = list.findIndex((t) => t.fileId === fileUpload.fileId);\n\n              list[index] = {\n                ...fileUpload,\n                status: 'success',\n                fileBuffer: [...list[index].fileBuffer, fileUpload.buffer],\n              };\n              return [...list];\n            });\n          }\n          // 中间过程\n          else {\n            setUploadList((list) => {\n              const index = list.findIndex((t) => t.fileId === fileUpload.fileId);\n\n              list[index] = {\n                ...fileUpload,\n                fileBuffer: [...list[index].fileBuffer, fileUpload.buffer],\n              };\n              return [...list];\n            });\n          }\n\n          ctx.response.setStatusCode(200);\n          ctx.response.setStatusMessage('ok');\n          next();\n        });\n\n      server.current = new Server(whiteList, window, sourceOrigin);\n\n      server.current.use(router.current.routers());\n\n      server.current.start();\n    }, []);\n\n    return (\n      // @ts-ignore\n      <div className={styles.Wrap} ref={ref}>\n        <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex' }}>\n          <Card title=\"将输入框值设置到iframe里\">\n            <div>{displayValue}</div>\n          </Card>\n\n          <Card title=\"上传图片到iframe里面进行显示\">\n            <div>{image && <img src={image} alt=\"\" />}</div>\n          </Card>\n\n          <Card title=\"带有进度的上传一个文件给iframe\">\n            <ul>\n              <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex' }}>\n                {uploadList.map((t) => {\n                  const percent = Number(\n                    (\n                      (t.fileBuffer.reduce((pre, val) => pre + val.byteLength, 0) / t.size) *\n                      100\n                    ).toFixed(2),\n                  );\n\n                  return (\n                    <li\n                      className={t.status === 'success' ? styles.Hover : null}\n                      key={t.fileId}\n                      onClick={() => {\n                        if (t.status === 'success') {\n                          const blob = new Blob(t.fileBuffer, { type: 'application/octet-stream' });\n                          FileSaver.saveAs(blob, t.fileName);\n                        }\n                      }}\n                    >\n                      <span>{t.fileName}</span>\n                      <Progress percent={percent} status={t.status} />\n                    </li>\n                  );\n                })}\n              </Space>\n            </ul>\n          </Card>\n        </Space>\n      </div>\n    );\n  }\n                "},{key:"server.less",title:"server.less",codeText:"\n  .Wrap {\n    width: 100%;\n    height: 100%;\n\n    .Hover {\n      &:hover {\n        cursor: pointer;\n      }\n    }\n  }\n                "}],type:"PlayGroundTab",renderChildren:()=>r.createElement(i.Z,null)}]}),r.createElement(a.ae,{title:"Api",config:[{border:!0,title:"Fetch",data:[{name:"constructor",desc:"构造函数",modifier:"public",params:[{name:"source",desc:"客户端的window对象",type:"MessageEventSource",defaultVal:"",required:""},{name:"origin",desc:"客户端的origin",type:"string",defaultVal:"",required:""}],returnType:"",returnDesc:""},{name:"get",desc:"get请求",modifier:"public",params:[{name:"targetWindow",desc:"服务端的window",type:"MessageEventSource",defaultVal:"",required:""},{name:"targetOrigin",desc:"服务端的origin",type:"string",defaultVal:"",required:""},{name:"pathname",desc:"pathname",type:"string",defaultVal:"",required:""},{name:"options",desc:"配置",type:"{\n                      data: any,\n                      headers: {\n                        [prop: string]: string;\n                      }\n                    }",defaultVal:"",required:""}],returnType:"Promise<Response>",returnDesc:""},{name:"put",desc:"put请求",modifier:"public",params:[{name:"targetWindow",desc:"服务端的window",type:"MessageEventSource",defaultVal:"",required:""},{name:"targetOrigin",desc:"服务端的origin",type:"string",defaultVal:"",required:""},{name:"pathname",desc:"pathname",type:"string",defaultVal:"",required:""},{name:"options",desc:"配置",type:"{\n                      data: any,\n                      headers: {\n                        [prop: string]: string;\n                      }\n                    }",defaultVal:"",required:""}],returnType:"Promise<Response>",returnDesc:""},{name:"delete",desc:"delete请求",modifier:"public",params:[{name:"targetWindow",desc:"服务端的window",type:"MessageEventSource",defaultVal:"",required:""},{name:"targetOrigin",desc:"服务端的origin",type:"string",defaultVal:"",required:""},{name:"pathname",desc:"pathname",type:"string",defaultVal:"",required:""},{name:"options",desc:"配置",type:"{\n                      data: any,\n                      headers: {\n                        [prop: string]: string;\n                      }\n                    }",defaultVal:"",required:""}],returnType:"Promise<Response>",returnDesc:""}]},{border:!0,title:"Server",data:[{name:"constructor",desc:"构造函数",modifier:"public",params:[{name:"whitelist",desc:"白名单",type:"string[]",defaultVal:"[]",required:""},{name:"source",desc:"服务端的window",type:"MessageEventSource",defaultVal:"",required:""},{name:"sourceOrigin",desc:"服务端的origin",type:"string",defaultVal:"",required:""}],returnType:"",returnDesc:""},{name:"start",desc:"启动服务",modifier:"public",params:[],returnType:"Promise<void>",returnDesc:""},{name:"close",desc:"关闭服务",modifier:"public",params:[],returnType:"Promise<void>",returnDesc:""},{name:"use",desc:"添加中间件",modifier:"public",params:[{name:"middleWare",desc:"中间件",type:"MiddleWare | MiddleWare[]",defaultVal:"",required:""}],returnType:"self",returnDesc:""}]},{border:!0,title:"Router(路由)",data:[{name:"controller",desc:"添加控制器",modifier:"public",params:[{name:"path",desc:"路由地址",type:"string",defaultVal:"",required:""},{name:"middleWare",desc:"处理请求的中间件",type:"MiddleWare",defaultVal:"",required:""}],returnType:"self",returnDesc:""},{name:"routers",desc:"获取所有的中间件",modifier:"public",params:[],returnType:"MiddleWare[]",returnDesc:""}]},{border:!0,title:"Compose(中间件组合)",data:[{name:"Compose",desc:"构造函数",modifier:"public",params:[{name:"middleWares",desc:"中间件集合",type:"MiddleWare[]",defaultVal:"",required:""}],returnType:"(ctx, next?: () => Promise<void> | void) => Promise<void></void>",returnDesc:""}]},{border:!0,title:"Request",data:[{name:"constructor",desc:"构造函数",modifier:"public",params:[{name:"options",desc:"",type:"\n                      {\n                        pathname: string;\n                        headers?: {\n                          [prop: string]: string;\n                        };\n                        statusCode?: stateCode;\n                        stateMessage?: string;\n                        body?: any;\n                      }\n                    ",defaultVal:"",required:""}],returnType:"",returnDesc:""}]},{border:!0,title:"Response",data:[{name:"constructor",desc:"构造函数",modifier:"public",params:[{name:"options",desc:"",type:"\n                      {\n                        requestId: string;\n                        headers: {\n                          [prop: string]: string;\n                        };\n                        statusCode: stateCode;\n                        stateMessage: string;\n                        body: any;\n                      }\n                    ",defaultVal:"",required:""}],returnType:"",returnDesc:""}]}]}))},296032:function(e,n,t){t.d(n,{$0:function(){return o},ae:function(){return u},e0:function(){return d},sB:function(){return c}});var r=t(570517),a=t(153757),i=t(690171);const{PlayGroundPageContext:s,PlayGroundPage:l}=a.default,{Section:o,CodeBoxSection:d,PropsSection:c,FunctionPropsSection:u}=l;n.ZP=function(e){let{children:n,...t}=e;const[a,o]=(0,i.useState)(),d=(0,i.useRef)();return(0,i.useEffect)((()=>{o(d.current.parentElement.parentElement)}),[]),i.createElement(s.Provider,{value:{scrollEl:a}},i.createElement(l,(0,r.Z)({ref:d},t),n))}}}]);