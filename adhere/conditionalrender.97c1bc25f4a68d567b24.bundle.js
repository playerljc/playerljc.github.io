"use strict";(self.webpackChunk_ctsj_build=self.webpackChunk_ctsj_build||[]).push([[4990],{82085:function(e,n,t){t.r(n);var i=t(86915),a=t(29),o=t(17464),r=t(27288),l=t(90171),d=t(96032);n.default=()=>{const[e,n]=(0,l.useState)(!0),[t,c]=(0,l.useState)(!0),[s,p]=(0,l.useState)(!0),[m,u]=(0,l.useState)(!0),[h,f]=(0,l.useState)(!0),[y,g]=(0,l.useState)(!0),[C,E]=(0,l.useState)(!0),[b,v]=(0,l.useState)(!0);return l.createElement(d.ZP,null,l.createElement(d.$0,{title:"ConditionalRender"},l.createElement("p",null,"条件渲染"),l.createElement("p",null,"适用于自定义显示条件的情况下是否显示组件"),l.createElement("p",null,"实现了React的条件渲染"),l.createElement("p",null,"实现了元素display切换"),l.createElement("p",null,"实现了元素visibility切换")),l.createElement(d.e0,{title:"代码演示",columnCount:1,config:[{id:"p1",name:"基本使用",mode:"code",scope:{React:l},cardProps:{description:{title:"基本使用",info:"基本的显示隐藏"}},codeText:"\n       import React, { useState } from 'react';\n       import { ConditionalRender } from '@baifendian/adhere';\n       import { Button, Card } from 'antd';\n\n       const [baseUseShow, setBaseUserShow] = useState(true);\n\n       <Card\n         actions={[\n           // eslint-disable-next-line react/jsx-key\n           <Button\n             type=\"primary\"\n             onClick={() => {\n               setBaseUserShow(!baseUseShow);\n             }}\n           >\n             {baseUseShow ? '隐藏' : '显示'}\n           </Button>,\n         ]}\n       >\n         <ConditionalRender conditional={baseUseShow}>\n           {\n             () => (<p>\n             In the process of internal desktop applications development, many different design\n             specs and implementations would be involved, which might cause designers and\n             developers difficulties and duplication and reduce the efficiency of development.\n           </p>)\n           }\n         </ConditionalRender>\n       </Card>\n           ",type:"PlayGround",renderChildren:()=>l.createElement(a.Z,{actions:[l.createElement(o.ZP,{type:"primary",onClick:()=>{n(!e)}},e?"隐藏":"显示")]},l.createElement(i.Z,{conditional:e},(()=>l.createElement("p",null,"In the process of internal desktop applications development, many different design specs and implementations would be involved, which might cause designers and developers difficulties and duplication and reduce the efficiency of development."))))},{id:"p2",name:"自定义不匹配时的UI",mode:"code",scope:{React:l},cardProps:{description:{title:"自定义不匹配时的UI",info:"自定义UI"}},codeText:"\n       import React, { useState } from 'react';\n       import { ConditionalRender } from '@baifendian/adhere';\n       import { Button, Card, Empty } from 'antd';\n\n       const [noMatchUseShow, setNoMatchUserShow] = useState(true);\n\n       <Card\n         actions={[\n           // eslint-disable-next-line react/jsx-key\n           <Button\n             type=\"primary\"\n             onClick={() => {\n               setNoMatchUserShow(!noMatchUseShow);\n             }}\n           >\n             {noMatchUseShow ? '隐藏' : '显示'}\n           </Button>,\n         ]}\n       >\n         <ConditionalRender conditional={noMatchUseShow} noMatch={() => <Empty />}>\n           {\n             () => (\n               <p>\n                 In the process of internal desktop applications development, many different design\n                 specs and implementations would be involved, which might cause designers and\n                 developers difficulties and duplication and reduce the efficiency of development.\n               </p>\n             )\n           }\n         </ConditionalRender>\n       </Card>\n           ",type:"PlayGround",renderChildren:()=>l.createElement(a.Z,{actions:[l.createElement(o.ZP,{type:"primary",onClick:()=>{c(!t)}},t?"隐藏":"显示")]},l.createElement(i.Z,{conditional:t,noMatch:()=>l.createElement(r.Z,null)},(()=>l.createElement("p",null,"In the process of internal desktop applications development, many different design specs and implementations would be involved, which might cause designers and developers difficulties and duplication and reduce the efficiency of development."))))},{id:"p3",name:"show操作",mode:"code",scope:{React:l},cardProps:{description:{title:"show操作",info:"\n                   只能用于children或noMatch为html元素，或为组件的时候组件需要保证组件的props中含有style且style属性需要混入到组件\n      根元素的style中，如果是Array则每一个元素都需要满足以上两个条件中的一种\n                 "}},codeText:"\n       import React, { useState } from 'react';\n       import { ConditionalRender } from '@baifendian/adhere';\n       import { Button, Card, Empty } from 'antd';\n\n       const [rShow, setRShow] = useState(true);\n\n       <Card\n          actions={[\n            <Button\n              type=\"primary\"\n              onClick={() => {\n                setRShow(!rShow);\n              }}\n            >\n              {rShow ? '隐藏' : '显示'}\n            </Button>,\n          ]}\n       >\n          <ConditionalRender.Show conditional={rShow}>\n            <p>\n              In the process of internal desktop applications development, many different design\n              specs and implementations would be involved, which might cause designers and\n              developers difficulties and duplication and reduce the efficiency of development.\n            </p>\n          </ConditionalRender.Show>\n       </Card>\n           ",type:"PlayGround",renderChildren:()=>l.createElement(a.Z,{actions:[l.createElement(o.ZP,{type:"primary",onClick:()=>{p(!s)}},s?"隐藏":"显示")]},l.createElement(i.Z.Show,{conditional:s},l.createElement("p",null,"In the process of internal desktop applications development, many different design specs and implementations would be involved, which might cause designers and developers difficulties and duplication and reduce the efficiency of development.")))},{id:"p4",name:"show操作noMatch",mode:"code",scope:{React:l},cardProps:{description:{title:"show操作noMatch",info:"\n                   只能用于children或noMatch为html元素，或为组件的时候组件需要保证组件的props中含有style且style属性需要混入到组件\n      根元素的style中，如果是Array则每一个元素都需要满足以上两个条件中的一种\n                 "}},codeText:"\n       import React, { useState } from 'react';\n       import { ConditionalRender } from '@baifendian/adhere';\n       import { Button, Card, Empty } from 'antd';\n\n       const [rNoMatchShow, setRNoMatchShow] = useState(true);\n\n       <Card\n          actions={[\n            <Button\n              type=\"primary\"\n              onClick={() => {\n                setRNoMatchShow(!rNoMatchShow);\n              }}\n            >\n              {rNoMatchShow ? '隐藏' : '显示'}\n            </Button>,\n          ]}\n        >\n          <ConditionalRender.Show conditional={rNoMatchShow} noMatch={<p>noMatch</p>}>\n            <p>\n              In the process of internal desktop applications development, many different design\n              specs and implementations would be involved, which might cause designers and\n              developers difficulties and duplication and reduce the efficiency of development.\n            </p>\n          </ConditionalRender.Show>\n        </Card>\n           ",type:"PlayGround",renderChildren:()=>l.createElement(a.Z,{actions:[l.createElement(o.ZP,{type:"primary",onClick:()=>{u(!m)}},m?"隐藏":"显示")]},l.createElement(i.Z.Show,{conditional:m,noMatch:l.createElement("p",null,"noMatch")},l.createElement("p",null,"In the process of internal desktop applications development, many different design specs and implementations would be involved, which might cause designers and developers difficulties and duplication and reduce the efficiency of development.")))},{id:"p5",name:"show操作Fragment",mode:"code",scope:{React:l},cardProps:{description:{title:"show操作Fragment",info:"\n              只能用于children或noMatch为html元素，或为组件的时候组件需要保证组件的props中含有style且style属性需要混入到组件\n 根元素的style中，如果是Array则每一个元素都需要满足以上两个条件中的一种\n            "}},codeText:"\n       import React, { useState } from 'react';\n       import { ConditionalRender } from '@baifendian/adhere';\n       import { Button, Card, Empty } from 'antd';\n\n       const [rFragmentShow, setRFragmentShow] = useState(true);\n\n       <Card\n          actions={[\n            <Button\n              type=\"primary\"\n              onClick={() => {\n                setRFragmentShow(!rFragmentShow);\n              }}\n            >\n              {rFragmentShow ? '隐藏' : '显示'}\n            </Button>,\n          ]}\n        >\n          <ConditionalRender.Show\n            conditional={rFragmentShow}\n            noMatch={\n              <>\n                <p>NoMatchFragment1</p>\n                <p>NoMatchFragment2</p>\n                <p>NoMatchFragment3</p>\n              </>\n            }\n          >\n            <p>Fragment1</p>\n            <p>Fragment2</p>\n            <p>Fragment3</p>\n          </ConditionalRender.Show>\n        </Card>\n      ",type:"PlayGround",renderChildren:()=>l.createElement(a.Z,{actions:[l.createElement(o.ZP,{type:"primary",onClick:()=>{f(!h)}},h?"隐藏":"显示")]},l.createElement(i.Z.Show,{conditional:h,noMatch:l.createElement(l.Fragment,null,l.createElement("p",null,"NoMatchFragment1"),l.createElement("p",null,"NoMatchFragment2"),l.createElement("p",null,"NoMatchFragment3"))},l.createElement("p",null,"Fragment1"),l.createElement("p",null,"Fragment2"),l.createElement("p",null,"Fragment3")))},{id:"p6",name:"visibility操作",mode:"code",scope:{React:l},cardProps:{description:{title:"visibility操作",info:"\n                   只能用于children或noMatch为html元素，或为组件的时候组件需要保证组件的props中含有style且style属性需要混入到组件\n      根元素的style中，如果是Array则每一个元素都需要满足以上两个条件中的一种\n                 "}},codeText:"\n       import React, { useState } from 'react';\n       import { ConditionalRender } from '@baifendian/adhere';\n       import { Button, Card } from 'antd';\n\n       const [rVisibility, setRVisibility] = useState(true);\n\n       <Card\n          actions={[\n            <Button\n              type=\"primary\"\n              onClick={() => {\n                setRVisibility(!rVisibility);\n              }}\n            >\n              {rVisibility ? '隐藏' : '显示'}\n            </Button>,\n          ]}\n        >\n          <ConditionalRender.Visibility conditional={rVisibility}>\n            <p>\n              In the process of internal desktop applications development, many different design\n              specs and implementations would be involved, which might cause designers and\n              developers difficulties and duplication and reduce the efficiency of development.\n            </p>\n          </ConditionalRender.Visibility>\n        </Card>\n           ",type:"PlayGround",renderChildren:()=>l.createElement(a.Z,{actions:[l.createElement(o.ZP,{type:"primary",onClick:()=>{g(!y)}},y?"隐藏":"显示")]},l.createElement(i.Z.Visibility,{conditional:y},l.createElement("p",null,"In the process of internal desktop applications development, many different design specs and implementations would be involved, which might cause designers and developers difficulties and duplication and reduce the efficiency of development.")))},{id:"p7",name:"visibility操作noMatch",mode:"code",scope:{React:l},cardProps:{description:{title:"visibility操作noMatch",info:"\n                   只能用于children或noMatch为html元素，或为组件的时候组件需要保证组件的props中含有style且style属性需要混入到组件\n      根元素的style中，如果是Array则每一个元素都需要满足以上两个条件中的一种\n                 "}},codeText:"\n       import React, { useState } from 'react';\n       import { ConditionalRender } from '@baifendian/adhere';\n       import { Button, Card } from 'antd';\n\n       const [rNoMatchVisibility, setRNoMatchVisibility] = useState(true);\n\n       <Card\n          actions={[\n            <Button\n              type=\"primary\"\n              onClick={() => {\n                setRNoMatchVisibility(!rNoMatchVisibility);\n              }}\n            >\n              {rNoMatchVisibility ? '隐藏' : '显示'}\n            </Button>,\n          ]}\n        >\n          <ConditionalRender.Visibility conditional={rNoMatchVisibility} noMatch={<p>noMatch</p>}>\n            <p>\n              In the process of internal desktop applications development, many different design\n              specs and implementations would be involved, which might cause designers and\n              developers difficulties and duplication and reduce the efficiency of development.\n            </p>\n          </ConditionalRender.Visibility>\n        </Card>\n           ",type:"PlayGround",renderChildren:()=>l.createElement(a.Z,{actions:[l.createElement(o.ZP,{type:"primary",onClick:()=>{E(!C)}},C?"隐藏":"显示")]},l.createElement(i.Z.Visibility,{conditional:C,noMatch:l.createElement("p",null,"noMatch")},l.createElement("p",null,"In the process of internal desktop applications development, many different design specs and implementations would be involved, which might cause designers and developers difficulties and duplication and reduce the efficiency of development.")))},{id:"p8",name:"visibility操作Fragment",mode:"code",scope:{React:l},cardProps:{description:{title:"visibility操作Fragment",info:"\n              只能用于children或noMatch为html元素，或为组件的时候组件需要保证组件的props中含有style且style属性需要混入到组件\n 根元素的style中，如果是Array则每一个元素都需要满足以上两个条件中的一种\n            "}},codeText:"\n       import React, { useState } from 'react';\n       import { ConditionalRender } from '@baifendian/adhere';\n       import { Button, Card } from 'antd';\n\n       const [rFragmentVisibility, setRFragmentVisibility] = useState(true);\n\n       <Card\n        actions={[\n          <Button\n            type=\"primary\"\n            onClick={() => {\n              setRFragmentVisibility(!rFragmentVisibility);\n            }}\n          >\n            {rFragmentVisibility ? '隐藏' : '显示'}\n          </Button>,\n        ]}\n      >\n        <ConditionalRender.Visibility\n          conditional={rFragmentVisibility}\n          noMatch={\n            <>\n              <p>NoMatchFragment1</p>\n              <p>NoMatchFragment2</p>\n              <p>NoMatchFragment3</p>\n            </>\n          }\n        >\n          <p>Fragment1</p>\n          <p>Fragment2</p>\n          <p>Fragment3</p>\n        </ConditionalRender.Visibility>\n      </Card>\n      ",type:"PlayGround",renderChildren:()=>l.createElement(a.Z,{actions:[l.createElement(o.ZP,{type:"primary",onClick:()=>{v(!b)}},b?"隐藏":"显示")]},l.createElement(i.Z.Visibility,{conditional:b,noMatch:l.createElement(l.Fragment,null,l.createElement("p",null,"NoMatchFragment1"),l.createElement("p",null,"NoMatchFragment2"),l.createElement("p",null,"NoMatchFragment3"))},l.createElement("p",null,"Fragment1"),l.createElement("p",null,"Fragment2"),l.createElement("p",null,"Fragment3")))}]}),l.createElement(d.sB,{title:"Props",config:[{border:!0,title:"ConditionalRender",data:[{params:"conditional",desc:"条件",type:"boolean",defaultVal:"true"},{params:"noMatch",desc:"条件部匹配时显示的UI",type:"() => React.ReactElement | null",defaultVal:"null"},{params:"children",desc:"children",type:"() => React.ReactElement | null",defaultVal:"null"}]},{border:!0,title:"ConditionalRender.Show",data:[{params:"conditional",desc:"条件",type:"boolean",defaultVal:"true"},{params:"noMatch",desc:"条件部匹配时显示的UI",type:"React.ReactElement | null",defaultVal:"null"},{params:"children",desc:"children",type:"React.ReactElement",defaultVal:"null"}]},{border:!0,title:"ConditionalRender.Visibility",data:[{params:"conditional",desc:"条件",type:"boolean",defaultVal:"true"},{params:"noMatch",desc:"条件部匹配时显示的UI",type:"React.ReactElement | null",defaultVal:"null"},{params:"children",desc:"children",type:"React.ReactElement",defaultVal:"null"}]}]}),l.createElement(d.ae,{title:"Api",config:[{border:!0,title:"方法",data:[{name:"conditionalRender",desc:"使用方法的ConditionalRender",modifier:"static",params:[{name:"params",desc:"",type:"\n                      {\n                        conditional: boolean;\n                        match: JSX.Element;\n                        noMatch: JSX.Element | null;\n                      }\n                    ",defaultVal:"",required:""}],returnType:"void",returnDesc:""},{name:"conditionalArr",desc:"含有PermissionConditional的React.Element的数组",modifier:"static",params:[{name:"arr",desc:"",type:"any[]",defaultVal:"",required:""}],returnType:"any[]",returnDesc:""},{name:"conditionalNotEmptyArr",desc:"去除null和undefined值",modifier:"static",params:[{name:"arr",desc:"",type:"any[]",defaultVal:"",required:""}],returnType:"any[]",returnDesc:""}]}]}))}},96032:function(e,n,t){t.d(n,{$0:function(){return d},ae:function(){return p},e0:function(){return c},sB:function(){return s}});var i=t(70517),a=t(6692),o=t(90171);const{PlayGroundPageContext:r,PlayGroundPage:l}=a.default,{Section:d,CodeBoxSection:c,PropsSection:s,FunctionPropsSection:p}=l;n.ZP=function(e){let{children:n,...t}=e;const[a,d]=(0,o.useState)(),c=(0,o.useRef)();return(0,o.useEffect)((()=>{d(c.current.parentElement.parentElement)}),[]),o.createElement(r.Provider,{value:{scrollEl:a}},o.createElement(l,(0,i.Z)({ref:c},t),n))}},86915:function(e,n,t){var i=t(4134);n.Z=i.Z}}]);