"use strict";(self.webpackChunk_ctsj_build=self.webpackChunk_ctsj_build||[]).push([[2335],{92038:(e,n,r)=>{r.r(n),r.d(n,{default:()=>I});var t=r(26322),s=r(19994),a=r(1224),i=r(53516),l=r(66003),o=r(48305),d=r(80711),c=r(94413),u=r(12375);const f="cybF6IrTckM7_AsQXpLZ",p="x23SWzoyoeQ9agDOVBAG",m="jKXgUPs3Kx8Wm0nQZZmA",g="GW0_Pl78HWq_mgIpHzPv",y="LVaJXoW064FcjEBYA4on",{Fetch:v}=a.A;function x(){const[e,n]=(0,t.useState)(""),[r,s]=(0,t.useState)([]),[a,x]=(0,t.useState)(!1),I=(0,t.useRef)(),b=window.location.origin,S=window.location.origin,h=(0,t.useRef)(new v(window,b));return t.createElement("div",{className:f},a&&t.createElement("div",{className:p},t.createElement(i.A,{direction:"vertical",size:"middle",style:{display:"flex"}},t.createElement(l.A,{title:"将输入框值设置到iframe里"},t.createElement(o.A.Group,{compact:!0},t.createElement(o.A,{value:e,className:y,onChange:e=>n(e.target.value)}),t.createElement(d.Ay,{type:"primary",onClick:function(){var n;h.current.put(null==I||null===(n=I.current)||void 0===n?void 0:n.contentWindow,S,"/display",{data:e})}},"发送"))),t.createElement(l.A,{title:"获取iframe文档内容"},t.createElement(d.Ay,{type:"primary",onClick:function(){var n;h.current.get(null==I||null===(n=I.current)||void 0===n?void 0:n.contentWindow,S,"/getDoc",{data:e}).then((e=>{alert(e.getBody())}))}},"获取")),t.createElement(l.A,{title:"上传图片到iframe里面进行显示"},t.createElement(o.A,{id:"uploadImgFile",type:"file",onChange:function(e){const n=e.target.files[0],r=new FileReader;r.addEventListener("load",(e=>{var n;h.current.put(null==I||null===(n=I.current)||void 0===n?void 0:n.contentWindow,S,"/uploadImg",{data:e.target.result})})),r.readAsDataURL(n)}})),t.createElement(l.A,{title:"带有进度的上传一个文件给iframe"},t.createElement(o.A,{id:"uploadProgressFile",type:"file",onChange:function(e){const n=e.target.files[0],r=(0,u.A)(),t={file:n,completeSize:0,status:"active",fileId:r};s((e=>[...e,t]));const a=new FileReader;a.addEventListener("load",(e=>{const t=e.target.result,a=1024,i=Math.floor(t.byteLength/a)+(t.byteLength%a==0?0:1);console.log("文件名称",n.name),console.log("文件大小",n.size),console.log("上传次数",i);let l=0;const o=()=>{var e;if(l>=i)return s((e=>(e.find((e=>e.fileId===r)).status="success",[...e]))),void console.log("文件".concat(n.name,"上传完成!"));const d=t.slice(l*a,(l+1)*a);console.log("第".concat(l+1,"次上传开始")),h.current.get(null==I||null===(e=I.current)||void 0===e?void 0:e.contentWindow,S,"/progressUploadFile",{data:{segmentSize:a,segmentCount:i,currentIndex:l,fileId:r,fileName:n.name,size:n.size,buffer:d}}).then((()=>{s((e=>{console.log("第".concat(l+1,"次上传结束"));const n=e.find((e=>e.fileId===r));return n.status="active",n.completeSize=(l+1)*a,[...e]})),l++,o()}))};o()})),a.readAsArrayBuffer(n)}}),t.createElement("ul",null,t.createElement(i.A,{direction:"vertical",size:"middle",style:{display:"flex"}},r.map((e=>(console.log("进度条:",Number((e.completeSize/e.file.size*100).toFixed(2)),e.status),t.createElement("li",{key:e.fileId},t.createElement("span",null,e.file.name),t.createElement(c.A,{percent:Number((e.completeSize/e.file.size*100).toFixed(2)),status:e.status})))))))))),t.createElement("div",{className:m},t.createElement("h1",{style:{textAlign:"center"}},"Iframe"),t.createElement("iframe",{name:"server",ref:I,className:g,src:"/#/iframeServer",onLoad:function(){x(!0)}})))}const I=()=>t.createElement(s.Ay,null,t.createElement(s.wn,{title:"IframeIO"},t.createElement("p",null,"iframe的通信客户端和服务端")),t.createElement(s.Wc,{title:"代码演示",config:[{id:"p1",name:"基本使用",mode:"code",scope:{React:t},cardProps:{description:{title:"基本使用",info:"基本使用"}},active:"client.jsx",config:[{key:"client.jsx",title:"client.jsx",codeText:"import { Button, Card, Input, Progress, Space } from 'antd';\nimport React, { useRef, useState } from 'react';\nimport { v4 } from 'uuid';\n\nimport { IframeIO } from '@baifendian/adhere';\n\nimport styles from './client.less';\n\n// type UpLoadItem = {\n//   file: any;\n//   completeSize: number;\n//   status: 'success' | 'exception' | 'normal' | 'active';\n//   fileId: string;\n// };\n\nconst { Fetch } = IframeIO;\n\nexport default function () {\n  const [value, setValue] = useState('');\n  const [uploadList, setUploadList] = useState([]);\n\n  const [iframeReady, setIframeReady] = useState(false);\n  const iframeRef = useRef();\n\n  const sourceOrigin = window.location.origin;\n  const targetOrigin = window.location.origin;\n\n  const fetch = useRef(new Fetch(window, sourceOrigin));\n\n  /**\n   * onSend\n   * @description 将输入框值设置到iframe里\n   */\n  function onSend() {\n    fetch.current.put(iframeRef?.current?.contentWindow, targetOrigin, '/display', {\n      data: value,\n    });\n  }\n\n  /**\n   * onGetDoc\n   */\n  function onGetDoc() {\n    fetch.current\n\n      .get(iframeRef?.current?.contentWindow, targetOrigin, '/getDoc', {\n        data: value,\n      })\n      .then((res) => {\n        alert(res.getBody());\n      });\n  }\n\n  /**\n   * onUploadChange\n   * @param e\n   */\n  function onUploadChange(e) {\n    const fileEl = e.target;\n\n    const file = fileEl.files[0];\n\n    const reader = new FileReader();\n\n    reader.addEventListener('load', (e1) => {\n      fetch.current.put(iframeRef?.current?.contentWindow, targetOrigin, '/uploadImg', {\n        data: e1.target.result,\n      });\n    });\n\n    reader.readAsDataURL(file);\n  }\n\n  /**\n   * onUploadProgressFile\n   * @param e\n   */\n  function onUploadProgressFile(e) {\n    const file = e.target.files[0];\n\n    const fileId = v4();\n    const uploadItem = {\n      file,\n      completeSize: 0,\n      status: 'active',\n      fileId,\n    };\n\n    setUploadList((list) => [...list, uploadItem]);\n\n    const reader = new FileReader();\n    reader.addEventListener('load', (e1) => {\n      const buffer = e1.target.result;\n\n      // 段的大小 1kb\n      const segmentSize = 1024;\n\n      // 段数\n      const segmentCount =\n        Math.floor(buffer.byteLength / segmentSize) +\n        (buffer.byteLength % segmentSize === 0 ? 0 : 1);\n\n      console.log('文件名称', file.name);\n      console.log('文件大小', file.size);\n      console.log('上传次数', segmentCount);\n\n      let index = 0;\n\n      // 传递数据就是多次调用接口进行文件上传\n      const upload = () => {\n        if (index >= segmentCount) {\n          setUploadList((list) => {\n            const item = list.find((t) => t.fileId === fileId);\n            item.status = 'success';\n            return [...list];\n          });\n\n          console.log(`文件${file.name}上传完成!`);\n          return;\n        }\n\n        const uploadBuffer = buffer.slice(index * segmentSize, (index + 1) * segmentSize);\n\n        console.log(`第${index + 1}次上传开始`);\n\n        fetch.current\n\n          .get(iframeRef?.current?.contentWindow, targetOrigin, '/progressUploadFile', {\n            data: {\n              segmentSize,\n              segmentCount,\n              currentIndex: index,\n              fileId,\n              fileName: file.name,\n              size: file.size,\n              buffer: uploadBuffer,\n            },\n          })\n          .then(() => {\n            // 更新进度\n            setUploadList((list) => {\n              console.log(`第${index + 1}次上传结束`);\n              const item = list.find((t) => t.fileId === fileId);\n              item.status = 'active';\n              item.completeSize = (index + 1) * segmentSize;\n              return [...list];\n            });\n\n            index++;\n\n            upload();\n          });\n      };\n\n      upload();\n    });\n    reader.readAsArrayBuffer(file);\n  }\n\n  function onIframeLoad() {\n    setIframeReady(true);\n  }\n\n  return (\n    <div className={styles.Wrap}>\n      {iframeReady && (\n        <div className={styles.Inner}>\n          <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex' }}>\n            <Card title=\"将输入框值设置到iframe里\">\n              <Input.Group compact>\n                <Input\n                  value={value}\n                  className={styles.InputWrapper}\n                  onChange={(e) => setValue(e.target.value)}\n                />\n                <Button type=\"primary\" onClick={onSend}>\n                  发送\n                </Button>\n              </Input.Group>\n            </Card>\n\n            <Card title=\"获取iframe文档内容\">\n              <Button type=\"primary\" onClick={onGetDoc}>\n                获取\n              </Button>\n            </Card>\n\n            <Card title=\"上传图片到iframe里面进行显示\">\n              <Input id=\"uploadImgFile\" type=\"file\" onChange={onUploadChange} />\n            </Card>\n\n            <Card title=\"带有进度的上传一个文件给iframe\">\n              <Input id=\"uploadProgressFile\" type=\"file\" onChange={onUploadProgressFile} />\n              <ul>\n                <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex' }}>\n                  {uploadList.map((t) => {\n                    console.log(\n                      '进度条:',\n                      Number(((t.completeSize / t.file.size) * 100).toFixed(2)),\n                      t.status,\n                    );\n\n                    return (\n                      <li key={t.fileId}>\n                        <span>{t.file.name}</span>\n                        <Progress\n                          percent={Number(((t.completeSize / t.file.size) * 100).toFixed(2))}\n                          status={t.status}\n                        />\n                      </li>\n                    );\n                  })}\n                </Space>\n              </ul>\n            </Card>\n          </Space>\n        </div>\n      )}\n\n      <div className={styles.IframeWrap}>\n        <h1 style={{ textAlign: 'center' }}>Iframe</h1>\n        <iframe\n          name=\"server\"\n          ref={iframeRef}\n          className={styles.Iframe}\n          src=\"/#/iframeServer\"\n          onLoad={onIframeLoad}\n        />\n      </div>\n    </div>\n  );\n}\n"},{key:"client.less",title:"client.less",codeText:".Wrap {\r\n  border: 1px solid #ccc;\r\n\r\n  > .Inner {\r\n    padding: 20px;\r\n  }\r\n\r\n  .IframeWrap {\r\n    padding: 20px;\r\n\r\n    .Iframe {\r\n      width: 100%;\r\n      height: 800px;\r\n      border: 1px solid #ccc;\r\n    }\r\n  }\r\n}\r\n\r\n.InputWrapper {\r\n  width: calc(100% - 200px);\r\n}\r\n"},{key:"server.jsx",title:"server.jsx",codeText:"import { Card, Progress, Space } from 'antd';\r\nimport FileSaver from 'file-saver';\r\nimport React, { useEffect, useRef, useState } from 'react';\r\n\r\nimport { IframeIO } from '@baifendian/adhere';\r\n\r\nimport styles from './server.less';\r\n\r\n// type FileUpLoad = {\r\n//   // 段大小\r\n//   segmentSize: number;\r\n//   // 段数\r\n//   segmentCount: number;\r\n//   // 当前段数\r\n//   currentIndex: number;\r\n//   fileId: string;\r\n//   fileName: string;\r\n//   size: number;\r\n//   status: 'success' | 'exception' | 'normal' | 'active';\r\n//   // 一次传过来的buffer\r\n//   buffer: ArrayBuffer;\r\n//   // 总的buffer\r\n//   fileBuffer: ArrayBuffer[];\r\n// };\r\n\r\nconst { Router, Server } = IframeIO;\r\n\r\nexport default function () {\r\n  const [displayValue, setDisplayValue] = useState('');\r\n  const [image, setImage] = useState('');\r\n  const [uploadList, setUploadList] = useState([]);\r\n\r\n  const ref = useRef();\r\n  const server = useRef();\r\n  const router = useRef();\r\n\r\n  const sourceOrigin = window.location.origin;\r\n  const whiteList = [sourceOrigin];\r\n\r\n  useEffect(() => {\r\n    router.current = new Router();\r\n\r\n    // @ts-ignore\r\n    router.current\r\n      /**\r\n       * /display\r\n       */\r\n      .controller('/display', (ctx, next) => {\r\n        const body = ctx.request.getBody();\r\n        setDisplayValue(body);\r\n        ctx.response.setStatusCode(200);\r\n        ctx.response.setStatusMessage('ok');\r\n        next();\r\n      })\r\n      /**\r\n       * /getDoc\r\n       */\r\n      .controller('/getDoc', (ctx, next) => {\r\n        ctx.response.setBody(ref.current.outerHTML);\r\n        ctx.response.setStatusCode(200);\r\n        ctx.response.setStatusMessage('ok');\r\n        next();\r\n      })\r\n      /**\r\n       * uploadImg\r\n       */\r\n      .controller('/uploadImg', (ctx, next) => {\r\n        const body = ctx.request.getBody();\r\n        setImage(body);\r\n        ctx.response.setStatusCode(200);\r\n        ctx.response.setStatusMessage('ok');\r\n        next();\r\n      })\r\n      /**\r\n       * progressUploadFile\r\n       */\r\n      .controller('/progressUploadFile', (ctx, next) => {\r\n        const fileUpload = ctx.request.getBody();\r\n\r\n        // 一个文件的开始\r\n        if (fileUpload.currentIndex === 0) {\r\n          setUploadList((list) => {\r\n            list.push({\r\n              ...fileUpload,\r\n              status: 'active',\r\n              fileBuffer: [fileUpload.buffer],\r\n            });\r\n            return [...list];\r\n          });\r\n        }\r\n        // 一个文件的结束\r\n        else if (fileUpload.currentIndex === fileUpload.segmentCount - 1) {\r\n          setUploadList((list) => {\r\n            const index = list.findIndex((t) => t.fileId === fileUpload.fileId);\r\n\r\n            list[index] = {\r\n              ...fileUpload,\r\n              status: 'success',\r\n              fileBuffer: [...list[index].fileBuffer, fileUpload.buffer],\r\n            };\r\n            return [...list];\r\n          });\r\n        }\r\n        // 中间过程\r\n        else {\r\n          setUploadList((list) => {\r\n            const index = list.findIndex((t) => t.fileId === fileUpload.fileId);\r\n\r\n            list[index] = {\r\n              ...fileUpload,\r\n              fileBuffer: [...list[index].fileBuffer, fileUpload.buffer],\r\n            };\r\n            return [...list];\r\n          });\r\n        }\r\n\r\n        ctx.response.setStatusCode(200);\r\n        ctx.response.setStatusMessage('ok');\r\n        next();\r\n      });\r\n\r\n    server.current = new Server(whiteList, window, sourceOrigin);\r\n\r\n    server.current.use(router.current.routers());\r\n\r\n    server.current.start();\r\n  }, []);\r\n\r\n  return (\r\n    // @ts-ignore\r\n    <div className={styles.Wrap} ref={ref}>\r\n      <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex' }}>\r\n        <Card title=\"将输入框值设置到iframe里\">\r\n          <div>{displayValue}</div>\r\n        </Card>\r\n\r\n        <Card title=\"上传图片到iframe里面进行显示\">\r\n          <div>{image && <img src={image} alt=\"\" />}</div>\r\n        </Card>\r\n\r\n        <Card title=\"带有进度的上传一个文件给iframe\">\r\n          <ul>\r\n            <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex' }}>\r\n              {uploadList.map((t) => {\r\n                const percent = Number(\r\n                  (\r\n                    (t.fileBuffer.reduce((pre, val) => pre + val.byteLength, 0) / t.size) *\r\n                    100\r\n                  ).toFixed(2),\r\n                );\r\n\r\n                return (\r\n                  <li\r\n                    className={t.status === 'success' ? styles.Hover : null}\r\n                    key={t.fileId}\r\n                    onClick={() => {\r\n                      if (t.status === 'success') {\r\n                        const blob = new Blob(t.fileBuffer, { type: 'application/octet-stream' });\r\n                        FileSaver.saveAs(blob, t.fileName);\r\n                      }\r\n                    }}\r\n                  >\r\n                    <span>{t.fileName}</span>\r\n                    <Progress percent={percent} status={t.status} />\r\n                  </li>\r\n                );\r\n              })}\r\n            </Space>\r\n          </ul>\r\n        </Card>\r\n      </Space>\r\n    </div>\r\n  );\r\n}\r\n"},{key:"server.less",title:"server.less",codeText:".Wrap {\r\n  width: 100%;\r\n  height: 100%;\r\n\r\n  .Hover {\r\n    &:hover {\r\n      cursor: pointer;\r\n    }\r\n  }\r\n}\r\n"}],type:"PlayGroundTab",renderChildren:()=>t.createElement(x,null)}]}),t.createElement(s.I7,{title:"Api",config:[{border:!0,title:"Fetch",data:[{name:"constructor",desc:"构造函数",modifier:"public",params:[{name:"source",desc:"客户端的window对象",type:"MessageEventSource",defaultVal:"",required:""},{name:"origin",desc:"客户端的origin",type:"string",defaultVal:"",required:""}],returnType:"",returnDesc:""},{name:"get",desc:"get请求",modifier:"public",params:[{name:"targetWindow",desc:"服务端的window",type:"MessageEventSource",defaultVal:"",required:""},{name:"targetOrigin",desc:"服务端的origin",type:"string",defaultVal:"",required:""},{name:"pathname",desc:"pathname",type:"string",defaultVal:"",required:""},{name:"options",desc:"配置",type:"{\n                      data: any,\n                      headers: {\n                        [prop: string]: string;\n                      }\n                    }",defaultVal:"",required:""}],returnType:"Promise<Response>",returnDesc:""},{name:"put",desc:"put请求",modifier:"public",params:[{name:"targetWindow",desc:"服务端的window",type:"MessageEventSource",defaultVal:"",required:""},{name:"targetOrigin",desc:"服务端的origin",type:"string",defaultVal:"",required:""},{name:"pathname",desc:"pathname",type:"string",defaultVal:"",required:""},{name:"options",desc:"配置",type:"{\n                      data: any,\n                      headers: {\n                        [prop: string]: string;\n                      }\n                    }",defaultVal:"",required:""}],returnType:"Promise<Response>",returnDesc:""},{name:"delete",desc:"delete请求",modifier:"public",params:[{name:"targetWindow",desc:"服务端的window",type:"MessageEventSource",defaultVal:"",required:""},{name:"targetOrigin",desc:"服务端的origin",type:"string",defaultVal:"",required:""},{name:"pathname",desc:"pathname",type:"string",defaultVal:"",required:""},{name:"options",desc:"配置",type:"{\n                      data: any,\n                      headers: {\n                        [prop: string]: string;\n                      }\n                    }",defaultVal:"",required:""}],returnType:"Promise<Response>",returnDesc:""}]},{border:!0,title:"Server",data:[{name:"constructor",desc:"构造函数",modifier:"public",params:[{name:"whitelist",desc:"白名单",type:"string[]",defaultVal:"[]",required:""},{name:"source",desc:"服务端的window",type:"MessageEventSource",defaultVal:"",required:""},{name:"sourceOrigin",desc:"服务端的origin",type:"string",defaultVal:"",required:""}],returnType:"",returnDesc:""},{name:"start",desc:"启动服务",modifier:"public",params:[],returnType:"Promise<void>",returnDesc:""},{name:"close",desc:"关闭服务",modifier:"public",params:[],returnType:"Promise<void>",returnDesc:""},{name:"use",desc:"添加中间件",modifier:"public",params:[{name:"middleWare",desc:"中间件",type:"MiddleWare | MiddleWare[]",defaultVal:"",required:""}],returnType:"self",returnDesc:""}]},{border:!0,title:"Router(路由)",data:[{name:"controller",desc:"添加控制器",modifier:"public",params:[{name:"path",desc:"路由地址",type:"string",defaultVal:"",required:""},{name:"middleWare",desc:"处理请求的中间件",type:"MiddleWare",defaultVal:"",required:""}],returnType:"self",returnDesc:""},{name:"routers",desc:"获取所有的中间件",modifier:"public",params:[],returnType:"MiddleWare[]",returnDesc:""}]},{border:!0,title:"Compose(中间件组合)",data:[{name:"Compose",desc:"构造函数",modifier:"public",params:[{name:"middleWares",desc:"中间件集合",type:"MiddleWare[]",defaultVal:"",required:""}],returnType:"(ctx, next?: () => Promise<void> | void) => Promise<void></void>",returnDesc:""}]},{border:!0,title:"Request",data:[{name:"constructor",desc:"构造函数",modifier:"public",params:[{name:"options",desc:"",type:"\n                      {\n                        pathname: string;\n                        headers?: {\n                          [prop: string]: string;\n                        };\n                        statusCode?: stateCode;\n                        stateMessage?: string;\n                        body?: any;\n                      }\n                    ",defaultVal:"",required:""}],returnType:"",returnDesc:""}]},{border:!0,title:"Response",data:[{name:"constructor",desc:"构造函数",modifier:"public",params:[{name:"options",desc:"",type:"\n                      {\n                        requestId: string;\n                        headers: {\n                          [prop: string]: string;\n                        };\n                        statusCode: stateCode;\n                        stateMessage: string;\n                        body: any;\n                      }\n                    ",defaultVal:"",required:""}],returnType:"",returnDesc:""}]}]}))},19994:(e,n,r)=>{r.d(n,{Ay:()=>f,I7:()=>u,Wc:()=>d,e6:()=>c,wn:()=>o});var t=r(71860),s=r(24370),a=r(26322);const{PlayGroundPageContext:i,PlayGroundPage:l}=s.A,{Section:o,CodeBoxSection:d,PropsSection:c,FunctionPropsSection:u}=l;const f=function(e){let{children:n,onScrollBottom:r,distance:s=50,...o}=e;const[d,c]=(0,a.useState)(),u=(0,a.useRef)(),f=(0,a.useRef)(!1);return(0,a.useEffect)((()=>{function e(){const e=n.scrollHeight-n.offsetHeight,t=n.scrollTop;if(r&&Math.abs(t-e)<=s){if(f.current)return;f.current=!0,null==r||r().then((()=>{f.current=!1}))}}const n=u.current.parentElement.parentElement;return n.addEventListener("scroll",e),c(n),()=>{n.removeEventListener("scroll",e)}}),[]),a.createElement(i.Provider,{value:{scrollEl:d}},a.createElement(l,(0,t.A)({ref:u},o),n))}}}]);